/*
 Navicat MySQL Data Transfer

 Source Server         : 本地
 Source Server Type    : MySQL
 Source Server Version : 80022
 Source Host           : localhost:3306
 Source Schema         : daily_problem

 Target Server Type    : MySQL
 Target Server Version : 80022
 File Encoding         : 65001

 Date: 20/02/2021 00:47:03
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for confs
-- ----------------------------
DROP TABLE IF EXISTS `confs`;
CREATE TABLE `confs` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT,
  `created_at` datetime DEFAULT NULL,
  `updated_at` datetime DEFAULT NULL,
  `deleted_at` datetime DEFAULT NULL,
  `name` varchar(256) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  `value` varchar(256) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  KEY `idx_confs_deleted_at` (`deleted_at`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Records of confs
-- ----------------------------
BEGIN;
INSERT INTO `confs` VALUES (1, '2021-01-17 22:33:04', '2021-01-17 22:33:04', NULL, 'JWT-SignKey', 'chaosi_zju_20200101');
COMMIT;

-- ----------------------------
-- Table structure for problems
-- ----------------------------
DROP TABLE IF EXISTS `problems`;
CREATE TABLE `problems` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT,
  `created_at` datetime(3) DEFAULT NULL,
  `updated_at` datetime(3) DEFAULT NULL,
  `deleted_at` datetime(3) DEFAULT NULL,
  `name` varchar(256) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  `content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_bin,
  `result` text CHARACTER SET utf8mb4 COLLATE utf8mb4_bin,
  `link` varchar(256) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  `type` varchar(256) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  `sub_type` varchar(256) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  `is_public` tinyint(1) DEFAULT NULL,
  `creator_id` bigint unsigned DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  KEY `idx_problems_deleted_at` (`deleted_at`) USING BTREE,
  KEY `fk_problems_creator` (`creator_id`) USING BTREE,
  CONSTRAINT `fk_problems_creator` FOREIGN KEY (`creator_id`) REFERENCES `users` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=236 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Records of problems
-- ----------------------------
BEGIN;
INSERT INTO `problems` VALUES (1, '2021-01-17 13:00:09.606', '2021-01-17 13:00:09.606', NULL, '二维数组中的查找', '在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数\n\n', '选取右上角或左下角的元素，以左下角为例：\n\n* 如果左下角元素大于查找元素，则删除所在行\n* 如果左上角元素小于查找元素，则删除所在列\n\n```c++\nclass Solution {\npublic:\n    bool Find(int target, vector<vector<int> > array) {\n        int rows = array.size();\n        int columns = array[0].size();\n         \n        int r = rows - 1,c = 0;\n        while(r >= 0 && c < columns){\n            if(array[r][c] < target)\n                c++;\n            else if(array[r][c] > target)\n                r--;\n            else\n                return true;\n        }\n         \n        return false;\n    }\n};\n```\n', 'https://www.nowcoder.com/practice/abc3fe2ce8e146608e868a70efebf62e?tpId=13&tqId=11154&tPage=1&rp=2&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (2, '2021-01-17 13:00:09.614', '2021-01-17 13:00:09.614', NULL, '链表节点排序', '在 O(n log n) 时间复杂度和常数级空间复杂度下，对链表进行排序。\n\n示例 1:\n\n```\n输入: 4->2->1->3\n输出: 1->2->3->4\n```\n\n示例 2:\n\n```\n输入: -1->5->3->4->0\n输出: -1->0->3->4->5\n```\n\n', '分治，将大链表拆分成2个长度相等的小链表，递归处理，每次递归返回后，两个小链表已经有序，然后将2个小链表进行归并\n\n每次将链表分成2个长度相等的链表时，需要找到中间节点，可以使用1个快指针和1个慢指针\n\n#### 1）递归\n\n递归是“从上往下”的思想，如果考虑递归调用的函数栈帧，那么空间复杂度为O(n)，不考虑则空间复杂度为O(1)\n\n```c++\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* sortList(ListNode* head) {\n        if(!head || !head->next)    return head;\n        ListNode *slow = head,*fast = head;\n        while(fast && fast->next && fast->next->next){\n            fast = fast->next->next;\n            slow = slow->next;\n        }\n        ListNode *l1 = head,*l2 = slow->next;\n        slow->next = NULL;\n        l1 = sortList(l1);\n        l2 = sortList(l2);\n        //归并\n        ListNode node(0),*curr = &node;\n        while(l1 && l2){\n            if(l1->val < l2->val){\n                curr->next = l1;\n                l1 = l1->next;\n            }\n            else{\n                curr->next = l2;\n                l2 = l2->next;\n            }\n            curr = curr->next;\n        }\n        if(l1)      curr->next = l1;\n        else if(l2) curr->next = l2;\n\n        return node.next;\n    }\n};\n```\n\n#### 2）迭代\n\n也可以[“从下往上”](https://leetcode.com/problems/sort-list/discuss/46712/Bottom-to-up(not-recurring)-with-o(1)-space-complextity-and-o(nlgn)-time-complextity)，避免函数栈帧的开销\n\n```c++\n/**\n * Merge sort use bottom-up policy, \n * so Space Complexity is O(1)\n * Time Complexity is O(NlgN)\n * stable sort\n*/\nclass Solution {\npublic:\n    ListNode *sortList(ListNode *head) {\n        if(!head || !(head->next)) return head;\n        \n        //get the linked list\'s length\n        ListNode* cur = head;\n        int length = 0;\n        while(cur){\n            length++;\n            cur = cur->next;\n        }\n        \n        ListNode dummy(0);\n        dummy.next = head;\n        ListNode *left, *right, *tail;\n        for(int step = 1; step < length; step <<= 1){\n            cur = dummy.next;\n            tail = &dummy;\n            while(cur){\n                left = cur;\n                right = split(left, step);\n                cur = split(right,step);\n                tail = merge(left, right, tail);\n            }\n        }\n        return dummy.next;\n    }\nprivate:\n    /**\n     * Divide the linked list into two lists,\n     * while the first list contains first n ndoes\n     * return the second list\'s head\n     */\n    ListNode* split(ListNode *head, int n){\n        //if(!head) return NULL;\n        for(int i = 1; head && i < n; i++) head = head->next;\n        \n        if(!head) return NULL;\n        ListNode *second = head->next;\n        head->next = NULL;\n        return second;\n    }\n    /**\n      * merge the two sorted linked list l1 and l2,\n      * then append the merged sorted linked list to the node head\n      * return the tail of the merged sorted linked list\n     */\n    ListNode* merge(ListNode* l1, ListNode* l2, ListNode* head){\n        ListNode *cur = head;\n        while(l1 && l2){\n            if(l1->val > l2->val){\n                cur->next = l2;\n                cur = l2;\n                l2 = l2->next;\n            }\n            else{\n                cur->next = l1;\n                cur = l1;\n                l1 = l1->next;\n            }\n        }\n        cur->next = (l1 ? l1 : l2);\n        while(cur->next) cur = cur->next;\n        return cur;\n    }\n};\n```\n', 'https://leetcode.com/problems/sort-list/description/', 'algorithm', '链表', 1, 1);
INSERT INTO `problems` VALUES (3, '2021-01-17 13:00:09.615', '2021-01-17 13:00:09.615', NULL, '将链表偶数位置的节点移至尾部', '给定一个单链表，把所有的奇数节点和偶数节点分别排在一起。请注意，这里的奇数节点和偶数节点指的是节点编号的奇偶性，而不是节点的值的奇偶性。\n\n请尝试使用原地算法完成。你的算法的空间复杂度应为 O(1)，时间复杂度应为 O(nodes)，nodes 为节点总数。\n\n示例 1:\n\n```\n输入: 1->2->3->4->5->NULL\n输出: 1->3->5->2->4->NULL\n```\n\n示例 2:\n\n```\n输入: 2->1->3->5->6->4->7->NULL \n输出: 2->3->6->7->1->5->4->NULL\n```\n\n说明:\n\n* 应当保持奇数节点和偶数节点的相对顺序。\n* 链表的第一个节点视为奇数节点，第二个节点视为偶数节点，以此类推。\n\n', '使用两个指针oddlist和evenlist指向奇数链表和偶数链表的表头节点。然后使用一个指针p1遍历原链表，每次将一个节点指向它的下下个节点，从而将奇数链表和偶数链表拆开\n\np1最后会指向原链表的最后一个结尾，这个节点可能是奇数链表的尾节点，也可能是偶数链表的尾节点。因此可以使用一个int变量odd做状态记录，通过odd判断p1是奇数链表的尾节点还是偶数链表的尾节点：\n\n* 如果是奇数链表的尾节点，那么将这个节点的下一个节点设为偶数链表的头结点，处理完成\n* 如果是偶数链表的尾节点，那么没有办法访问奇数链表的尾节点，因此使用另外一个指针p2，p2步伐p1慢，每次p1前移之前更新p2，因此在这种情况下p2指向奇数链表的尾节点，将其下一个节点设为偶数链表的头结点来完成处理\n\n```c++\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* oddEvenList(ListNode* head) {\n        if(!head)    return head;\n        \n        ListNode *oddlist = head,*evenlist = head->next,*p1 = head,*p2 = NULL;\n        int odd = 1;\n        while(p1->next){\n            ListNode *tp = p1->next;\n            p1->next = tp->next;\n            p2 = p1;\n            p1 = tp;\n            odd = 1 - odd;\n        }\n        \n        if(odd)//此时p1是奇数链表的尾节点\n            p1->next = evenlist;\n        else//此时p2是奇数链表的尾节点，因为odd不为1，说明上面while循环体至少被执行1次，所以p2不为NULL\n            p2->next = evenlist;\n        return oddlist;\n    }\n};\n```\n', 'https://leetcode.com/problems/odd-even-linked-list/description/', 'algorithm', '链表', 1, 1);
INSERT INTO `problems` VALUES (4, '2021-01-17 13:00:09.618', '2021-01-17 13:00:09.618', NULL, '阶乘后的零', '给定一个整数 n，返回 n! 结果尾数中零的数量。\n\n示例 1:\n\n```\n输入: 3\n输出: 0\n解释: 3! = 6, 尾数中没有零。\n```\n\n示例 2:\n\n```\n输入: 5\n输出: 1\n解释: 5! = 120, 尾数中有 1 个零.\n```\n\n说明: 你算法的时间复杂度应为对数级\n\n', '10=2\\*5，因此，每一对(2,5)就可以产生一个0\n\n由于每个偶数中就可以分解出一个因子2，因此n!中，2的个数肯定比5多，所以问题转换为求1~n中，可以分解出多少个因子5：\n\n```\n5,10,15,20,25,30,...,125,130,...\n```\n\n因此，n/5就可以就得有多少个数能分解出1个5\n\n但是注意上面的25和125：\n\n```\n25 = 5 * 5;\n125 = 5 * 5 * 5;\n```\n\n这些数中可以分解出多个5，因此，还需要求1~n中，能分解出多少个25，125...\n\n```\n25,50,75,100,125,150,...\n//等价于1*(5*5),2*(5*5),3*(5*5),...,5*(5*5),...，这些数中的5还需要加1次\n\n125,250,375,...\n//等价于1*(5*5*5),2*(5*5*5),3*(5*5*5),...，这些数中的5又要多加1次\n\n...\n```\n\n故，设num=5，每次累加n/num后，num就需要乘以5。知道num>n：\n\n```c++\nclass Solution {\npublic:\n    int trailingZeroes(int n) {\n        long long num = 5;\n        int count = 0;\n        while(num <= n){\n            count += (n / num);\n            num *= 5;\n        }\n        return count;\n    }\n};\n```\n\n注意，num的类型为long long，原因在于使用int时可能溢出，例如：\n\n```\n当 n = 1808548329时，如果num为int，在num>n之前，num的值：\n\n5\n25\n125\n625\n3125\n15625\n78125\n390625\n1953125\n9765625\n48828125\n244140625\n1220703125\n1808548329       //这里开始溢出\n452807053\n-2030932031\n-1564725563\n766306777\n-463433411\n\nINT_MAX:2147483647\n```\n', 'https://leetcode.com/problems/factorial-trailing-zeroes/description/', 'algorithm', '数学', 1, 1);
INSERT INTO `problems` VALUES (5, '2021-01-17 13:00:09.618', '2021-01-17 13:00:09.618', NULL, '直线上最多的点数', '给定一个二维平面，平面上有 n 个点，求最多有多少个点在同一条直线上。\n\n示例 1:\n\n```\n输入: [[1,1],[2,2],[3,3]]\n输出: 3\n解释:\n^\n|\n|        o\n|     o\n|  o  \n+------------->\n0  1  2  3  4\n```\n\n示例 2:\n\n```\n输入: [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]\n输出: 4\n解释:\n^\n|\n|  o\n|     o        o\n|        o\n|  o        o\n+------------------->\n0  1  2  3  4  5  6\n```\n\n', '遍历每一个点p，计算点p与其余点组成的直线中，哪一条上面的点最多。使用一个map存储每一条直线，key是一个pair，表示这条直线的斜率，value是这条直线上点的个数\n\n因此，为计算一个点在哪条直线上，只需要计算这个点和p的斜率，然后将map中对应直线的点数加1。注意可能存在与p重合的点，因此使用一个变量samePoints计算与p重合的点的个数，那么p和其余点的所有直线中，点数最大就是map中的最大value加上samePoints\n\n由于遍历到后面时，前面的点与后面的点组成的直线已经计算过，所以每个点只需要和其后剩余的点进行分析即可\n\n```c++\n/**\n * Definition for a point.\n * struct Point {\n *     int x;\n *     int y;\n *     Point() : x(0), y(0) {}\n *     Point(int a, int b) : x(a), y(b) {}\n * };\n */\nclass Solution {\npublic:\n    int maxPoints(vector<Point>& points) {\n        int num = points.size();\n        int res = 0;\n        for(int i = 0;i < num;i++){\n            map<pair<int,int>,int> lines;\n            int samePoints = 1,localmax = 0;\n            for(int j = i + 1;j < num;j++){\n                if(points[i].x == points[j].x && points[i].y == points[j].y)\n                    samePoints++;\n                else\n                    localmax = max(localmax,++lines[getSlope(points[i],points[j])]);\n            }\n            res = max(res,localmax + samePoints);\n        }\n        return res;\n    }\nprivate:\n    pair<int,int> getSlope(const Point &p1,const Point &p2){\n        int dx = p1.x - p2.x;\n        int dy = p1.y - p2.y;\n        \n        if(dx == 0) return pair<int,int>(0,p1.y);\n        if(dy == 0) return pair<int,int>(p1.x,0);\n        \n        int d = gcd(dx,dy);\n        \n        return pair<int,int>(dx/d,dy/d);\n    }\n    \n    //求最大公约数\n    int gcd(int x,int y){\n        return y == 0 ? x : gcd(y,x % y);\n    }\n};\n```\n', 'https://leetcode.com/problems/max-points-on-a-line/description/', 'algorithm', '数学', 1, 1);
INSERT INTO `problems` VALUES (6, '2021-01-17 13:00:09.619', '2021-01-17 13:00:09.619', NULL, '替换空格', '请实现一个函数，将一个字符串中的空格替换成`“%20”`。例如，当字符串为`We Are Happy`.则经过替换之后的字符串为`We%20Are%20Happy`\n\n', '直接在原串上修改，假设后面有足够多的空余内存\n\n先计算好替换后的长度，然后从后向前替换\n\n```c++\nclass Solution {\npublic:\n    //参数length表示str开始的可用内存空间\n    void replaceSpace(char *str,int length) {\n        if(length <= 0)\n            return ;\n        \n        int length1 = 0,blankNumber = 0,i = 0;\n        while(str[i] != \'\\0\'){\n            if(str[i] == \' \')\n                blankNumber++;\n            length1++;\n            i++;\n        }\n            \n        int length2 = length1 + 2 * blankNumber;\n        if(length2 >= length)\n            return;\n        \n        int curr = length2 - 1;\n        for(int i = length1 - 1;i >= 0;i--){\n            if(str[i] == \' \'){\n                str[curr--] = \'0\';\n                str[curr--] = \'2\';\n                str[curr--] = \'%\';\n            }\n            else\n                str[curr--] = str[i];\n        }\n        str[length2] = \'\\0\';\n    }\n};\n```\n', 'https://www.nowcoder.com/practice/4060ac7e3e404ad1a894ef3e17650423?tpId=13&tqId=11155&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking', 'algorithm', '字符串', 1, 1);
INSERT INTO `problems` VALUES (7, '2021-01-17 13:00:09.620', '2021-01-17 13:00:09.620', NULL, '单词搜索', 'OJ链接：[牛客](https://www.nowcoder.com/practice/c61c6999eecb4b8f88a98f66b273a3cc?tpId=13&tqId=11218&tPage=4&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking)、[Leetcode](https://leetcode.com/problems/word-search/description/)\n\n请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一个格子开始，每一步可以在矩阵中向左，向右，向上，向下移动一个格子。如果一条路径经过了矩阵中的某一个格子，则之后不能再次进入这个格子\n\n例如：\n\n```\na b c e \ns f c s \na d e e\n```\n\n这样的 `3 X 4` 矩阵中包含一条字符串`\"bcced\"`的路径，但是矩阵中不包含`\"abcb\"`路径，因为字符串的第一个字符`b`占据了矩阵中的第一行第二个格子之后，路径不能再次进入该格子\n\n', '#### 1）使用辅助空间\n\n遍历矩阵，以每个字符为起点，使用DFS进行查找匹配，使用矩阵`flag`记录走过的位置，防止重复\n\n```c++\nclass Solution {\npublic:\n    bool exist(vector<vector<char>>& board, string word) {\n        if(word == \"\")      return true;\n        if(board.empty())   return false;\n        \n        vector<vector<char>> flags(board.size(),vector<char>(board[0].size(),0));\n        \n        for(int i = 0;i < board.size();i++){\n            for(int j = 0;j < board[0].size();j++){\n                if(board[i][j] == word[0])\n                    if(dfs(board,flags,i,j,word,0))\n                        return true;\n            }\n        }\n        return false;\n    }\nprivate:\n    bool dfs(vector<vector<char>> &board,vector<vector<char>> &flags,int r,int c,const string &word,int idx){\n        if(idx == word.size())  return true;\n        if(r < 0 || r >= board.size() || c < 0 || c >= board[0].size()\n          || flags[r][c] == 1 || board[r][c] != word[idx])\n            return false;\n        \n        flags[r][c] = 1;\n        bool res = dfs(board,flags,r + 1,c,word,idx + 1) || dfs(board,flags,r - 1,c,word,idx + 1)\n                || dfs(board,flags,r,c + 1,word,idx + 1) || dfs(board,flags,r,c - 1,word,idx + 1);\n        flags[r][c] = 0;\n        return res;\n    }\n};\n```\n\n#### 2）不使用辅助空间\n\n也可以直接将走过的位置标记为`\'#\'`，直接在原矩阵上修改，不使用额外的辅助空间：\n\n```c++\nclass Solution {\npublic:\n    bool exist(vector<vector<char>>& board, string word) {\n        if(word == \"\")      return true;\n        if(board.empty())   return false;\n        \n        for(int i = 0;i < board.size();i++){\n            for(int j = 0;j < board[0].size();j++){\n                if(board[i][j] == word[0])\n                    if(dfs(board,i,j,word,0))\n                        return true;\n            }\n        }\n        return false;\n    }\nprivate:\n    bool dfs(vector<vector<char>> &board,int r,int c,const string &word,int idx){\n        if(idx == word.size())  return true;\n        if(r < 0 || r >= board.size() || c < 0 || c >= board[0].size()\n          || board[r][c] != word[idx])\n            return false;\n        \n        char ch = board[r][c];\n        board[r][c] = \'#\';\n        bool res = dfs(board,r + 1,c,word,idx + 1) || dfs(board,r - 1,c,word,idx + 1)\n                || dfs(board,r,c + 1,word,idx + 1) || dfs(board,r,c - 1,word,idx + 1);\n        board[r][c] = ch;\n        return res;\n    }\n};\n```\n', '', 'algorithm', '字符串', 1, 1);
INSERT INTO `problems` VALUES (8, '2021-01-17 13:00:09.621', '2021-01-17 13:00:09.621', NULL, '判断字符串是否是回文串', '给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。\n\n说明：本题中，我们将空字符串定义为有效的回文串。\n\n示例 1:\n\n```\n输入: \"A man, a plan, a canal: Panama\"\n输出: true\n```\n\n示例 2:\n\n```\n输入: \"race a car\"\n输出: false\n```\n\n', '注意题目要求，**只考虑字母和数字，同时可以忽略大小写**，意味着其它无效字符会被忽略\n\n使用两个变量l和r，一个从字符串左边出发，一个从右边出发，每次都找到一个数字或字母。因为忽略大小写，因此可以统一使用toupper转换为大写进行比较，相等则继续，直到l>=r，说明是一个有效回文。否则不是有效回文\n\n```c++\nclass Solution {\npublic:\n    bool isPalindrome(string s) {\n        for(int l = 0,r = s.length() - 1;l < r;l++,r--) {\n            while(!isalnum(s[l]) && l < r) {l++;}\n            while(!isalnum(s[r]) && r > l) {r--;}\n            if(toupper(s[l]) != toupper(s[r]))  return false;\n        }\n        return true;\n    }\n};\n```\n', 'https://leetcode.com/problems/valid-palindrome/description/', 'algorithm', '字符串', 1, 1);
INSERT INTO `problems` VALUES (9, '2021-01-17 13:00:09.623', '2021-01-17 13:00:09.623', NULL, '买卖股票的最佳时机III', '给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。\n\n设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。\n\n注意: 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。\n\n示例 1:\n\n```\n输入: [3,3,5,0,0,3,1,4]\n输出: 6\n解释: 在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。\n     随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。\n```\n\n示例 2:\n\n```\n输入: [1,2,3,4,5]\n输出: 4\n解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。   \n     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。   \n     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。\n```\n\n示例 3:\n\n```\n输入: [7,6,4,3,1] \n输出: 0 \n解释: 在这个情况下, 没有交易完成, 所以最大利润为 0。\n```\n\n', '#### 1）动态规划\n\n设`dp(i,k)`表示前`i`天最多完成`k`（这里“最多”完成2笔，所以`k`不会大于2）笔交易的最大利润\n\n> \"最多\"完成2笔交易，那么也可以只完成1笔交易，或者不进行交易。同一天可以买进卖出、买进卖出...，但是这样和没进行交易没有区别。总之，`dp(i,k)`总是有意义的\n\n对于第`i`天，我们有2种选择，进行交易或者不交易（即卖出或者不卖出）：\n\n* 如果不卖出，那么`dp(i,k) = dp(i - 1,k)`\n* 如果卖出，那么`dp(i,k) = max{prices[i] - prices[j] + dp(j,k - 1)}`（`0 ≤ j ≤ i`），也就是下列情况中的最大值：\n    - ~~在第`i`天最后一次买入：`prices[i] - prices[i] + dp(i,k - 1) = dp(i,k - 1)`（**这种情况其实可以省略，因为当第`i`天不进入买入又卖出时，利润肯定不会小于第`i`天买进，然后又在第`i`天卖出，因为同一天买进卖出没有利润，反而浪费了一笔可以进行的交易**）~~\n    - 在第`i - 1`天最后一次买入：`prices[i] - prices[i - 1] + dp(i - 1,k - 1)`\n    - 在第`i - 2`天最后一次买入：`prices[i] - prices[i - 2] + dp(i - 2,k - 1)`\n    - 在第`i - 3`天最后一次买入：`prices[i] - prices[i - 3] + dp(i - 3,k - 1)`\n    - ...\n    - 在第`1`天最后一次买入：`prices[i] - prices[1] + dp(1,k - 1)`\n    - 在第`0`天最后一次买入：`prices[i] - prices[0] + dp(0,k - 1)`\n\n所以`dp(i,k) = max{dp(i - 1,k),max{prices[i] - prices[j] + dp(j,k - 1)}}`（`0 ≤ j < i`）\n\n* 时间复杂度：O(k \\* n^2)（199 / 200 个通过测试用例）\n* 空间复杂度：O(k \\* n)\n\n```c++\nclass Solution {\npublic:\n    int maxProfit(vector<int>& prices) {\n        if(prices.size() <= 1)  return 0;\n        \n        int sz = prices.size();\n        vector<vector<int>> dp(prices.size(),vector<int>(3,0));\n        \n        for(int i = 1;i < sz;i++)\n            for(int k = 1;k <= 2;k++){\n                int _max = 0;//max{prices[i] - prices[j] + dp(j,k - 1)}\n                for(int j = 0;j < i;j++)\n                    _max = max(_max,prices[i] - prices[j] + dp[j][k - 1]);\n                dp[i][k] = max(dp[i - 1][k],_max);\n            }\n        \n        return dp[sz - 1][2];\n    }\n};\n```\n\n#### 2）时间优化\n\n设`dp(i,k)`表示前`i`天最多完成`k`（这里“最多”完成2笔，所以`k`不会大于2）笔交易的最大利润\n\n对于第`i`天，我们有2种选择，进行交易或者不交易（即卖出或者不卖出）：\n\n* 如果不卖出，那么`dp(i,k) = dp(i - 1,k)`\n* 如果卖出，那么`dp(i,k) = max{prices[i] - prices[j] + dp(j,k - 1)}`（`0 ≤ j < i`）\n\n和前面不同的时，我们希望快速求得上面第二种情况的值，即：**前`i`天最多完成`k`笔交易，并且第`i`天卖出时的最大利润**。可以设为`local(i,k)`，有`local(i,k) = max{prices[i] - prices[j] + dp(j,k - 1)}`（`0 ≤ j < i`）。可以分析最后一次买入的时间\n\n* 如果最后一次买入是在第`i - 1`天，那么`local(i,k) = prices[i] - prices[i - 1] + dp(i - 1,k - 1)`\n* 如果最后一次买入在第`i - 1`天以前，现在不管最后一次买入是在第`i - 1`天前的哪一天，我们可以假设第`i - 1`天前买入后，在第`i - 1`天卖了又买入，这样计算得到的结果相同。所以`local(i,k) = prices[i] - prices[i - 1] + local(i - 1,k)`\n\n因此:\n\n* `local(i,k) = prices[i] - prices[i - 1] + max{dp(i - 1,k - 1),local(i - 1,k)}`\n* `dp(i,k) = max{dp(i - 1,k),local(i,k)}`\n\n复杂度分析：\n\n* 时间复杂度：O(k \\* n)\n* 空间复杂度：O(k \\* n)\n\n```c++\nclass Solution {\npublic:\n    int maxProfit(vector<int>& prices) {\n        if(prices.size() <= 1)  return 0;\n        \n        int sz = prices.size();\n        vector<vector<int>> dp(prices.size(),vector<int>(3,0));\n        vector<vector<int>> local(prices.size(),vector<int>(3,0));\n        \n        for(int i = 1;i < sz;i++)\n            for(int k = 1;k <= 2;k++){\n                local[i][k] = prices[i] - prices[i - 1] + max(dp[i - 1][k - 1],local[i - 1][k]);\n                dp[i][k] = max(dp[i - 1][k],local[i][k]);\n            }\n        \n        return dp[sz - 1][2];\n    }\n};\n```\n\n#### 3）优化空间\n\n通过观察状态转移方程，每个状态只受前一个状态影响，因此可以进行状态压缩，优化空间。要注意的是，`local[i][k]`可能依赖于`dp[i - 1][k - 1]`。因此，如果`k`从小增大，那么当前行的`dp`值会覆盖前一行的`dp`值。因此获取到的`dp[i - 1][k - 1]`会不正确。所以状态压缩后，`k`要改成从大减小\n\n* 时间复杂度：O(k \\* n)（由于这里k=2,所以时间复杂度为O(n)）\n* 空间复杂度：O(k)（由于这里k=2,所以空间复杂度为O(1)）\n\n```c++\nclass Solution {\npublic:\n    int maxProfit(vector<int>& prices) {\n        if(prices.size() <= 1)  return 0;\n\n        vector<int> dp(3,0);\n        vector<int> local(3,0);\n        \n        for(int i = 1;i < prices.size();i++)\n            for(int k = 2;k > 0;k--){\n                local[k] = prices[i] - prices[i - 1] + max(dp[k - 1],local[k]);\n                dp[k] = max(dp[k],local[k]);\n            }\n        \n        return dp[2];\n    }\n};\n```\n', '', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (10, '2021-01-17 13:00:09.625', '2021-01-17 13:00:09.625', NULL, '二叉树的最大路径和', '给定一个非空二叉树，返回其最大路径和。\n\n本题中，路径被定义为一条从树中任意节点出发，达到任意节点的序列。该路径至少包含一个节点，且不一定经过根节点。\n\n示例 1:\n\n```\n输入: [1,2,3]\n\n       1\n      / \\\n     2   3\n\n输出: 6\n```\n\n示例 2:\n\n```\n输入: [-10,9,20,null,null,15,7]\n\n   -10\n   / \\\n  9  20\n    /  \\\n   15   7\n\n输出: 42\n```\n\n', '对于一棵root为根节点的树，假设其左子树(含左子节点)的最大路径为maxLeft，右子树(含右子节点)的最大路径为maxRight：\n\n* 如果maxLeft小于等于0，那么不含入左子节点（也就是说将路径从左子节点处切断），可以得到一个更大的路径\n* 如果maxRight小于等于0，那么不含入右子节点（也就是说将路径从右子节点处切断），可以得到一个更大的路径\n* 如果两者都大于0，那么连通左右子树可以得到一个更大的路径\n\n因此，根据上面几种情况，可以得到一个“局部最大”的路径。局部最大是因为这个路径包含了root节点。但是全局最大的路径不一定包含root节点。因此需要一个全局最大路径的变量res，如果res小于这个局部最大路径，那么更新res\n\n那么maxLeft和maxRight应该怎么得到，也就是函数应该返回什么？注意上面对maxLeft和maxRight的描述中，这两个都包含了左右子树的根节点，因此，返回值不是res。那么是不是这个局部最大的路径？也不是，因为局部最大的路径可能连通了左右子树，比如上面示例2中以20为根节点的树。因此，这个返回值是一个单边路径，也就是说，如果maxLeft和maxRight都小于0，那么只返回根节点的值（路径只包含 根节点），否则，返回maxLeft和maxRight中较大者加上根节点的值\n\n```c++\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int maxPathSum(TreeNode* root) {\n        int res = INT_MIN;\n        maxPathSum(root,res);\n        \n        return res;\n    }\nprivate:\n    int maxPathSum(TreeNode* root,int &res) {\n        if(!root)   return 0;\n        \n        int max;\n        int leftMax = maxPathSum(root->left,res);\n        int rightMax = maxPathSum(root->right,res);\n        if(leftMax <= 0 && rightMax <= 0)   //两边都小于等于0\n            max = root->val;\n        else if(leftMax <= 0 || rightMax <= 0) //有一边大于0，另一边小于等于0\n            max = leftMax > rightMax ? leftMax + root->val : rightMax + root->val;\n        else //两边都大于0\n            max = leftMax + rightMax + root->val;\n        \n        if(max > res)   res = max;\n        \n        if(leftMax <= 0 && rightMax <= 0)   //两边都小于等于0\n            return root->val;\n        else    //至少有一边大于0\n            return leftMax > rightMax ? leftMax + root->val : rightMax + root->val;\n    }\n};\n```\n', 'https://leetcode.com/problems/binary-tree-maximum-path-sum/description/', 'algorithm', '树', 1, 1);
INSERT INTO `problems` VALUES (11, '2021-01-17 13:00:09.626', '2021-01-17 13:00:09.626', NULL, '最长回文子串', '给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为1000。\n\n示例 1：\n\n```\n输入: \"babad\"\n输出: \"bab\"\n注意: \"aba\"也是一个有效答案。\n```\n\n示例 2：\n\n```\n输入: \"cbbd\"\n输出: \"bb\"\n```\n\n', '#### 方法一：动态规划\n\n使用一个矩阵记录每个子串是不是回文，字符串的任意单个字符组成的字符串肯定都是回文，即矩阵的对角线都为true，判断任意子串是不是回文，即求`state[i][j]`，如果`i + 1 = j`，那么`state[i][j] = (s[i] == s[j])`，否则，`state[i][j] = (s[i] == s[j]) && state[i + 1][j - 1]`：\n\n<div align=\"center\"> <img src=\"https://github.com/arkingc/note/raw/master/pic/leetcode-5.png\"/> </div>\n\n下面的解法对状态进行了压缩，使用的是一维矩阵而不是二维矩阵，但是思想相同：\n\n```c++\nclass Solution {\npublic:\n    string longestPalindrome(string s) {\n        if(s.length() <= 1) return s;\n        \n        int len = s.length();\n        string res = \"\";\n        //做了状态压缩\n        bool *state = new bool[len];\n        state[len - 1] = true;\n        for(int i = len - 2;i >= 0;i--){\n            for(int j = len - 1;j >= i;j--){\n                if(i == j)\n                    state[j] = true;\n                else if(s[i] == s[j]){\n                    if(i == j - 1)   state[j] = true;\n                    else    state[j] = state[j - 1];\n                }\n                else \n                    state[j] = false;\n                if(state[j] && (j - i + 1) > res.length())\n                    res = s.substr(i,(j - i + 1));\n            }\n        }\n        return res;\n    }\n};\n```\n\n#### 方法二：从中心扩展\n\n以字符串的每个字符为中心，向两边扩展，找出以每个字符为中心的回文，其中最长的就是结果\n\n注意：字符串的中心可能是多个相同的字符，所以每次处理以连续的相同字符为中心\n\n```c++\nclass Solution {\npublic:\n    string longestPalindrome(string s) {\n        if(s.length() <= 1) return s;\n        \n        string res = \"\";\n        int j;\n        for(int i = 0;i < s.length();i = j){\n            //向右找到第一个不相同的字符，i~(j-1)为相同字符\n            for(j = i + 1;j < s.length() && s[j] == s[i];j++) {}\n            int len = longestPalindrome(s,i,j - 1);\n            if(len > res.length())\n                res = s.substr(i - (len - (j - i)) / 2,len);\n        }\n        return res;\n    }\nprivate:\n    int longestPalindrome(const string &s,int i,int j){\n        int l = i - 1,r = j + 1,len = s.length();\n        int count = j - i + 1;\n        while(l >= 0 && r < len && s[l--] == s[r++])\n                count += 2;\n        return count;\n    }\n};\n```\n', 'https://leetcode.com/problems/longest-palindromic-substring/description/', 'algorithm', '字符串', 1, 1);
INSERT INTO `problems` VALUES (12, '2021-01-17 13:00:09.627', '2021-01-17 13:00:09.627', NULL, '判断一棵二叉树是否是BST', '给定一个二叉树，判断其是否是一个有效的二叉搜索树\n\n', '#### 1）错误的解法\n\n对于节点node，如果\n\n1. node-val > node->left->val;\n2. node->val < node->right->val;\n\n那么继续判断左右子树是否满足该性质，如果满足，那么该树就是一棵BST\n\n但是这种方法只满足局部BST性质，举例来说：\n\n```\n       2\n      / \\\n     1   5\n    / \\ / \\\n   0  3 4  6 \n```\n\n这个例子满足上面的性质：\n\n* 对于节点2，其左子节点小于2，右子节点大于2\n* 节点1的左子节点小于1，右子节点大于1\n* 5的左子节点小于5，右子节点大于6\n\n如果按照上面的逻辑，会判断这棵树是BST，但是在根节点2的左子树中，存在节点3，大于根节点2，所以实际上并不是一棵BST\n\n#### 2）正确的解法\n\n中序遍历，如果是BST，那么中序遍历序列一定是递增的序列，只需要用一个变量维护已经遍历过的序列的最后一个值prev，通过比较当前节点的值和prev，如果依然满足递增的性质，那么继续判断，否则返回false\n\n```c++\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool isValidBST(TreeNode* root) {\n        int *prev = nullptr;\n        return isValidBST(root,&prev);\n    }\n    \n    bool isValidBST(TreeNode* node,int **pprev){\n        if(!node)\n            return true;\n        \n        bool res = isValidBST(node->left,pprev);\n        \n        if(*pprev)\n            res = res && (node->val > **pprev);\n        *pprev = &(node->val);\n        \n        res = res && isValidBST(node->right,pprev);\n        \n        return res;\n    }\n};\n```\n', 'https://leetcode.com/problems/validate-binary-search-tree/description/', 'algorithm', '树', 1, 1);
INSERT INTO `problems` VALUES (13, '2021-01-17 13:00:09.628', '2021-01-17 13:00:09.628', NULL, '完美平方数', '给定正整数 n，找到若干个完全平方数（比如 `1, 4, 9, 16, ...`）使得它们的和等于 n。你需要让组成和的完全平方数的个数最少。\n\n示例 1:\n\n```\n输入: n = 12\n输出: 3 \n解释: 12 = 4 + 4 + 4.\n```\n\n示例 2:\n\n```\n输入: n = 13\n输出: 2\n解释: 13 = 4 + 9.\n```\n\n', '完美平方数：1,4,9,16,25,...\n\n求一个数n最少由多少个完美平方数组成，假设q为sqrt(n)：\n\n* 如果这些数里面包含1，那么求出n-1\\*1最少由多少个完美平方数组成，然后加1就是结果\n* 否则，如果这些数里面包含2，那么求出n-2\\*2最少由多少个完美平方数组成，然后加1就是结果\n* ...\n* 否则，如果这些数里面包含q,那么求出n-q\\*q最少由多少个完美平方数组成，然后加1就是结果\n\n因此，这是一个动态规划问题。F(n) = min{F(n),F(n-1)+1,F(n-4)+1,...,F(n-q\\*q)+1}。如果递归求解会存在重复子问题，因此使用一个数组state保存状态，“从小到大”求出F(1)到F(n)，结果就是state[n]\n\n```c++\nclass Solution {\npublic:\n    int numSquares(int n) {\n        vector<int> state(n + 1,INT_MAX);\n        state[0] = 0;\n        \n        for(int i = 1;i <= n;i++){\n            int q = sqrt(i);\n            if(q * q == i)  state[i] = 1;\n            else{\n                for(int j = 1;j <= q;j++){\n                    if(state[i - j * j] + 1 < state[i])\n                        state[i] = state[i - j * j] + 1;\n                }\n            }\n        }\n        \n        return state[n];\n    }\n};\n```\n', 'https://leetcode.com/problems/perfect-squares/description/', 'algorithm', '数学', 1, 1);
INSERT INTO `problems` VALUES (14, '2021-01-17 13:00:09.629', '2021-01-17 13:00:09.629', NULL, '打家劫舍III', '小偷又发现一个新的可行窃的地点。 这个地区只有一个入口，称为“根”。 除了根部之外，每栋房子有且只有一个父房子。 一番侦察之后，聪明的小偷意识到“这个地方的所有房屋形成了一棵二叉树”。 如果两个直接相连的房子在同一天晚上被打劫，房屋将自动报警。\n\n在不触动警报的情况下，计算小偷一晚能盗取的最高金额。\n\n示例 1:\n\n```\n     3\n    / \\\n   2   3\n    \\   \\ \n     3   1\n```\n\n能盗取的最高金额 = 3 + 3 + 1 = 7.\n\n示例 2:\n\n```\n     3\n    / \\\n   4   5\n  / \\   \\ \n 1   3   1\n```\n\n能盗取的最高金额 = 4 + 5 = 9.\n\n', '假设func(root)为问题的解，即能从以root为根节点的树中盗窃到的最大金额。那么以root房子开始分析，可以选择偷窃root房子，也可以选择不偷窃\n\n* 如果偷窃root房子，那么func(root) = root->val + func(root->left->left) + func(root->left->right) + func(root->right->left) + func(root->right->right)\n* 如果不偷窃root房子，那么func(root) = func(root->left) + func(root->right)\n\n最终结果就是上面2这的较大者\n\n```c++\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int rob(TreeNode* root) {\n        if(!root)   return 0;\n        \n        pair<int,int> res = robCore(root);\n        return res.first;\n    }\nprivate:\n    pair<int,int> robCore(TreeNode* root){\n        if(!root)   return pair<int,int>(0,0);\n        \n        //first：可能偷窃子树的根节点；second：不偷窃子树的根节点\n        pair<int,int> left = robCore(root->left);\n        pair<int,int> right = robCore(root->right);\n        \n        int include = root->val + left.second + right.second;   //偷窃当前节点\n        int exclude = left.first + right.first;                 //不偷窃当前节点\n        \n        return pair<int,int>(max(include,exclude),exclude);\n    }\n};\n```\n', 'https://leetcode.com/problems/house-robber-iii/description/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (15, '2021-01-17 13:00:09.630', '2021-01-17 13:00:09.630', NULL, '所有单词相连的子串', '给定一个字符串 s 和一些长度相同的单词 words。在 s 中找出可以恰好串联 words 中所有单词的子串的起始位置。\n\n注意子串要与 words 中的单词完全匹配，中间不能有其他字符，但不需要考虑 words 中单词串联的顺序。\n\n示例 1:\n\n```\n输入:\n  s = \"barfoothefoobarman\",\n  words = [\"foo\",\"bar\"]\n输出: [0,9]\n解释: 从索引 0 和 9 开始的子串分别是 \"barfoor\" 和 \"foobar\" 。\n输出的顺序不重要, [9,0] 也是有效答案。\n```\n\n示例 2:\n\n```\n输入:\n  s = \"wordgoodstudentgoodword\",\n  words = [\"word\",\"student\"]\n输出: []\n```\n\n', '使用map存储每个单词以及单词的次数，使用一个变量`count`表示单词的总数，遍历字符串，判断以每个字符开始的子串是否是满足要求的子串\n\nwords中的单词长度相同，设为len。因此要判断是否满足要求，即判断相连的count个长度为len的子串是否都在map中。由于子串出现的次数必须和map中单词的次数相等，因此查找时每找到一个单词，map中单词的计数减1\n\n```c++\nclass Solution {\npublic:\n    vector<int> findSubstring(string s, vector<string>& words) {\n        if(s == \"\" || words.empty()) return vector<int>();\n        \n        unordered_map<string,int> dict;\n        for(string s : words)   dict[s]++;\n    \n        int len = words[0].length(),totalLen = words.size() * len;\n        int end = s.length() - totalLen;\n        vector<int> res;\n        for(int i = 0;i <= end;i++){\n            int count = words.size(),j = i;\n            unordered_map<string,int> tmpDict = dict;\n            while(count--){\n                if(tmpDict[s.substr(j,len)]-- <= 0)\n                    break;\n                j += len;\n            }\n            if(j - i == totalLen)    res.push_back(i);\n        }\n        \n        return res;\n    }\n};\n```\n', 'https://leetcode.com/problems/substring-with-concatenation-of-all-words/description/', 'algorithm', '字符串', 1, 1);
INSERT INTO `problems` VALUES (16, '2021-01-17 13:00:09.631', '2021-01-17 13:00:09.631', NULL, '1~n中所有k个数的组合', '给定两个整数 n 和 k，返回 1 ... n 中所有可能的 k 个数的组合。\n\n示例:\n\n```\n输入: n = 4, k = 2\n输出:\n[\n  [2,4],\n  [3,4],\n  [2,3],\n  [1,2],\n  [1,3],\n  [1,4],\n]\n```\n\n', '从1开始dfs，假设还需选择`m`个数，每个数可以选或者不选：\n\n* 如果不选，那么从剩余的数中选择`m`个数\n* 如果选，那么从剩余的数中选择`m-1`个数\n\n如果已经选择了k个数（m等于0），那么将这组数添加到结果中\n\n```c++\nclass Solution {\npublic:\n    vector<vector<int>> combine(int n, int k) {\n        if(k <= 0 || n < k)     return vector<vector<int>>();\n        \n        vector<vector<int>> res;\n        vector<int> path;\n        dfs(n,1,k,path,res);\n        \n        return res;\n    }\nprivate:\n    void dfs(int n,int num,int k,vector<int> &path,vector<vector<int>> &res){\n        if(k == 0){\n            res.push_back(path);\n            return;\n        }\n        \n        //剩余可选的数不够k个\n        if(k > n - num + 1)     return;\n        \n        path.push_back(num);\n        dfs(n,num + 1,k - 1,path,res);\n        path.pop_back();\n        dfs(n,num + 1,k,path,res);\n    }\n};\n```\n', 'https://leetcode.com/problems/combinations/description/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (17, '2021-01-17 13:00:09.632', '2021-01-17 13:00:09.632', NULL, '求x的平方根', '实现 int sqrt(int x) 函数。\n\n计算并返回 x 的平方根，其中 x 是非负整数。\n\n由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。\n\n示例 1:\n\n```\n输入: 4\n输出: 2\n```\n\n示例 2:\n\n```\n输入: 8\n输出: 2\n说明: 8 的平方根是 2.82842..., \n     由于返回类型是整数，小数部分将被舍去。\n```\n\n', '在INT范围内进行二分查找\n\n需要特别注意的是，如果使用res * res 与 x进行比较，那么res * res可能会溢出\n\n```c++\nclass Solution {\npublic:\n    int mySqrt(int x) {\n        if(x < 0 || x == 0)   return 0;\n        \n        int l = 1,r = INT_MAX;\n        while(true){\n            int mid = l + ((r - l) >> 1);\n            if(mid > x / mid)  //mid * mid > x，继续往左边找\n                r = mid - 1;\n            else{ //mid * mid <= x\n                if(mid + 1 > x / (mid + 1)) \n                    return mid;\n                l = mid + 1;\n            }\n        }\n    }\n};\n```\n', '', 'algorithm', '数学', 1, 1);
INSERT INTO `problems` VALUES (18, '2021-01-17 13:00:09.632', '2021-01-17 13:00:09.632', NULL, '判断字符串是否表示一个数值', 'OJ链接：[牛客网](https://www.nowcoder.com/practice/6f8c901d091949a5837e24bb82a731f2?tpId=13&tqId=11206&tPage=3&rp=3&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking)、[Leetcode](https://leetcode.com/problems/valid-number/description/)\n\n请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。例如，字符串`\"+100\"`,`\"5e2\"`,`\"-123\"`,`\"3.1416\"`和`\"-1E-16\"`都表示数值。 但是`\"12e\"`,`\"1a3.14\"`,`\"1.2.3\"`,`\"+-5\"`和`\"12e+4.3\"`都不是\n\n', '设字符串被`\'e\'`或`\'E\'`分个为`part1`和`part2`两部分；\n\n```\n(part1 , \'e\' | \'E\' , part2)\n```\n\n因此，**1）如果出现`\'e\'`或`\'E\'`，那么`part1`和`part2`必须包含数字**。这意味着下列情况不能表示为数值：\n\n```\n\"e12\"\n\"+e10\"\n\"12e\"\n```\n\n所以需要一个bool变量`num1`表示`part1`中是否存在数字，`num2`表示`part2`中是否存在数字\n\n**2）`\'e\'`或`\'E\'`能且仅能出现1次，并且只有`num1`为真后才能出现**\n\n**3）`\'.\'`只能出现在`part1`中，并且只能出现1次**\n\n**4）`\'+\'`和`\'-\'`只能出现在`part1`或`part2`的开始**\n\n**5）`\'空格\'`只能出现在`part1`之前、`part2`之后，所以使用指针`start`指向`part1`的第一个字符，指针`end`指向`part2`的最后一个字符，然后只处理`start`到`end`的字符**\n\n```c++\nclass Solution {\npublic:\n    bool isNumber(string s) {\n        int start = 0,end = s.length() - 1;\n        while(start < s.length() && s[start] == \' \')    ++start;\n        while(end >= 0 && s[end] == \' \')                --end;\n        \n        bool point = false,e = false,num1 = false,num2 = false;\n        for(int i = start;i <= end;i++){\n            switch(s[i]){\n                case \'.\' :\n                    if(point || e)  return false;\n                    point = true;\n                    break;\n                case \'+\' :\n                case \'-\' :\n                    if(i != start && s[i - 1] != \'e\' && s[i - 1] != \'E\')    return false;\n                    break;\n                case \'e\' :\n                case \'E\' :\n                    if(!num1 || e)   return false;\n                    e = true;\n                    break;\n                default :\n                    if(s[i] < \'0\' || s[i] > \'9\')    return false;\n                    if(!e)   num1 = true;\n                    else     num2 = true;\n                    break;\n            }\n        }\n        return (num1 && !e) || (num1 && e && num2);\n    }\n};\n```\n', '', 'algorithm', '字符串', 1, 1);
INSERT INTO `problems` VALUES (19, '2021-01-17 13:00:09.633', '2021-01-17 13:00:09.633', NULL, '重建二叉树', 'OJ链接：[牛客](https://www.nowcoder.com/practice/8a19cbe657394eeaac2f6ea9b0f6fcf6?tpId=13&tqId=11157&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking)、[Leetcode](https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/description/)\n\n输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回\n\n', '前序遍历序列的第一个节点是根节点，可以根据根节点将中序遍历序列划分成左子树区间和右子树区间。根据左子树和右子树节点的个数，又可以将前序遍历序列划分成左子树区间和右子树区间。因此得到了左子树的前序遍历序列和中序遍历序列、右子树的前序遍历序列和中序遍历序列。递归构造左右子树\n\n```c++\n/**\n * Definition for binary tree\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* reConstructBinaryTree(vector<int> pre,vector<int> vin) {\n        if(pre.empty() || vin.empty() || (pre.size() != vin.size())){\n            return nullptr;\n        }\n        \n        int sz1 = pre.size();\n        int sz2 = vin.size();\n        \n        return reConstructBinaryTreeCore(pre,vin,0,sz1-1,0,sz2-1);\n    }\n    \n    TreeNode* reConstructBinaryTreeCore(const vector<int> &pre,const vector<int> &vin\n                                   ,int preL,int preR,int vinL,int vinR)\n    {\n        if(preL > preR)\n            return nullptr;\n        \n        TreeNode *root = new TreeNode(pre.at(preL));\n        \n        int i = vinL;\n        for (;i <= vinR;i++)\n            if(vin.at(i) == pre.at(preL))\n                break;\n        \n        int leftsz = i - vinL;\n        int rightsz = vinR - i;\n        \n        root->left = reConstructBinaryTreeCore(pre,vin,preL+1,preL+leftsz,vinL,i-1);\n        root->right = reConstructBinaryTreeCore(pre,vin,preL+leftsz+1,preR,i+1,vinR);\n        \n        return root;\n    }\n};\n```\n', '', 'algorithm', '树', 1, 1);
INSERT INTO `problems` VALUES (20, '2021-01-17 13:00:09.634', '2021-01-17 13:00:09.634', NULL, '按层分行输出二叉树', '从上到下按层打印二叉树，同一层结点从左至右输出。每一层输出一行\n\n', '使用队列进行BFS。除此之外，为了实现分行打印，使用2个变量：一个表示当前层中还没打印的节点数，另一个变量表示下一层节点的数目。当前层还未打印的节点数为0时，打印换行符，然后将下一层节点的数目赋值给当前层还未打印的节点数，然后将下一层节点的数目设置为0，开始打印下一层。一直到队列为空\n\n```c++\n/*\nstruct TreeNode {\n    int val;\n    struct TreeNode *left;\n    struct TreeNode *right;\n    TreeNode(int x) :\n            val(x), left(NULL), right(NULL) {\n    }\n};\n*/\nclass Solution {\npublic:\n        vector<vector<int> > Print(TreeNode* pRoot) {\n            vector<vector<int> > res;\n            if(!pRoot)\n                return res;\n            \n            deque<TreeNode*> dq;\n            dq.push_back(pRoot);\n            \n            vector<int> linevec;\n            int currleft = 1,nextlinecount = 0;\n            TreeNode* curr;\n            while(currleft != 0){\n                curr = dq.front();\n                dq.pop_front();\n                currleft--;\n                linevec.push_back(curr->val);\n                \n                if(curr->left){\n                    dq.push_back(curr->left);\n                    nextlinecount++;\n                }\n                if(curr->right){\n                    dq.push_back(curr->right);\n                    nextlinecount++;\n                }\n                \n                if(currleft == 0){\n                    res.push_back(linevec);\n                    linevec.clear();\n                    currleft = nextlinecount;\n                    nextlinecount = 0;\n                }\n            }\n            return res;\n        }\n};\n```\n', 'https://www.nowcoder.com/practice/445c44d982d04483b04a54f298796288?tpId=13&tqId=11213&tPage=3&rp=3&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking', 'algorithm', '树', 1, 1);
INSERT INTO `problems` VALUES (21, '2021-01-17 13:00:09.635', '2021-01-17 13:00:09.635', NULL, '数组中出现次数超过一半的数字', 'OJ链接：[牛客](https://www.nowcoder.com/practice/e8a1b01a2df14cb2b228b30ee6a92163?tpId=13&tqId=11181&tPage=2&rp=2&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking)、Leetcode（[求众数](https://leetcode.com/problems/majority-element/description/)）\n\n数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字\n\n例如输入一个长度为9的数组`{1,2,3,2,2,2,5,4,2}`。由于数字`2`在数组中出现了`5`次，超过数组长度的一半，因此输出`2`\n\n如果不存在则输出`0`\n\n', '1. 基于partition的方法\n2. 该数字出现的次数超过其它数字出现的次数之和（因此，考虑使用2个变量，一个保存数字，一个保存次数。当遍历到下一个数字时，如果下一数字和之前保存的数字相同，则次数加1，如果下一数字和之前保存的数字不同，则次数减1。如果次数为0，则需保存下一个数字，并把次数设为1，最后一次把次数设为1时对应的数字就是结果）​\n\n```c++\nclass Solution {\npublic:\n    int MoreThanHalfNum_Solution(vector<int> numbers) {\n        if(numbers.size() == 0)\n            return 0;\n        \n        int count = 0;\n        int res = numbers[0];\n        for(int e : numbers){\n            if(e == res)\n                count++;\n            else{\n                if(count == 0)\n                    res = e;\n                else\n                    count--;\n            }\n        }\n        \n        count = 0;\n        for(int i = 0;i < numbers.size();i++){\n            if(numbers[i] == res)\n                count++;\n        }\n        if(count * 2 <= numbers.size())\n            return 0;\n        return res;\n    }\n};\n```\n', '', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (22, '2021-01-17 13:00:09.636', '2021-01-17 13:00:09.636', NULL, '求字符的所有组合', '求字符的所有组合（相同字符的不同排列是同一组合），“abc”的组合有\"a\",\"b\",\"c\",\"ab\",\"ac\",\"bc\",\"abc\"\n\n', '* 如果字符串不含重复字符，参考[不含重复元素集合的所有子集](#不含重复元素集合的所有子集)\n* 如果字符串包含相同字符，参考[含重复元素集合的所有子集](#含重复元素集合的所有子集)\n', '', 'algorithm', '字符串', 1, 1);
INSERT INTO `problems` VALUES (23, '2021-01-17 13:00:09.637', '2021-01-17 13:00:09.637', NULL, '子串查找', '实现 [strStr()](https://baike.baidu.com/item/strstr/811469) 函数。\n\n给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回  -1。\n\n示例 1:\n\n```\n输入: haystack = \"hello\", needle = \"ll\"\n输出: 2\n```\n\n示例 2:\n\n```\n输入: haystack = \"aaaaa\", needle = \"bba\"\n输出: -1\n```\n\n说明:\n\n当 `needle` 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。\n\n对于本题而言，当 `needle` 是空字符串时我们应当返回 0 。这与C语言的 [strstr()](https://baike.baidu.com/item/strstr/811469) 以及 Java的 [indexOf()](https://docs.oracle.com/javase/7/docs/api/java/lang/String.html#indexOf(java.lang.String)) 定义相符。\n\n', '#### 1）蛮力法\n\n假设haystack长度为n, needle长度为m，遍历haystack的前n-m个字符，对于每个字符，如果等于needle的首字符则继续比较\n\n**时间复杂度**：O(n\\*m)\n\n```c++\nclass Solution {\npublic:\n    //\n    int strStr(string haystack, string needle) {\n        if(needle.size() == 0)\n            return 0;\n        \n        char c = needle[0];\n        int sz1 = haystack.size(),sz2 = needle.size();\n        for(int i = 0 ;i <= sz1 - sz2;i++){\n            if(haystack[i] == c){\n                int j;\n                for(j = 0;j < sz2;j++){\n                    if(haystack[i+j] != needle[j])\n                        break;\n                }\n                if(j == needle.size())\n                    return i;\n            }\n        }\n        \n        return -1;\n    }\n};\n```\n\n#### 2）KMP算法\n\n[KMP算法——知乎海纳](https://www.zhihu.com/question/21923021)\n\n**PMT(部分匹配表)：PMT中的值是字符串的前缀集合与后缀集合交集中最长串的长度**（注意，这里的前缀和后缀都不包括字符串本身）\n\n那么PMT如何在字符串查找中运用？在字符串查找中，我们**为模版字符串创建PMT表，若模版字符串长度len，就有len个PMT值**。假设有如下例子：\n\n* 主字符串：`\"ababababca\"`\n* 模版字符串：`\"abababca\"`\n\n模版字符串`“abababca”`相应的PMT值如下表：\n\n<div align=\"center\"> <img src=\"https://github.com/arkingc/note/raw/master/pic/leetcode-28-1.png\"/> </div>\n\n* 字符串`\"a\"`不包含前缀和后缀（因为前缀和后缀不包含字符串本身），所以PMT中相应的值为0\n* 字符串`\"ab\"`包含前缀`{\"a\"}`，包含后缀`{\"b\"}`，没有交集，所以PMT中相应的值为0\n* 字符串`\"aba\"`包含前缀`{\"a\",\"ab\"}`，包含后缀`{\"a\",\"ba\"}`交集为`\"a\"`，所以相应的PMT值为1\n* ...\n\n那么当字符串查找过程中在模板字符`j`位置开始不匹配时（如下图（a）），这意味着主字符串从 `i−j` 到 `i` 这一段是与模板字符串的 `0` 到 `j` 这一段是完全相同的（即字符串`\"ababab\"`）。通过查找PMT表我们知道，字符串`\"ababab\"`前缀集合与后缀集合交集中最长串(`\"abab\"`)的长度为4，这说明了主字符串中 `i` 指针之前的 `PMT[j − 1]（此处值为4）` 位就一定与模板字符串的第 `0` 位至第 `PMT[j − 1]（此处值为4）` 位是相同的。**这样一来，就可以将这些字符段的比较省略掉。具体的做法是，保持`i`指针不动，然后将`j`指针指向模式字符串的`PMT[j − 1]`位即可**（**这也是KMP的核心：通过使用PMT省略不必要字符段的比较**），从而进入图（b）的状态：\n\n<div align=\"center\"> <img src=\"https://github.com/arkingc/note/raw/master/pic/leetcode-28-3.png\"/> </div>\n\n如果是在 `j` 位失配，那么影响 `j` 指针回溯的位置的其实是第 `j − 1` 位的 PMT 值，所以为了编程的方便，我们不直接使用PMT数组，而是将PMT数组向后偏移一位。我们把新得到的这个数组称为next数组：\n\n<div align=\"center\"> <img src=\"https://github.com/arkingc/note/raw/master/pic/leetcode-28-4.png\"/> </div>\n\n以下为KMP算法：\n\n```c\nint KMP(char *t, char *p) \n{\n    int i = 0; \n    int j = 0;\n\n    while (i < strlen(t) && j < strlen(p))\n    {\n        if (j == -1 || t[i] == p[j]) \n        {\n            i++;\n            j++;\n        }\n        else \n            j = next[j];\n    }\n\n    if (j == strlen(p))\n       return i - j;\n    else \n       return -1;\n}\n```\n\n最后是如何求next数组？求next数组的过程完全可以看成字符串匹配的过程，即以模式字符串为主字符串，以模式字符串的前缀为目标字符串，一旦字符串匹配成功，那么当前的next值就是匹配成功的字符串的长度\n\n具体来说，就是从模式字符串的第一位(注意，不包括第0位)开始对自身进行匹配运算。 在任一位置，能匹配的最长长度就是当前位置的next值。如下图所示：\n\n<div align=\"center\"> <img src=\"https://github.com/arkingc/note/raw/master/pic/leetcode-28-5.png\"/> </div>\n\n求next数组值的代码如下：\n\n```c\nvoid getNext(char *p, int *next)\n{\n    next[0] = -1;\n    int i = 0, j = -1;\n\n    while (i < strlen(p) - 1)\n    {\n        if (j == -1 || p[i] == p[j])\n        {\n            ++i;\n            ++j;\n            next[i] = j;\n        }   \n        else\n            j = next[j];\n    }\n}\n```\n\n该题使用KMP的解法：\n\n```c++\nclass Solution {\npublic:\n    int strStr(string haystack, string needle) {\n        int len1 = haystack.length(),len2 = needle.length();\n\n        /*以下计算next数组的值*/\n        vector<int> next(len2,-1);\n        int i = 0,j = -1;\n        while(i < len2 - 1){\n            if(j == -1 || needle[i] == needle[j]){\n                i++,j++;\n                next[i] = j;\n            }\n            else\n                j = next[j];\n        }\n        \n        /*以下进行字符串查找*/\n        i = 0,j = 0;\n        while(i < len1 && j < len2){\n            if(j == -1 || haystack[i] == needle[j])\n                i++,j++;\n            else\n                j = next[j];\n        }\n        \n        if(j == len2)   return i - j;\n        else            return -1;\n    }\n};\n```\n', 'https://leetcode.com/problems/implement-strstr/description/', 'algorithm', '字符串', 1, 1);
INSERT INTO `problems` VALUES (24, '2021-01-17 13:00:09.638', '2021-01-17 13:00:09.638', NULL, '二叉树中和为某一值的路径', '输入一颗二叉树和一个整数，打印出二叉树中结点值的和为输入整数的所有路径。路径定义为从树的根结点开始往下一直到叶结点所经过的结点形成一条路径\n\n', '当用前序遍历的方式访问到某一节点时，把该节点添加到路径(vector)上，并累加该节点的值\n\n* 如果节点为叶节点，并且路径中节点值的和刚好等于输入的整数，则当前路径符合要求，打印出来\n* 如果不是叶节点，继续访问子节点\n\n当前节点访问结束后，递归函数将自动回到它的父节点。因此，在函数退出之前要在路径上删除当前节点并减去当前节点的值，以确保返回父节点时路径刚好是从根节点到父节点\n\n```c++\n/*\nstruct TreeNode {\n    int val;\n    struct TreeNode *left;\n    struct TreeNode *right;\n    TreeNode(int x) :\n            val(x), left(NULL), right(NULL) {\n    }\n};*/\nclass Solution {\npublic:\n    vector<vector<int> > FindPath(TreeNode* root,int expectNumber) {\n        vector<vector<int>> pathArr;\n        if(!root)\n            return pathArr;\n        \n        vector<int> path;\n        FindPathCore(root,expectNumber,path,pathArr);\n        return pathArr;\n    }\n    \n    void FindPathCore(TreeNode* nd,int expectNumber,\n                      vector<int> &path,vector<vector<int>> &pathArr){\n        if(!nd)\n            return;\n        \n        path.push_back(nd->val);\n        expectNumber -= nd->val;\n        \n        if(nd->left)\n            FindPathCore(nd->left,expectNumber,path,pathArr);\n        if(nd->left)\n            FindPathCore(nd->right,expectNumber,path,pathArr);\n        \n        if(!nd->left && !nd->right && expectNumber == 0){\n            pathArr.push_back(path);\n        }\n        \n        path.pop_back();\n    }\n};\n```\n', 'https://www.nowcoder.com/practice/b736e784e3e34731af99065031301bca?tpId=13&tqId=11177&tPage=2&rp=2&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking', 'algorithm', '树', 1, 1);
INSERT INTO `problems` VALUES (25, '2021-01-17 13:00:09.639', '2021-01-17 13:00:09.639', NULL, '颠倒二进制位', '颠倒给定的 32 位无符号整数的二进制位。\n\n示例:\n\n```\n输入: 43261596\n输出: 964176192\n解释: 43261596 的二进制表示形式为 00000010100101000001111010011100 ，\n     返回 964176192，其二进制表示形式为 00111001011110000010100101000000 。\n```\n\n进阶:\n\n如果多次调用这个函数，你将如何优化你的算法？\n\n', '结果res初始化为0，假设n的第i比特为1，那么反转后res的第31-i比特为1。因此，如果从右往左处理，n的第i比特为1，因为n还剩31-i比特需要处理，那么设置res最低位为1，每次将res左移1位，最终第31-i比特就是1：\n\n```c++\nclass Solution {\npublic:\n    uint32_t reverseBits(uint32_t n) {\n        int mask = 1;\n        uint32_t res = 0;\n        for(int i = 1;i <= 32;i++){\n            res = (res << 1);\n            if(n & mask)\n                res |= 1;\n            mask = mask << 1;\n        }\n        return res;\n    }\n};\n```\n\nDiscuss里面的一种解答：\n\n```c++\nclass Solution {\npublic:\n    uint32_t reverseBits(uint32_t n) {\n        n = (n >> 16) | (n << 16);\n        n = ((n & 0xff00ff00) >> 8) | ((n & 0x00ff00ff) << 8);\n        n = ((n & 0xf0f0f0f0) >> 4) | ((n & 0x0f0f0f0f) << 4);\n        n = ((n & 0xcccccccc) >> 2) | ((n & 0x33333333) << 2);\n        n = ((n & 0xaaaaaaaa) >> 1) | ((n & 0x55555555) << 1);\n        return n;\n    }\n};\n```\n', 'https://leetcode.com/problems/reverse-bits/description/', 'algorithm', '数学', 1, 1);
INSERT INTO `problems` VALUES (26, '2021-01-17 13:00:09.639', '2021-01-17 13:00:09.639', NULL, '布隆过滤器', '', '布隆过滤器可视为对位图的扩展\n\n如果需要判断一个元素是否在一个集合中，位图的做法是申请一个N位（N为集合中最大整数）的数组，然后每一位对应一个特定整数\n\n布隆过滤器的基本原理是位数组与Hash函数联合使用。具体而言，布隆过滤器是一个包含了m位的位数组，数组的每一位都初始化为0。然后定义k个不同的Hash函数，每个Hash函数都可以将集合中的元素映射到位数组中的某一位\n\n**插入**：当向集合中插入一个元素时，根据k个Hash函数可以得到位数组中的k个位，将这些位全部设置为1\n\n**查询**：当要查询某个元素是否属于集合时，就使用k个哈希函数得到此元素对应的k个位，如果所有点都是1，那么判断为元素在集合内（**注意，这种情况下只能说明元素可能在集合内，并不一定**），如果有0，则元素不在集合内（**因此，其实布隆过滤器的思想是“宁可误杀也不放过”，适用于黑名单网站的查询**）\n\n<div align=\"center\"> <img src=\"https://github.com/arkingc/note/raw/master/pic/al-bloomfilter.png\"/> </div>\n\n插入元素时，对任意一个元素x，第i个哈希函数映射的位置hi(x)会被置为1（1<=i<=k）\n\n> **布隆过滤器的位数m通常要比集合中的最大元素小的多，可见，布隆过滤器是一种空间效率和时间效率很高的随机数据结构，但这种高效是有一定代价**：在判断一个元素是否属于某个集合时，有可能会把不属于这个集合的元素误认为属于这个集合。因此，布隆过滤器不适合那些“零错误”应用场合，而在能容忍低错误率的应用场合下，布隆过滤器通过极少的错误换取了存储空间的极大节省\n', '', 'algorithm', '海量数据', 1, 1);
INSERT INTO `problems` VALUES (27, '2021-01-17 13:00:09.640', '2021-01-17 13:00:09.640', NULL, '字符串相乘', '给定两个以字符串形式表示的非负整数 num1 和 num2，返回 num1 和 num2 的乘积，它们的乘积也表示为字符串形式。\n\n示例 1:\n\n```\n输入: num1 = \"2\", num2 = \"3\"\n输出: \"6\"\n```\n\n示例 2:\n\n```\n输入: num1 = \"123\", num2 = \"456\"\n输出: \"56088\"\n```\n\n说明：\n\n1. `num1` 和 `num2` 的长度小于110。\n2. `num1` 和 `num2` 只包含数字 `0-9`。\n3. `num1` 和 `num2` 均不以零开头，除非是数字 0 本身。\n4. 不能使用任何标准库的大数类型（比如 BigInteger）或直接将输入转换为整数来处理。\n\n', '使用两个指针`i`和`j`分别指向变量`num1`和`num2`，一个数组`sum`保存结果。显然，我们就是要将`num1[i] * num2[j]`和结果数组`sum`中相应的位相加，然后对10取模后保存，再使用一个变量`carray`保存进位信息。关键是`num1[i] * num2[j]`应该和数组`sum`中哪一位相加\n\n* 首先，`num1`和`num2`相乘结果的位数，不可能超过`num1`和`num2`位数的和。因为当`num1`和`num2`每一位都为`9`时，相乘的结果最大，此时结果的位数等于两个数的位数之和\n* 然后，`num1[i] * num2[j]`最多只有`2`位。这个`2`位或`1`位数应该与数组`sum`的某一位相加。假设`num1`中`i`后面有`m`位，`num2`中`j`后面有n位，那么就应该与`sum`中倒数第`m + n + 1`位相加。因为`sum`数组的大小为`num1`和`num2`的位数和，因此，应该与`sum[i + j + 1]`相加\n\n<div align=\"center\"> <img src=\"https://github.com/arkingc/note/raw/master/pic/leetcode-43-1.png\"/> </div>\n\n> 要特别注意`0`和`\'0\'`的区别\n\n时间复杂度：O(n \\* m)（n和m分别为字符串num1和num2的长度）\n\n```c++\nclass Solution {\npublic:\n    string multiply(string num1, string num2) {\n        string sum(num1.length() + num2.length(),\'0\');\n        \n        for(int i = num1.length() - 1;i >= 0;i--){\n            int carry = 0; //进位\n            for(int j = num2.length() - 1;j >= 0;j--){\n                int tp = (sum[i + j + 1] - \'0\') + (num1[i] - \'0\') * (num2[j] - \'0\') + carry;\n                sum[i + j + 1] = tp % 10 + \'0\';\n                carry = tp / 10;\n            }\n            sum[i] = carry + \'0\'; //这里第一次处理sum的第i位，所以直接复制就行，不需要累加\n        }\n        \n        for(int i = 0;i < sum.length();i++)\n            if(sum[i] != \'0\')\n                return sum.substr(i);\n        \n        return \"0\";\n    }\n};\n```\n', '', 'algorithm', '数学', 1, 1);
INSERT INTO `problems` VALUES (28, '2021-01-17 13:00:09.641', '2021-01-17 13:00:09.641', NULL, '数组中数值和下标相等的元素', '', '假设一个单调递增的数组里的每个元素都是整数并且是唯一的。请编程实现一个函数找出数组中任意一个数值等于其下标的元素。例如，在数组`{-3, -1, 1, 3, 5}`中，数字3和它的下标相等\n', '', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (29, '2021-01-17 13:00:09.642', '2021-01-17 13:00:09.642', NULL, '左上角到右下角的最短路径', '给定一个包含非负整数的 m x n 网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。\n\n说明：每次只能向下或者向右移动一步。\n\n示例:\n\n```\n输入:\n[\n  [1,3,1],\n  [1,5,1],\n  [4,2,1]\n]\n输出: 7\n解释: 因为路径 1→3→1→1→1 的总和最小。\n```\n\n', '使用`state(i,j)`表示从起点到`(i,j)`的最短路径，那么：\n\n* 当`i`和`j`都为0时，`state(i,j) = state(0,0) = grid[0][0]` \n* 当`i`为0，`j`不为0时，`state(i,j) = state(0,j) = state(0,j - 1) + grid[0][j]`\n* 当`i`不为0，`j`为0时，`state(i,j) = state(i,0) = state(i - 1,0) + grid[i][0]`\n* 当`i`和`j`都不为0时，`state(i,j) = min(state(i - 1,j),state(i,j - 1)) + grid[i][j]`\n\n以下解法进行了状态压缩（使用一维矩阵）：\n\n```c++\nclass Solution {\npublic:\n    int minPathSum(vector<vector<int>>& grid) {\n        if(grid.empty())    return 0;\n        \n        int rows = grid.size(),cols = grid[0].size();\n        vector<int> state(cols);\n        state[0] = grid[0][0];\n        for(int j = 1;j < cols;j++)\n            state[j] = state[j - 1] + grid[0][j];\n        \n        for(int i = 1;i < rows;i++){\n            state[0] += grid[i][0];\n            for(int j = 1;j < cols;j++)\n                state[j] = min(state[j - 1],state[j]) + grid[i][j];\n        }\n        \n        return state[cols - 1];\n    }\n};\n```\n', 'https://leetcode.com/problems/minimum-path-sum/description/', 'algorithm', '图', 1, 1);
INSERT INTO `problems` VALUES (30, '2021-01-17 13:00:09.643', '2021-01-17 13:00:09.643', NULL, '找出文件中频率最高的100个词', '有一个1GB大小的一个文件，里面每一行是一个词，词的大小不超过16字节，内存限制大小是1MB。返回频数最高的100个词\n\n', '采用分治的思想\n\n顺序读文件，对于每个词x，取hash(x)%5000，然后按照该值存到5000个小文件中，记为[x0,x1,...,x4999]。这样每个文件为200KB左右（**如果文件里面全是同一个词？**）。如果其中有的文件超过了1MB，还可以按照类似的方法继续往下分，直到分解得到的小文件的大小都不超过1MB\n\n对每个小文件，统计每个文件中出现的词以及相应的频度（可以采用Trie树或hash_map等），并分别取出出现频度最大的100个词（可以用含100个结点的最小堆），并把这100个词及相应的频率存入文件，这样又得到了5000个有序(逆序)文件（每个文件有100个词）。下一步就是把这5000个文件进行归并排序（可利用败者树采用多路归并）\n', '', 'algorithm', '海量数据', 1, 1);
INSERT INTO `problems` VALUES (31, '2021-01-17 13:00:09.644', '2021-01-17 13:00:09.644', NULL, '合并两个有序链表', '输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则\n\n', '', 'https://www.nowcoder.com/practice/d8b6b4358f774294a89de2a6ac4d9337?tpId=13&tqId=11169&tPage=1&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking', 'algorithm', '链表', 1, 1);
INSERT INTO `problems` VALUES (32, '2021-01-17 13:00:09.645', '2021-01-17 13:00:09.645', NULL, '报数', '报数序列是指一个整数序列，按照其中的整数的顺序进行报数，得到下一个数。其前五项如下：\n\n```\n1.     1\n2.     11\n3.     21\n4.     1211\n5.     111221\n\n1 被读作  \"one 1\"  (\"一个一\") , 即 11\n11 被读作 \"two 1s\" (\"两个一\"）, 即 21\n21 被读作 \"one 2\",  \"one 1\" （\"一个二\" ,  \"一个一\") , 即 1211\n```\n\n给定一个正整数 n ，输出报数序列的第 n 项。\n\n注意：整数顺序将表示为一个字符串。\n\n示例 1:\n\n```\n输入: 1\n输出: \"1\"\n```\n\n示例 2:\n\n```\n输入: 4\n输出: \"1211\"\n```\n\n', '统计每个数字出现的次数，在下一个不同数字出现时，将这个数字的结果添加到结果字符串中，然后统计下一个数字\n\n```c++\nclass Solution {\npublic:\n    string countAndSay(int n) {\n        if(n <= 0)  return \"\";\n        else if(n == 1) return \"1\";\n        \n        string res = \"1\";\n        while(--n){\n            string s = \"\";\n            char c = res[0];\n            int count = 1;\n            for(int i = 1;i < res.length();i++){\n                if(res[i] == c) count++;\n                else{\n                    s += to_string(count) + c;\n                    c = res[i];\n                    count = 1;\n                }\n            }\n            s += to_string(count) + c;\n            res = s;\n        }\n        \n        return res;\n    }\n};\n```\n', 'https://leetcode.com/problems/count-and-say/description/', 'algorithm', '数学', 1, 1);
INSERT INTO `problems` VALUES (33, '2021-01-17 13:00:09.646', '2021-01-17 13:00:09.646', NULL, '字符串的排列', '输入一个字符串,按字典序打印出该字符串中字符的所有排列。例如输入字符串abc,则打印出由字符a,b,c所能排列出来的所有字符串abc,acb,bac,bca,cab和cba\n\n输入描述：\n\n输入一个字符串,长度不超过9(可能有字符重复),字符只包括大小写字母\n\n', '* 把第一个字符和后面所有的字符交换，然后固定第一个字符，求后面字符的全排列\n* 交换时，使用一个哈希表，统计这个字符以前是否处理过，处理过则直接跳过\n\n```c++\nclass Solution {\npublic:\n    vector<string> Permutation(string str) {\n        vector<string> res;\n        if(str.size() == 0)\n            return res;\n        \n        Permutation(str,0,res);\n        //为了按字典序输出，需要排序\n        sort(res.begin(),res.end());\n        return res;\n    }\n    \n    void Permutation(string &s,int idx,vector<string> &res){\n        int sz = s.size();\n        if(idx == (sz - 1)){\n            res.push_back(s);\n            return;\n        }\n        \n        set<char> swaped;//为了处理相同的字符\n        for(int i = idx;i < sz;i++){\n            char c = s[i];\n            //说明遇到了相同的字符\n            if(swaped.find(c) != swaped.end()){\n                continue;\n            }\n            swaped.insert(c);\n            s[i] = s[idx];\n            s[idx] = c;\n            \n            Permutation(s,idx+1,res);\n            \n            s[idx] = s[i];\n            s[i] = c;\n        }\n    }\n};\n```\n', 'https://www.nowcoder.com/practice/fe6b651b66ae47d7acce78ffdd9a96c7?tpId=13&tqId=11180&tPage=2&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking', 'algorithm', '字符串', 1, 1);
INSERT INTO `problems` VALUES (34, '2021-01-17 13:00:09.646', '2021-01-17 13:00:09.646', NULL, '多个字符串的最长公共前缀', '编写一个函数来查找字符串数组中的最长公共前缀。\n\n如果不存在公共前缀，返回空字符串 \"\"。\n\n示例 1:\n\n```\n输入: [\"flower\",\"flow\",\"flight\"]\n输出: \"fl\"\n```\n\n示例 2:\n\n```\n输入: [\"dog\",\"racecar\",\"car\"]\n输出: \"\"\n解释: 输入不存在公共前缀。\n```\n\n说明:\n\n所有输入只包含小写字母 a-z 。\n\n', '#### 1）垂直扫描\n\n首先判断所有字符串第一个字符是否相等，然后判断第二个，第三个...\n\n```c++\nclass Solution {\npublic:\n    string longestCommonPrefix(vector<string>& strs) {\n        if(strs.size() == 0)    return \"\";\n        if(strs.size() == 1)    return strs[0];\n        \n        string res = \"\";\n        int i = 0;\n        while(i < strs[0].length()){\n            char c = strs[0][i];\n            int j = 1;\n            for(;j < strs.size() && i < strs[j].length();j++)\n                if(strs[j][i] != c)\n                    break;\n            if(j < strs.size()) return res;\n            else{\n                res += c;\n                i++;\n            }\n        }\n        return res;\n    }\n};\n```\n\n#### 2）分治\n\n将字符串分为2组，求出第一组的前缀和第二组的前缀，然后求两个前缀字符串的公共前缀：\n\n<div align=\"center\"> <img src=\"https://github.com/arkingc/note/raw/master/pic/leetcode-14-1.png\"/> </div>\n\n```c++\nclass Solution {\npublic:\n    string longestCommonPrefix(vector<string>& strs) {\n        if(strs.size() == 0)    return \"\";\n        if(strs.size() == 1)    return strs[0];\n        \n        return longestCommonPrefix(strs,0,strs.size() - 1);\n    }\nprivate:\n    string longestCommonPrefix(vector<string>& strs,int l,int r){\n        if(l > r)   return \"\";\n        if(l == r)  return strs[l];\n        \n        int mid = (l + r) >> 1;\n        string s1 = longestCommonPrefix(strs,l,mid);\n        string s2 = longestCommonPrefix(strs,mid + 1,r);\n        return longestCommonPrefix(s1,s2);\n    }\n    \n    string longestCommonPrefix(const string &s1,const string &s2){\n        string res = \"\";\n        int minLen = min(s1.length(),s2.length());\n        for(int i = 0;i < minLen;i++){\n            if(s1[i] != s2[i])  break;\n            else   res += s1[i];\n        }\n        return res;\n    }\n};\n```\n\n#### 3）二分查找\n\n以第一个字符串为模板，首先判断其前半部分是否是其余n-1个字符串的前缀；\n\n* 如果是，则添加后半部分字符串的前半部分，使得前缀更长，继续判断是否是其余n-1个字符串的前缀\n* 如果不是，则判断前半部分字符串的前半部分是否是其余n-1个字符串的前缀...\n\n<div align=\"center\"> <img src=\"https://github.com/arkingc/note/raw/master/pic/leetcode-14-2.png\"/> </div>\n\n```c++\nclass Solution {\npublic:\n    string longestCommonPrefix(vector<string>& strs) {\n        if(strs.size() == 0)    return \"\";\n        if(strs.size() == 1)    return strs[0];\n        \n        int l = 0,r = strs[0].length() - 1;\n        string res = \"\";\n        while(l <= r){\n            int mid = (l + r) / 2;\n            string prefix = strs[0].substr(0,mid + 1);\n            if(longestCommonPrefix(strs,prefix)){\n                l = mid + 1;\n                res = prefix;\n            }\n            else\n                r = mid - 1;\n        }\n        return res;\n    }\nprivate:\n    bool longestCommonPrefix(vector<string>& strs,const string &s){\n        int len = s.length();\n        int i = 1;\n        for(;i < strs.size() && strs[i].length() >= len;i++)\n            for(int j = 0;j < len;j++)\n                if(strs[i][j] != s[j])\n                    return false;\n        if(i < strs.size()) return false;\n        return true;\n    }\n};\n```\n', 'https://leetcode.com/problems/longest-common-prefix/description/', 'algorithm', '字符串', 1, 1);
INSERT INTO `problems` VALUES (35, '2021-01-17 13:00:09.647', '2021-01-17 13:00:09.647', NULL, '滑动窗口的最大值', '给定一个数组和滑动窗口的大小，找出所有滑动窗口里数值的最大值\n\n例如，如果输入数组{2,3,4,2,6,2,5,1}及滑动窗口的大小3，那么一共存在6个滑动窗口，他们的最大值分别为{4,4,6,6,6,5}； 针对数组{2,3,4,2,6,2,5,1}的滑动窗口有以下6个： {[2,3,4],2,6,2,5,1}， {2,[3,4,2],6,2,5,1}， {2,3,[4,2,6],2,5,1}， {2,3,4,[2,6,2],5,1}， {2,3,4,2,[6,2,5],1}， {2,3,4,2,6,[2,5,1]}\n\n', '使用一个两端队列，队列头部始终保存当前滑动窗口最大值\n\n对于数组中任意元素，从尾部向前比较，如果该元素大于尾部元素，则从队列尾部删除，一直删除完所有比新元素小的元素，然后从尾部插入新元素(的下标)\n\n由于新元素不一定比首元素大，如果首元素刚好从滑动窗口移除时，也要删除首元素，所以在完成上述操作后，也要判断首元素是否已经脱离滑动窗口\n\n因为要判断队首元素是否脱离滑动窗口，所以队列存的是元素的下标，同时要从首部删除，所以使用双端队列\n\n```c++\nclass Solution {\npublic:\n    vector<int> maxInWindows(const vector<int>& num, unsigned int size)\n    {\n        vector<int> res;\n        if(size > num.size())\n            return res;\n        \n        deque<int> dq;\n        int sz = num.size();\n        for(int i = 0;i < sz;i++){\n            while(dq.size() > 0 && num[dq.back()] < num[i])\n                dq.pop_back();\n            dq.push_back(i);\n            if(i - dq.front() + 1 > size)\n                dq.pop_front();\n            if(i >= size - 1)\n                res.push_back(num[dq.front()]);\n        }\n        \n        return res;\n    }\n};\n```\n', 'https://www.nowcoder.com/practice/1624bc35a45c42c0bc17d17fa0cba788?tpId=13&tqId=11217&tPage=4&rp=3&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking', 'algorithm', '栈和队列', 1, 1);
INSERT INTO `problems` VALUES (36, '2021-01-17 13:00:09.648', '2021-01-17 13:00:09.648', NULL, '扑克牌中的顺子', 'LL今天心情特别好,因为他去买了一副扑克牌,发现里面居然有2个大王,2个小王(一副牌原本是54张)\n\n他随机从中抽出了5张牌,想测测自己的手气,看看能不能抽到顺子,如果抽到的话,他决定去买体育彩票,嘿嘿！！“红心A,黑桃3,小王,大王,方片5”,“Oh My God!”不是顺子.....LL不高兴了,他想了想,决定大小 王可以看成任何数字,并且A看作1,J为11,Q为12,K为13。上面的5张牌就可以变成“1,2,3,4,5”(大小王分别看作2和4),“So Lucky!”。LL决定去买体育彩票啦\n\n现在,要求你使用这幅牌模拟上面的过程,然后告诉我们LL的运气如何。为了方便起见,你可以认为大小王是0\n\n', '首先把数组排序，然后统计数组中0的个数，最后统计排序之后的数组中相邻数字之间的空缺总数，如果空缺的总数小于或等于0的个数，那么这个数组就是连续的\n\n还需注意，除0以外，不能包含相同数字，否则不是顺序\n\n> 这里排序的元素个数很小，所以使用什么排序算法不是特别重要\n\n```c++\nclass Solution {\npublic:\n    bool IsContinuous( vector<int> numbers ) {\n        if(numbers.size() == 0)\n            return false;\n        \n        sort(numbers.begin(),numbers.end());\n        \n        int numOfZero = 0;\n        for(int e : numbers){\n            if(e == 0)\n                numOfZero++;\n            else if(e < 0 || e > 13)\n                return false;\n        }\n        if(numOfZero > 4)\n            return false;\n        \n        int bgidx = numOfZero;\n        for(int i = bgidx + 1;i < numbers.size();i++){\n            if(numbers[i] - numbers[i - 1] == 0)\n                return false;\n            else if(numbers[i] - numbers[i - 1] > 1){\n                if(numOfZero >= (numbers[i] - numbers[i - 1] -1))\n                    numOfZero -= numbers[i] - numbers[i - 1] - 1;\n                else\n                    return false;\n            }\n        }\n        \n        return true;\n    }\n};\n```\n', 'https://www.nowcoder.com/practice/762836f4d43d43ca9deb273b3de8e1f4?tpId=13&tqId=11198&tPage=3&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (37, '2021-01-17 13:00:09.648', '2021-01-17 13:00:09.648', NULL, '只出现1次的数字', '给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。\n\n说明：\n\n你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？\n\n示例 1:\n\n```\n输入: [2,2,1]\n输出: 1\n```\n\n示例 2:\n\n```\n输入: [4,1,2,1,2]\n输出: 4\n```\n\n', '一个数和自身异或为0。0和任何数异或都得那个数。因此将所有数异或，出现2次的都为0，最终剩下只出现1次的数\n\n```c++\nclass Solution {\npublic:\n    int singleNumber(vector<int>& nums) {\n        int res = 0;\n        for(int i = 0;i < nums.size();i++){\n            res ^= nums[i];\n        }\n        return res;\n    }\n};\n```\n', 'https://leetcode.com/problems/single-number/description/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (38, '2021-01-17 13:00:09.649', '2021-01-17 13:00:09.649', NULL, '删除链表中的节点', '请编写一个函数，使其可以删除某个链表中给定的（**非末尾**）节点，你将只被给定要求被删除的节点。\n\n现有一个链表 -- head = [4,5,1,9]，它可以表示为:\n\n    4 -> 5 -> 1 -> 9\n\n示例 1:\n\n```\n输入: head = [4,5,1,9], node = 5\n输出: [4,1,9]\n解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -> 1 -> 9.\n```\n\n示例 2:\n\n```\n输入: head = [4,5,1,9], node = 1\n输出: [4,5,9]\n解释: 给定你链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -> 5 -> 9.\n```\n\n说明:\n\n* 链表至少包含两个节点。\n* 链表中所有节点的值都是唯一的。\n* 给定的节点为非末尾节点并且一定是链表中的一个有效节点。\n* 不要从你的函数中返回任何结果。\n\n', '> 如果传入尾节点，因为传入的参数为指针（而非指针的指针），所以没有办法实现删除\n\n将下一个节点的值复制过来，然后删除下一个节点：\n\n```c++\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    void deleteNode(ListNode* node) {\n        ListNode *tp = node->next;\n        node->val = tp->val;\n        node->next = tp->next;\n        delete tp;\n    }\n};\n```\n', 'https://leetcode.com/problems/delete-node-in-a-linked-list/description/', 'algorithm', '链表', 1, 1);
INSERT INTO `problems` VALUES (39, '2021-01-17 13:00:09.650', '2021-01-17 13:00:09.650', NULL, '单词拆分II', '给定一个非空字符串 s 和一个包含非空单词列表的字典 wordDict，在字符串中增加空格来构建一个句子，使得句子中所有的单词都在词典中。返回所有这些可能的句子。\n\n说明：\n\n* 分隔时可以重复使用字典中的单词。\n* 你可以假设字典中没有重复的单词。\n\n示例 1：\n\n```\n输入:\ns = \"catsanddog\"\nwordDict = [\"cat\", \"cats\", \"and\", \"sand\", \"dog\"]\n输出:\n[\n  \"cats and dog\",\n  \"cat sand dog\"\n]\n```\n\n示例 2：\n\n```\n输入:\ns = \"pineapplepenapple\"\nwordDict = [\"apple\", \"pen\", \"applepen\", \"pine\", \"pineapple\"]\n输出:\n[\n  \"pine apple pen apple\",\n  \"pineapple pen apple\",\n  \"pine applepen apple\"\n]\n解释: 注意你可以重复使用字典中的单词。\n```\n\n示例 3：\n\n```\n输入:\ns = \"catsandog\"\nwordDict = [\"cats\", \"dog\", \"sand\", \"and\", \"cat\"]\n输出:\n[]\n```\n\n', '对于字符串`s`，设其所有可能的句子为`f(s)`，字典为`dict`\n\n* 如果`left = s`包含在`dict`中，设`right = s.substr(len)`，如果`f(right)`能够由`dict`构建为句子，那么`f(s) += append(s,f(right))`（`append`表示在`f(right)`的所有结果前加上`s + \' \'`）\n* 如果`left = s.substr(0,len - 1)`包含在`dict`中，设`right = s.substr(len - 1)`，如果`f(right)`能够由`dict`构建为句子，那么`f(s) += append(s,f(right))`\n* 如果`left = s.substr(0,len - 2)`包含在`dict`中，设`right = s.substr(len - 2)`，如果`f(right)`能够由`dict`构建为句子，那么`f(s) += append(s,f(right))`\n* ...\n\n从上面可以看出，每个问题`f`可以转化成一个规模更小的子问题。但是在求子问题时可能会重复计算，因此，如果以前求过`f(right)`，那么当需要再次求`f(right)`时，为了避免重复计算，希望快速得到结果，因此使用`mem`记录每个已经求得的子问题的值，那么有2种方案：\n\n1. **迭代(自下往上)**：首先求出最小的子问题，然后逐渐增大，直到求出`f(s)`。这种方案会保存每一个子问题的解，即使这个子问题的解可能并不会用到，因此可能消耗大量内存\n2. **递归(自上往下)**：最先求得的还是最小的子问题，但是是从上往下进行递归调用。和迭代不同的是，只有`left`在`dict`中存在时，我们才会递归求`f(right)`，因此可以避免保存一些不必要的子问题的解，节约内存\n\n比如下列例子：\n\n```\n//以下分别为s和dict\n\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n[\"a\",\"aa\",\"aaa\",\"aaaa\",\"aaaaa\",\"aaaaaa\",\"aaaaaaa\",\"aaaaaaaa\",\"aaaaaaaaa\",\"aaaaaaaaaa\"]\n```\n\n* 如果使用**迭代**，那么从`s`最右边开始，会分别求出`\"a\"`、`\"aa\"`、`\"aaa\"`、`\"aaaa\"`，,...的解，然后保存\n* 如果使用**递归**\n    - 因为`left = s.substr(0,len - 1)`不在`dict`中，所以不会进一步求`\"s\"`的解\n    - 因为`left = s.substr(0,len - 2)`不在`dict`中，所以不会进一步求`\"ss\"`的解\n    - 因为`left = s.substr(0,len - 3)`不在`dict`中，所以不会进一步求`\"sss\"`的解\n    - ...\n    - 因为`left = s.substr(0,10)`在`dict`中，所以进一步求`right = s.substr(10)`的解\n        + 最终会递归到求`right = \"baaaa....\"`的解，由于任意`right.substr(0,k)`都不再`dict`中，所以返回一个空结果，即`baaa....`不能由`dict`构成句子，那么最终结果也就是`s`也不能由`dict`构成句子\n\n从上面结果可以看出，如果使用**迭代**，可能会保存很多不必要的子问题的解，而使用**递归**，因为只在必要时会求解子问题，所以保存的子问题的解一定是必要的。因此可以节约内存\n\n> 下面的代码`mem`使用的是map而不是vector，因此vector不方便判断一个子问题是还未进行求解还是已经求过解但是解为空，当然vector也可以实现，但是需要一个额外的数组来标记一个子问题是否已经进行过计算。可读性可能没那么好\n\n#### 1）迭代（Memory Limit Exceeded）\n\n```c++\nclass Solution {\npublic:\n    vector<string> wordBreak(string s, vector<string>& wordDict) {\n        if(s.length() == 0)   return vector<string>();\n        \n        unordered_set<string> dict(wordDict.begin(),wordDict.end());\n        \n        int len = s.length();\n        unordered_map<int,vector<string>> mem;\n        if(dict.find(s.substr(len - 1)) != dict.end()) \n            mem[len - 1].push_back(s.substr(len - 1));\n        \n        for(int l = len - 2;l >= 0;l--){\n            string substr = s.substr(l);\n            if(dict.find(substr) != dict.end()) mem[l].push_back(substr);\n            for(int r = len - 2;r >= l;r--){\n                const string &left = s.substr(l,r - l + 1);\n                if(dict.find(left) != dict.end()){\n                    if(mem.find(r + 1) != mem.end())\n                        for(const string &right : mem[r + 1])\n                            mem[l].push_back(left + \" \" + right);\n                }\n            }\n        }\n        \n        return mem[0];\n    }\n};\n```\n\n#### 2）递归\n\n```c++\nclass Solution {\npublic:\n    vector<string> wordBreak(string s, vector<string>& wordDict) {\n        unordered_set<string> dict(wordDict.begin(),wordDict.end());\n        unordered_map<int,vector<string>> mem(s.length());\n        wordBreak(s,0,dict,mem);\n        return mem[0];\n    }\nprivate:\n    void wordBreak(const string &s,int l,unordered_set<string> dict,\n                                    unordered_map<int,vector<string>> &mem){\n        if(mem.find(l) != mem.end()) return;\n        \n        vector<string> res;\n        if(dict.find(s.substr(l)) != dict.end())\n            res.push_back(s.substr(l));\n        \n        for(int len = s.length() - l - 1;len >= 1;len--){\n            const string &left = s.substr(l,len);\n            int r = l + len;\n            if(dict.find(left) != dict.end()){\n                wordBreak(s,r,dict,mem);\n                for(const string &right : mem[r])\n                    res.push_back(left + \" \" + right);\n            }\n        }\n        mem[l].insert(mem[l].end(),res.begin(),res.end());\n    }\n};\n```\n', 'https://leetcode.com/problems/word-break-ii/description/', 'algorithm', '字符串', 1, 1);
INSERT INTO `problems` VALUES (40, '2021-01-17 13:00:09.650', '2021-01-24 00:27:36.894', NULL, '岛屿的数量', '给定一个由 \'1\'（陆地）和 \'0\'（水）组成的的二维网格，计算岛屿的数量。一个岛被水包围，并且它是通过水平方向或垂直方向上相邻的陆地连接而成的。你可以假设网格的四个边均被水包围。\n\n示例 1:\n\n```\n输入:\n11110\n11010\n11000\n00000\n\n输出: 1\n```\n\n示例 2:\n\n```\n输入:\n11000\n11000\n00100\n00011\n\n输出: 3\n```\n\n', '如果遇到1，计数加1，使用DFS遍历，为了防止重复，在DFS遍历过程中将1改为非1的任意字符\n\n```c++\nclass Solution {\npublic:\n    int numIslands(vector<vector<char>>& grid) {\n        int count = 0;\n        for(int row = 0;row < grid.size();row++){\n            for(int col = 0;col < grid[0].size();col++){\n                if(grid[row][col] == \'1\'){\n                    count++;\n                    dfs(grid,row,col);\n                }\n            }\n        }\n        /* 如果不想改动grid，可以将所有的\'#\'变回\'1\' \n        for(int row = 0;row < grid.size();row++){\n            for(int col = 0;col < grid[0].size();col++){\n                if(grid[row][col] == \'#\'){\n                    grid[row][col] = \'1\';\n                }\n            }\n        }\n        */\n        return count;\n    }\n    \nprivate:\n    void dfs(vector<vector<char>>& grid,int row,int col){\n        if(row < 0 || col < 0 || row >= grid.size() || col >= grid[0].size() || grid[row][col] != \'1\')   return;\n        //没越界，并且为\'1\'\n        grid[row][col] = \'#\';\n        dfs(grid,row - 1,col);\n        dfs(grid,row + 1,col);\n        dfs(grid,row,col - 1);\n        dfs(grid,row,col + 1);\n    }\n};\n```\n', 'https://leetcode.com/problems/number-of-islands/description/', 'algorithm', '图', 1, 1);
INSERT INTO `problems` VALUES (41, '2021-01-17 13:00:09.651', '2021-01-17 13:00:09.651', NULL, '单链表转BST', '给定一个单链表，其中的元素按升序排序，将其转换为高度平衡的二叉搜索树。\n\n本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。\n\n示例:\n\n```\n给定的有序链表： [-10, -3, 0, 5, 9],\n\n一个可能的答案是：[0, -3, 9, -10, null, 5], 它可以表示下面这个高度平衡二叉搜索树：\n\n      0\n     / \\\n   -3   9\n   /   /\n -10  5\n```\n\n', '首先变量链表统计节点总数n\n\n假设二叉搜索树的构造函数为f(n)，即构造n个节点的二叉搜索树。为了平衡，左右子树的节点应该对半分。假设为左子树分配n/2个节点，由于根节点占用了1个节点，那么需要为右子树分配n-n/2-1个节点。因此有：\n\n```\nroot->left = f(n/2);\nroot->right = f(n-n/2-1);\n```\n\n那么root->val应该等于什么？注意上面的赋值顺序，这显然是一个递归调用的过程，在最深层会构造整棵二叉搜索树的最左子树（即最左子节点）。由于BST的性质，这个节点显然是最小值，因此应该使用链表头节点。所以左边最深处使用到第一个链表节点，那么遍历顺序就应该是中序遍历，因此root->val的设置应该在上面2个语句之间。同时，构造完一个节点后，链表也要前进一个节点：\n\n```c++\n//在对root->val赋值之前，需要为left成员赋值，因此初始化val为0\nTreeNode *root = new TreeNode(0);\nroot->left = f(n/2);\nroot->val = curr->val //curr为当前链表节点\ncurr = curr->next;\nroot->right = f(n-n/2-1);\n```\n\n代码：\n\n```c++\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* sortedListToBST(ListNode* head) {\n        ListNode* p = head;\n        int count = 0;\n        while(p) {\n            count++;\n            p = p->next;\n        }\n        \n        return sortedListToBSTCore(count,&head);\n    }\nprivate:\n    TreeNode* sortedListToBSTCore(int count,ListNode** curr){\n        if(count <= 0)  return NULL;\n        \n        TreeNode *root = new TreeNode(0);\n        root->left = sortedListToBSTCore(count / 2,curr);\n        root->val = (*curr)->val;\n        (*curr) = (*curr)->next;\n        root->right = sortedListToBSTCore(count - count / 2 - 1,curr);\n        \n        return root;\n    }\n};\n```\n', 'https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/description/', 'algorithm', '树', 1, 1);
INSERT INTO `problems` VALUES (42, '2021-01-17 13:00:09.651', '2021-01-17 13:00:09.651', NULL, '有效的字母异位词', '给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的一个字母异位词。\n\n示例 1:\n\n```\n输入: s = \"anagram\", t = \"nagaram\"\n输出: true\n```\n\n示例 2:\n\n```\n输入: s = \"rat\", t = \"car\"\n输出: false\n```\n\n说明:\n\n你可以假设字符串只包含小写字母。\n\n进阶:\n\n如果输入字符串包含 unicode 字符怎么办？你能否调整你的解法来应对这种情况？\n\n', '#### 1）排序\n\n将两个字符串按字典序排序，然后判断是否相等\n\n### 2）哈希表\n\n使用哈希表，统计字符串s中各字符的出现次数，然后遍历字符串t，如果遇到一个s中的字符，则计数减1，如果字符不在s中，则返回false。最终如果哈希表中所有字符的计数都刚好减为0那么就是异位词：\n\n```c++\nclass Solution {\npublic:\n    bool isAnagram(string s, string t) {\n        unordered_map<char,int> map;\n        for(char c : s)\n            map[c]++;\n        \n        for(char c : t){\n            if(map[c] == 0) return false;\n            else    map[c]--;\n        }\n        \n        for(auto p : map)\n            if(p.second > 0)\n                return false;\n        \n        return true;\n    }\n};\n```\n', 'https://leetcode.com/problems/valid-anagram/description/', 'algorithm', '字符串', 1, 1);
INSERT INTO `problems` VALUES (43, '2021-01-17 13:00:09.652', '2021-01-17 13:00:09.652', NULL, '有效的括号', '给定一个只包括 \'(\'，\')\'，\'{\'，\'}\'，\'[\'，\']\' 的字符串，判断字符串是否有效。\n\n有效字符串需满足：\n\n1. 左括号必须用相同类型的右括号闭合。\n2. 左括号必须以正确的顺序闭合。\n\n注意空字符串可被认为是有效字符串。\n\n示例 1:\n\n```\n输入: \"()\"\n输出: true\n```\n\n示例 2:\n\n```\n输入: \"()[]{}\"\n输出: true\n```\n\n示例 3:\n\n```\n输入: \"(]\"\n输出: false\n```\n\n示例 4:\n\n```\n输入: \"([)]\"\n输出: false\n```\n\n示例 5:\n\n```\n输入: \"{[]}\"\n输出: true\n```\n\n', '使用一个栈，当出现‘(’,\'{\',\'[\'时，将字符压入栈中。当出现‘)’,\'}\',\']\'时，判断栈是否为空，不为空的话判断栈顶的元素是否是对应匹配的左括号，如果是则找到一对匹配的括号，弹出。当遍历完字符串后，如果栈不为空，说明存在左括号缺少对应匹配的右括号，那么返回false，否则返回true\n\n```\nclass Solution {\npublic:\n    bool isValid(string s) {\n        stack<char> stack;\n        for(int i = 0;i < s.length();i++){\n            switch(s[i]){\n                case \')\':\n                    if(stack.empty() || stack.top() != \'(\')\n                        return false;\n                    stack.pop();\n                    break;\n                case \'}\':\n                    if(stack.empty() || stack.top() != \'{\')\n                        return false;\n                    stack.pop();\n                    break;\n                case \']\':\n                    if(stack.empty() || stack.top() != \'[\')\n                        return false;\n                    stack.pop();\n                    break;\n                default:\n                    stack.push(s[i]);\n                    break;\n            }\n        }\n        return stack.empty() ? true : false;\n    }\n};\n```\n', 'https://leetcode.com/problems/valid-parentheses/description/', 'algorithm', '栈和队列', 1, 1);
INSERT INTO `problems` VALUES (44, '2021-01-17 13:00:09.653', '2021-01-17 13:00:09.653', NULL, '栈的压入弹出序列', '输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。\n\n例如：序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）\n\n', '* 如果下一个弹出的数字刚好是栈顶数字，那么直接弹出\n* 如果下一个弹出的数字不是栈顶数字，则把压栈序列中还没有入栈的数字压入栈中，直到把下一个需要弹出的数字压入栈顶为止\n* 如果所有数字都压入栈后仍然没有找到下一个弹出的数字，那么该序列不可能是一个弹出序列\n\n```c++\nclass Solution {\npublic:\n    bool IsPopOrder(vector<int> pushV,vector<int> popV) {\n        if(pushV.size() != popV.size())\n            return false;\n        \n        stack<int> st;\n        int i = 0;\n        for(int e : popV){\n            if(!st.empty() && st.top() == e){\n                st.pop();\n                continue;\n            }\n            while(i < pushV.size() && pushV[i] != e){\n                st.push(pushV[i]);\n                i++;\n            }\n            if(i == pushV.size())\n                return false;\n            i++;\n        }\n        \n        return true;\n    }\n};\n```\n', 'https://www.nowcoder.com/practice/d77d11405cc7470d82554cb392585106?tpId=13&tqId=11174&tPage=2&rp=4&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking', 'algorithm', '栈和队列', 1, 1);
INSERT INTO `problems` VALUES (45, '2021-01-17 13:00:09.653', '2021-01-17 13:00:09.653', NULL, '翻转单词顺序', 'OJ链接：[牛客网](https://www.nowcoder.com/practice/3194a4f4cf814f63919d0790578d51f3?tpId=13&tqId=11197&tPage=3&rp=3&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking)、[Leetcode](https://leetcode.com/problems/reverse-words-in-a-string/description/)\n\n给定一个字符串，逐个翻转字符串中的每个单词\n\n示例:  \n\n```\n输入: \"the sky is blue\",\n输出: \"blue is sky the\".\n```\n\n说明:\n\n* 无空格字符构成一个单词。\n* 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括（**牛客不含这个条件**）\n* 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个（**牛客不含这个条件**）\n\n进阶: 请选用C语言的用户尝试使用 O(1) 时间复杂度的原地解法\n\n', '> 以下是牛客网的解答\n\n两次翻转字符串（先翻转所有，再翻转每个单词或先翻转每个单词，再翻转所有）\n\n```c++\nclass Solution {\npublic:\n    string ReverseSentence(string str) {\n        if(str.size() < 2)\n            return str;\n         \n        int sz = str.size();\n        Reverse(str,0,sz - 1);\n         \n        int firstCharIdx = 0;\n        for(int i = 0;i < sz;i++){\n            if(str[i] == \' \'){\n                if(str[firstCharIdx] == \' \')\n                    firstCharIdx++;\n                else{\n                    Reverse(str,firstCharIdx,i - 1);\n                    firstCharIdx = i + 1;\n                }\n            }\n        }\n         \n        if(str[sz - 1] != \' \')\n            Reverse(str,firstCharIdx,sz - 1);\n         \n        return str;\n    }\n     \n    void Reverse(string &str,int l,int r){\n        if(l < 0 || r >= str.size())\n            return;\n         \n        while(l < r){\n            char c = str[r];\n            str[r] = str[l];\n            str[l] = c;\n            l++;\n            r--;\n        }\n    }\n};\n```\n', '', 'algorithm', '字符串', 1, 1);
INSERT INTO `problems` VALUES (46, '2021-01-17 13:00:09.654', '2021-01-17 13:00:09.654', NULL, '两个字符串的最长公共子串', '给出2个字符串，找出它们的最长公共子串，返回其长度\n\n例子：\n\n* Given A = `\"ABCD\"`, B = `\"CBCE\"`, return 2\n\n> 子串和子序列的不同在于：子串连续，子序列可以不连续\n\n', '对于字符串序列`X`和`Y`，设`state[i,j]`表示以`X[i]`和`Y[j]`开头的最长公共子串。从`X`和`Y`的起始字符分析：\n\n* 如果起始字符相同，那么`state[0,0] = 1 + state[1,1]`\n* 如果起始字符不同，那么`state[0,0] = 0`\n\n因此，创建一个二维矩阵，可以求出所有`state[i][j]`的值，最长公共子串就是其中最大的一个\n\n* 时间复杂度：`O(n * m)`\n* 空间复杂度：`O(n * m)`\n\n> 也可以从结尾字符开始分析；最终结果取决于每一个`state[i][j]`，所以这里不能用状态压缩\n\n```c++\nclass Solution {\npublic:\n    /**\n     * @param A: A string\n     * @param B: A string\n     * @return: the length of the longest common substring.\n     */\n    int longestCommonSubstring(string &A, string &B) {\n        // write your code here\n        if(A == \"\" || B == \"\")  return 0;\n        int len1 = A.length();\n        int len2 = B.length();\n        vector<vector<int> > state(len1,vector<int>(len2,0));\n        state[len1 - 1][len2 - 1] = A[len1 - 1] == B[len2 - 1] ? 1 : 0;\n        //DP\n        for(int i = len1 - 2;i >=0;i--) //最后一列\n            state[i][len2 - 1] = A[i] == B[len2 - 1] ? 1 : 0;\n        for(int j = len2 - 2;j >=0;j--) //最后一行\n            state[len1 - 1][j] = A[len1 - 1] == B[j] ? 1 : 0;\n        for(int i = len1 - 2;i >= 0;i--)\n            for(int j = len2 - 2;j >= 0;j--)\n                state[i][j] = A[i] == B[j] ? 1 + state[i + 1][j + 1] : 0;\n                \n        int max = 0;\n        for(auto row : state)\n            for(int len : row)\n                if(len > max)\n                    max = len;\n        \n        return max;\n    }\n};\n```\n', 'https://www.lintcode.com/problem/longest-common-substring/description', 'algorithm', '字符串', 1, 1);
INSERT INTO `problems` VALUES (47, '2021-01-17 13:00:09.655', '2021-01-17 13:00:09.655', NULL, 'N皇后II', 'n 皇后问题研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击\n\n给定一个整数 n，返回 n 皇后不同的解决方案的数量\n\n示例:\n\n```\n输入: 4\n输出: 2\n解释: 4 皇后问题存在如下两个不同的解法。\n[\n [\".Q..\",  // 解法 1\n  \"...Q\",\n  \"Q...\",\n  \"..Q.\"],\n\n [\"..Q.\",  // 解法 2\n  \"Q...\",\n  \"...Q\",\n  \".Q..\"]\n]\n```\n\n', '找出所有排列，然后筛选出满足条件的排列\n\n#### 1）先排列后筛选\n\n就是[八皇后](#八皇后)的解法，找出所有排列，对于每个排列，判断排列中任意两个皇后是否能相互攻击，如果任意2个皇后都不能攻击，则计数加1\n\n时间复杂度：O(n! \\* n^2)\n\n```c++\nclass Solution {\npublic:\n    int totalNQueens(int n) {\n        if(n <= 0)  return 0;\n        \n        int res = 0;\n        vector<int> arr;    //排列\n        for(int i = 0;i < n;i++)    arr.push_back(i);\n        \n        dfs(arr,0,res);\n        \n        return res;\n    }\nprivate:\n    void dfs(vector<int> &arr,int i,int &res){\n        if(i == arr.size()){\n            if(valid(arr))\n                res++;\n            return;\n        }\n        \n        dfs(arr,i + 1,res);\n        for(int j = i + 1;j < arr.size();j++){\n            swap(arr[i],arr[j]);\n            dfs(arr,i + 1,res);\n            swap(arr[i],arr[j]);\n        }\n    }\n    \n    bool valid(const vector<int> &arr){\n        for(int i = 0;i < arr.size() - 1;i++)\n            for(int j = i + 1;j < arr.size();j++)\n                if(j - i == abs(arr[j] - arr[i]))\n                    return false;\n        return true;\n    }\n};\n```\n\n#### 2）边排列边筛选\n\n[参考](https://www.youtube.com/watch?v=Xa-yETqFNEQ)\n\n如果能在排列过程中完成筛选，那么就可以提升效率\n\n<div align=\"center\"> <img src=\"https://github.com/arkingc/note/raw/master/pic/leetcode-51-1.png\"/> </div>\n\n如上图所示，对于`n`阶的矩阵，红线和蓝线分别有`2 * n - 1`条。在排列过程中，如果选择了一个位置，那么将这个位置对应的红线和蓝线标记为`1`，这意味着往后不能再选择该红线和蓝线上的位置。因此，在判断是否添加一个位置时，如果该位置对应的红线或蓝线已经标记为`1`，说明之前已经添加了一个该条线上的位置，所以不能添加当前位置。如果对应的红线和蓝线都没标记为`1`，则添加该位置，并将对应的红线和蓝线标记为`1`。在DFS递归返回后，选择当前层的下一个位置之前，将对应的红线和蓝线标记清除，即置为`0`\n\n对于位置`(x,y)`：\n\n* 该位置对应红线的下标为：`x + y`\n* 该位置对应的蓝线的下标为：`x - y + (n - 1)`\n\n时间复杂度；O(n!)\n\n```c++\nclass Solution {\npublic:\n    int totalNQueens(int n) {\n        if(n <= 0)  return 0;\n        \n        int res = 0;\n        vector<int> arr;\n        for(int i = 0;i < n;i++)    arr.push_back(i);\n        vector<char> lineRed(2 * n - 1,0);     //红线是否已标记\n        vector<char> lineBlue(2 * n - 1,0);    //蓝线是否已标记\n        \n        dfs(arr,lineRed,lineBlue,0,n,res);\n        \n        return res;\n    }\nprivate:\n    void dfs(vector<int> &arr,vector<char> &lineRed,vector<char> &lineBlue,int i,int n,int &res){\n        if(i == n){\n            res++;\n            return;\n        }\n        \n        for(int j = i;j < n;j++){\n            swap(arr[i],arr[j]);\n            \n            int y = i,x = arr[i];\n            int idxOfLineRed = x + y;               //当前点所在的红线的下标\n            int idxOfLineBlue = x - y + (n - 1);    //当前点所在的蓝线的下标\n            if(lineRed[idxOfLineRed] == 0 && lineBlue[idxOfLineBlue] == 0){\n                lineRed[idxOfLineRed] = 1;\n                lineBlue[idxOfLineBlue] = 1;\n                dfs(arr,lineRed,lineBlue,i + 1,n,res);\n                lineRed[idxOfLineRed] = 0;\n                lineBlue[idxOfLineBlue] = 0;\n            }\n            \n            swap(arr[i],arr[j]);\n        }\n    }\n};\n```\n', 'https://leetcode.com/problems/n-queens-ii/description/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (48, '2021-01-17 13:00:09.656', '2021-01-17 13:00:09.656', NULL, '链表的中间节点', '求链表的中间节点。如果节点总数为偶数，则返回中间节点的任意一个\n\n', '使用两个指针，每次其中一个指针走一步，另外一个指针走两步\n\n> 举一反三：当用一个指针遍历链表不能解决问题时，可以尝试用两个指针来遍历。可以让其中一个指针遍历的速度快一些，或者让它先在链表上走若干步\n', '', 'algorithm', '链表', 1, 1);
INSERT INTO `problems` VALUES (49, '2021-01-17 13:00:09.657', '2021-01-17 13:00:09.657', NULL, '逆波兰表达式求值', '有效的运算符包括 `+`, `-`, `*`, `/` 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。\n\n说明：\n\n* 整数除法只保留整数部分。\n* 给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。\n\n示例 1：\n\n```\n输入: [\"2\", \"1\", \"+\", \"3\", \"*\"]\n输出: 9\n解释: ((2 + 1) * 3) = 9\n```\n\n示例 2：\n\n```\n输入: [\"4\", \"13\", \"5\", \"/\", \"+\"]\n输出: 6\n解释: (4 + (13 / 5)) = 6\n```\n\n示例 3：\n\n```\n输入: [\"10\", \"6\", \"9\", \"3\", \"+\", \"-11\", \"*\", \"/\", \"*\", \"17\", \"+\", \"5\", \"+\"]\n输出: 22\n解释: \n  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n= ((10 * (6 / (12 * -11))) + 17) + 5\n= ((10 * (6 / -132)) + 17) + 5\n= ((10 * 0) + 17) + 5\n= (0 + 17) + 5\n= 17 + 5\n= 22\n```\n\n', '使用一个栈保存数值，如果遇到一个运算符，则弹出栈顶的2个元素，运算后的结果压回栈中\n\n注意除法和减法时2个数的顺序\n\n```c++\nclass Solution {\npublic:\n    int evalRPN(vector<string>& tokens) {\n        stack<int> nums;\n        for(const string &s : tokens){\n            if(s == \"+\"){\n                int num = nums.top();\n                nums.pop();\n                nums.top() = nums.top() + num;\n            }\n            else if(s == \"-\"){\n                int num = nums.top();\n                nums.pop();\n                nums.top() = nums.top() - num;\n            }\n            else if(s == \"*\"){\n                int num = nums.top();\n                nums.pop();\n                nums.top() = nums.top() * num;\n            }\n            else if(s == \"/\"){\n                int num = nums.top();\n                nums.pop();\n                nums.top() = nums.top() / num;\n            }\n            else{\n                nums.push(stoi(s));\n            }\n        }\n        return nums.top();\n    }\n};\n```\n', 'https://leetcode.com/problems/evaluate-reverse-polish-notation/description/', 'algorithm', '数学', 1, 1);
INSERT INTO `problems` VALUES (50, '2021-01-17 13:00:09.657', '2021-01-17 13:00:09.657', NULL, '实现strcmp', '', '```c\n#include <cassert>\n\n//字符串比较\nint strcmp(const char *str1,const char *str2)\n{\n    assert(str1 && str2);\n\n    //在判断是否相等时不一定要转换为unsigned char\n    while((*str1 == *str2) && *str1){\n        str1++;\n        str2++;\n    }\n\n    if(*str1 == *str2)//说明上面循环退出时*str等于0\n        return 0;\n\n    //128种扩展ascii码使用最高位来标识，\n    //所以在判断返回大于0还是小于0是，要转换为unsigned char，否则结果相反\n\n    return *(unsigned char*)str1 > *(unsigned char*)str2 ? 1 : -1;\n}\n```\n', '', 'algorithm', 'c/c++基础', 1, 1);
INSERT INTO `problems` VALUES (51, '2021-01-17 13:00:09.658', '2021-01-17 13:00:09.658', NULL, '左旋转字符串', '字符串的左旋转操作是把字符串前面的若干个字符转移到字符串的尾部。请定义一个函数实现字符串左旋转操作的功能\n\n比如，输入字符串`“abcdefg”`和数字`2`，函数返回左旋转两位得到的结果`“cdefgab”`\n\n', '先对前半部和后半部的字符串做翻转，然后对整个字符串做翻转；比如上面的例子，对前半部和后半部翻转后得到`“bagfedc”`，然后翻转整个字符串，得到`\"cdefgab\"`\n', '', 'algorithm', '字符串', 1, 1);
INSERT INTO `problems` VALUES (52, '2021-01-17 13:00:09.659', '2021-01-17 13:00:09.659', NULL, '正方体顶点上放数字', '输入一个含有8个数字的数组，判断有没有可能把这8个数字分别放到正方体的8个顶点上，使得正方体上三组相对的面上的4个顶点的和都相等\n\n', '相当于先得到`a1、a2、a3、a4、a5、a6、a7`和`a8`这`8`个数字的所有排列，然后判断有没有某一个排列符合题目给定的条件，即`a1+a2+a3+a4=a5+a6+a7+a8`，`a1+a3+a5+a7=a2+a4+a6+a8`，并且`a1+a2+a5+a6=a3+a4+a7+a8`\n', '', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (53, '2021-01-17 13:00:09.660', '2021-01-17 13:00:09.660', NULL, '最长升序子序列', '给定一个无序的整数数组，找到其中最长上升子序列的长度。\n\n示例:\n\n```\n输入: [10,9,2,5,3,7,101,18]\n输出: 4 \n解释: 最长的上升子序列是 [2,3,7,101]，它的长度是 4。\n```\n\n说明:\n\n* 可能会有多种最长上升子序列的组合，你只需要输出对应的长度即可。\n* 你算法的时间复杂度应该为 O(n^2) 。\n\n进阶: 你能将算法的时间复杂度降低到 O(n log n) 吗?\n\n', '#### 1）动态规划\n\nn个元素的数组nums可以按照起始元素划分成n类子数组：第1类子数组以nums[0]为首元素，第2类子数组以nums[1]为首元素...，如果能找到每一类子数组中，最长的升序序列，那么数组nums的最长升序序列就是n类子数组中最长升序序列最长的那个。即，假设第i类子数组的最长升序序列的长度为fun(i)\n\n那么 max{fun(1),fun(2),...,f(n)}就是答案\n\n那么如何求fun(i)？以第1类子数组（首元素为num[0]的所有子数组）为例，既然nums[0]为首元素，要找到最长升序序列，下一个元素必定比nums[0]大，假设第一个大于nums[0]的元素为nums[j]，如果最长升序序列包含nums[j]，那么f(1) = 1+fun(j+1);否则，继续找到下一个比nums[0]大的元素nums[k]，如果最长升序序列包含nums[k]，那么f(1) = 1+fun(k+1);否则，...，因为nums[0]后任意一个比nums[0]大的元素都可能是最长升序序列的元素，所以要取这些结果中最大的一个\n\n使用一个数组state保存每个fun(i)，因为以最后一个元素为首元素的子数组只有1个，即该元素本身，所以最长升序序列的长度为1，即fun(n) = 1，可以从后向前求解fun(n-1),fun(n-2),...,fun(1)\n\n* 时间复杂度：O(n^2)\n* 空间复杂度：O(n)\n\n```c++\nclass Solution {\npublic:\n    int lengthOfLIS(vector<int>& nums) {\n        if(nums.empty())    return 0;\n        \n        vector<int> state(nums.size(),1);\n        for(int i = nums.size() - 2;i >= 0;i--){\n            for(int j = i + 1;j < nums.size();j++){\n                if(nums[i] < nums[j] && state[i] < state[j] + 1)\n                    state[i] = state[j] + 1;\n            }\n        }\n        \n        int max = 1;\n        for(int e : state)\n            if(e > max) max = e;\n        \n        return max;\n    }\n};\n```\n\n#### 2）方法二\n\n[参考](https://leetcode.com/problems/longest-increasing-subsequence/discuss/74855/Short-C++-STL-based-solution:-O(n-log-n)-time-O(1)-space-with-explanation)\n\n使用一个数组S保存最长升序序列的状态，它始终保持升序，每个元素插入S中时，替换掉S中大于等于这个插入元素的第一个元素，如果插入的元素大于S的最后一个元素，那么扩展S\n\n举个例子：\n\n```\nnums = [5,6,7,1,2,8,3,4,0,5,9]\n```\n\n当处理到7时，因为前3个元素升序，所以组成一个升序序列：\n\n```\nS = [5,6,7]\n```\n\n当处理1时，它终止了序列持续上升的趋势，可能会引导出一个新的更长的升序序列。因此替换掉大于等于它的第一个元素5：\n\n```\nS = [1,6,7]\n```\n\n接着处理2：\n\n```\nS = [1,2,7]\n```\n\n处理8时，需要扩展升序序列：\n\n```\nS = [1,2,7,8]\n```\n\n然后处理3：\n\n```\nS = [1,2,3,8]\n```\n\n处理4：\n\n```\nS = [1,2,3,4]\n```\n\n处理最后3个元素:\n\n```\nS = [0,2,3,4,5,9]\n```\n\n\n* 时间复杂度：O(nlogn)（只需遍历1遍数组，并且每次更新S可以使用二分查找）\n* 空间复杂度：O(1)（因为只需遍历一遍数组，所以可以直接在nums的前部进行修改，从而不需要额外的空间）\n\n```c++\nint lengthOfLIS(vector<int>& nums) {\n    if (nums.size() == 0)\n        return nums.size();\n\n    vector<int>::iterator m = nums.begin();  // m will mark the virtual \"S.end()\".\n    for (int& val : nums) {\n        //lower_bound使用二分查找，查找[nums.begin(),m)区间内第一个大于等于val的元素\n        //返回相应迭代器\n        auto it = lower_bound(nums.begin(), m, val);\n        *it = val;\n        if (it == m)\n            m++;\n    }\n    \n    return m - nums.begin();\n}\n```\n', 'https://leetcode.com/problems/longest-increasing-subsequence/description/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (54, '2021-01-17 13:00:09.661', '2021-01-17 13:00:09.661', NULL, '含重复元素集合的所有子集', '给定一个可能包含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。\n\n说明：解集不能包含重复的子集。\n\n示例:\n\n```\n输入: [1,2,2]\n输出:\n[\n  [2],\n  [1],\n  [1,2,2],\n  [2,2],\n  [1,2],\n  []\n]\n```\n\n', '为了方便处理相同元素，先排序\n\n考虑`[1,2,2,3]`，假设对于每个元素还是有2种选择：要或者不要，那么在处理数字2时就会出现重复：\n\n* 包含第1个`2`，不包含第2个`2`\n* 不包含第1个`2`，包含第2个`2`\n\n因此需要防止重复，也就是在DFS到第1个`2`时，应该怎么处理？\n\n* 首先将`2`添加到路径中，然后DFS后一个元素（在这里就是第2个`2`）\n* DFS返回后，将第1个`2`从路径中删除\n* 如果此时DFS后一个元素（在这里就是第2个`2`），那么就会和第一次DFS产生冗余。因为只要包含相同元素，那么选择不要相同元素的第1个元素肯定会和选择要相同元素的第1个元素，而不要其后的某个元素产生重复。因此，每次将一个元素从路径中删除时，应该跳到后面第一个不相等的元素进行DFS\n\n```c++\nclass Solution {\npublic:\n    vector<vector<int>> subsetsWithDup(vector<int>& nums) {\n        sort(nums.begin(),nums.end());\n        \n        vector<vector<int>> res;\n        vector<int> path;\n        \n        dfs(nums,0,res,path);\n        \n        return res;\n    }\nprivate:\n    void dfs(vector<int> &nums,int idx,vector<vector<int>> &res,vector<int> &path){\n        if(idx == nums.size()){\n            res.push_back(path);\n            return;\n        }\n        \n        path.push_back(nums[idx]);\n        dfs(nums,idx + 1,res,path);\n        path.pop_back();\n        //跳过相同的元素\n        while(idx + 1 < nums.size() && nums[idx] == nums[idx + 1])  idx++;\n        dfs(nums,idx + 1,res,path);  \n    }\n};\n```\n', 'https://leetcode.com/problems/subsets-ii/description/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (55, '2021-01-17 13:00:09.662', '2021-01-17 13:00:09.662', NULL, '从尾到头打印链表', '输入一个链表，从尾到头打印链表每个节点的值\n\n', '1. 反序，再打印（但会修改链表）\n2. 使用一个栈（鲁棒性好）\n3. 递归（递归本质上就是一个栈结构，链表过长时可能栈溢出）\n\n> 以下为方法3的代码\n\n```c++\n/**\n*  struct ListNode {\n*        int val;\n*        struct ListNode *next;\n*        ListNode(int x) :\n*              val(x), next(NULL) {\n*        }\n*  };\n*/\nclass Solution {\npublic:\n    vector<int> printListFromTailToHead(ListNode* head) {\n        if(!head)\n            return vector<int>();\n        \n        vector<int> res;\n        printListFromTailToHead(head,res);\n        \n        return res;\n    }\n    \n    void printListFromTailToHead(ListNode* head,vector<int> &res){\n        if(!head)\n            return;\n        \n        printListFromTailToHead(head->next,res);\n        res.push_back(head->val);\n    }\n};\n```\n', 'https://www.nowcoder.com/practice/d0267f7f55b3412ba93bd35cfa8e8035?tpId=13&tqId=11156&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking', 'algorithm', '链表', 1, 1);
INSERT INTO `problems` VALUES (56, '2021-01-17 13:00:09.663', '2021-01-17 13:00:09.663', NULL, 'LRU缓存机制', '运用你所掌握的数据结构，设计和实现一个  LRU (最近最少使用) 缓存机制。它应该支持以下操作： 获取数据 get 和 写入数据 put 。\n\n获取数据 get(key) - 如果密钥 (key) 存在于缓存中，则获取密钥的值（总是正数），否则返回 -1。\n写入数据 put(key, value) - 如果密钥不存在，则写入其数据值。当缓存容量达到上限时，它应该在写入新数据之前删除最近最少使用的数据值，从而为新的数据值留出空间。\n\n进阶:\n\n你是否可以在 O(1) 时间复杂度内完成这两种操作？\n\n示例:\n\n```\nLRUCache cache = new LRUCache( 2 /* 缓存容量 */ );\n\ncache.put(1, 1);\ncache.put(2, 2);\ncache.get(1);       // 返回  1\ncache.put(3, 3);    // 该操作会使得密钥 2 作废\ncache.get(2);       // 返回 -1 (未找到)\ncache.put(4, 4);    // 该操作会使得密钥 1 作废\ncache.get(1);       // 返回 -1 (未找到)\ncache.get(3);       // 返回  3\ncache.get(4);       // 返回  4\n```\n\n', '[参考](https://www.youtube.com/watch?v=q1Njd3NWvlY)\n\n* 需要实现O(1)的查找，那么需要用到hash表\n* 因为LRU，所以get的节点要移动到队列首部，put需要将节点添加到队列首部，需要在O(1)内完成，那么应该使用链表\n\n最后，在get时如何获取到链表中的节点？我们将hash表的value设置成连接节点的迭代器，因此通过key就能找到相应节点的迭代器。因为get时，可能删除链表中间的某个节点，要在O(1)内完成，那么使用双链表（STL的list）\n\n那么链表节点是只保存value还是保存(key,value)？答案是后者，因为当缓存满时，需要删除链表结尾的节点，同时需要删除hash表中对应的项，因此需要获取节点的key\n\n总的来说，就是hash表和list的两层结构：\n\n<div align=\"center\"> <img src=\"https://github.com/arkingc/note/raw/master/pic/leetcode-146-1.png\"/> </div>\n\n代码如下：\n\n```c++\nclass LRUCache {\npublic:\n    LRUCache(int capacity) : hashtable() , ls() , cap(capacity) , curr(0) {}\n    \n    int get(int key) {\n        if(hashtable.find(key) == hashtable.end())  return -1;\n        auto itr = hashtable[key];\n        if(itr == ls.begin())\n            return itr->second;\n        else{\n            ls.push_front(pair<int,int>(itr->first,itr->second));\n            auto new_itr = ls.begin();\n            hashtable[key] = new_itr;\n            ls.erase(itr);\n            return ls.front().second;\n        }\n        return 1;\n    }\n    \n    void put(int key, int value) {\n        if(hashtable.find(key) != hashtable.end()){\n            ls.erase(hashtable[key]);\n            ls.push_front(pair<int,int>(key,value));\n            auto new_itr = ls.begin();\n            hashtable[key] = new_itr;\n            return;\n        }\n        if(curr == cap){\n            hashtable.erase(ls.back().first);\n            ls.pop_back();\n            curr--;\n        }    \n        ls.push_front(pair<int,int>(key,value));\n        auto new_itr = ls.begin();\n        hashtable[key] = new_itr;\n        curr++;\n    }\nprivate:\n    unordered_map<int,list<pair<int,int>>::iterator> hashtable;\n    list<pair<int,int>> ls;\n    int cap;\n    int curr;\n};\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache obj = new LRUCache(capacity);\n * int param_1 = obj.get(key);\n * obj.put(key,value);\n */\n```\n', 'https://leetcode.com/problems/lru-cache/description/', 'algorithm', '设计', 1, 1);
INSERT INTO `problems` VALUES (57, '2021-01-17 13:00:09.664', '2021-01-17 13:00:09.664', NULL, '两数之和', '给定一个整数数组和一个目标值，找出数组中和为目标值的两个数。\n\n你可以假设每个输入只对应一种答案，且同样的元素不能被重复利用。\n\n示例:\n\n```\n给定 nums = [2, 7, 11, 15], target = 9\n\n因为 nums[0] + nums[1] = 2 + 7 = 9\n所以返回 [0, 1]\n```\n\n', '将元素值和下标记录在哈希表中，对于一个数num，可以快速查询哈希表中是否存在target-num，存在则找到答案\n\n边遍历边查询，边向哈希表中添加元素，这样方便处理含相同元素的情况\n\n```c++\nclass Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        unordered_map<int,int> map;\n        vector<int> res;\n        for(int i = 0;i < nums.size();i++){\n            if(map.find(target - nums[i]) != map.end()){\n                res.push_back(map[target - nums[i]]);\n                res.push_back(i);\n                return res;\n            }\n            map[nums[i]] = i;\n        }\n        return res;\n    }\n};\n```\n', 'https://leetcode.com/problems/two-sum/description/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (58, '2021-01-17 13:00:09.664', '2021-01-17 13:00:09.664', NULL, '实现memcpy', '', '> 实现的实际上是memmove，实际的memcpy是不考虑重叠的\n\n重点在于处理重叠的情况：\n\n```c\nvoid* memcpy(void *dst,const void *src,size_t size)\n{\n    if(dst == NULL || src == NULL){\n        return NULL;\n    }\n\n    char *pdst = (char*)dst;\n    char *psrc = (char*)src;\n\n    //有重叠，从高地址开始复制\n    if(pdst > psrc && pdst < psrc + size){\n        pdst = pdst + size - 1;\n        psrc = psrc + size - 1;\n        while(size--){\n            *pdst-- == *psrc--;\n        }\n    }\n    //没有重叠，从低地址开始复制\n    else{\n        while(size--){\n            *pdst++ = *psrc++;\n        }\n    }\n\n    return dst;\n}\n```\n', '', 'algorithm', 'c/c++基础', 1, 1);
INSERT INTO `problems` VALUES (59, '2021-01-17 13:00:09.665', '2021-01-17 13:00:09.665', NULL, 'Fizz Buzz', '写一个程序，输出从 1 到 n 数字的字符串表示。\n\n1. 如果 n 是3的倍数，输出“Fizz”；\n2. 如果 n 是5的倍数，输出“Buzz”；\n3. 如果 n 同时是3和5的倍数，输出 “FizzBuzz”。\n\n示例：\n\n```\nn = 15,\n\n返回:\n[\n    \"1\",\n    \"2\",\n    \"Fizz\",\n    \"4\",\n    \"Buzz\",\n    \"Fizz\",\n    \"7\",\n    \"8\",\n    \"Fizz\",\n    \"Buzz\",\n    \"11\",\n    \"Fizz\",\n    \"13\",\n    \"14\",\n    \"FizzBuzz\"\n]\n```\n\n', '```c++\nclass Solution {\npublic:\n    vector<string> fizzBuzz(int n) {\n        vector<string> res;\n        for(int i = 1;i <= n;i++){\n            if(i % 15 == 0) res.push_back(\"FizzBuzz\");\n            else if(i % 5 == 0) res.push_back(\"Buzz\");\n            else if(i % 3 == 0) res.push_back(\"Fizz\");\n            else    res.push_back(to_string(i));\n        }\n        return res;\n    }\n};\n```\n', 'https://leetcode.com/problems/fizz-buzz/description/', 'algorithm', '数学', 1, 1);
INSERT INTO `problems` VALUES (60, '2021-01-17 13:00:09.666', '2021-01-17 13:00:09.666', NULL, '整数1~n中1出现的次数', '求出1\\~13的整数中1出现的次数,并算出100\\~1300的整数中1出现的次数？为此他特别数了一下1\\~13中包含1的数字有1、10、11、12、13因此共出现6次,但是对于后面问题他就没辙了。ACMer希望你们帮帮他,并把问题更加普遍化,可以很快的求出任意非负整数区间中1出现的次数\n\n', '每次截去最高位作为划分，递归处理\n\n如：`n=21345`，分成2段：\n\n* `20001~21345`（因为此时最高位已经固定，所以等同于求`1~1345`中1出现的次数）\n* `0~20000`\n\n第一部分的次数递归处理；对于第二部分，当1在最高位时，因为范围包括了以1为最高位的所有5位数（`10000~19999`），所有总共出现`10^(位数-1)`次​，如果是到11345，则不包括所有以1位最高位的5位数，因此只出现`1345+1`次。当1在其余4位时，​出现`最高位数字*(10^(位数-2))*(位数-1)`次\n\n```c++\nclass Solution {\npublic:\n    int powerbase10(unsigned int n){\n        int res = 1;\n        while(n){\n            res *= 10;\n            n--;\n        }\n        return res;\n    }\n    \n    int NumberOf1Between1AndN(const string &str,int index){\n    if(str.size() == 0)    return 0;\n    if(index == static_cast<int>(str.size()) - 1){\n        if(str[index] == \'0\')\n            return 0;\n        return 1;\n    }\n\n    if(stoi(str.substr(index)) == 0)\n        return 0;\n\n    int count1,countOther;\n    int length = str.size() - index;\n    int firstDigit = str[index] - \'0\';\n\n    if(firstDigit == 1)\n        count1 = stoi(str.substr(index + 1)) + 1;\n    else//大于1\n        count1 = powerbase10(length - 1);\n\n    countOther = firstDigit * (length - 1) * powerbase10(length - 2);\n    int countRecursive = NumberOf1Between1AndN(str,index + 1);\n\n    return count1 + countOther + countRecursive;\n}\n    \n    int NumberOf1Between1AndN_Solution(int n)\n    {\n        string s = to_string(n);\n        \n        return NumberOf1Between1AndN(s,0);\n    }\n};\n```\n', 'https://www.nowcoder.com/practice/bd7f978302044eee894445e244c7eee6?tpId=13&tqId=11184&tPage=2&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking', 'algorithm', '数学', 1, 1);
INSERT INTO `problems` VALUES (61, '2021-01-17 13:00:09.667', '2021-01-17 13:00:09.667', NULL, '简化路径', '给定一个文档 (Unix-style) 的完全路径，请进行路径简化。\n\n例如，\n\npath = `\"/home/\"`, => `\"/home\"`\npath = `\"/a/./b/../../c/\"`, => `\"/c\"`\n\n边界情况:\n\n* 你是否考虑了 路径 = `\"/../\"` 的情况？在这种情况下，你需返回 `\"/\"` 。\n* 此外，路径中也可能包含多个斜杠 `\'/\'` ，如 `\"/home//foo/\"` 。在这种情况下，你可忽略多余的斜杠，返回 `\"/home/foo\"` 。\n\n', '根据`\'/\'`将路径分割成多个路径组成部分`part`：\n\n* 如果`part`等于`\".\"`或`\"\"`，那么处理下一个组成部分\n* 否则，如果`part`等于`\"..\"`，将上一个组成部分删除\n* 否则，将组成部分保存在一个vector或者stack中\n\n最后，根据vector或stack中的路径组成部分，生成简化后的路径\n\n> Java里面有现成的split函数可以根据符号分割字符串，C++要自己实现分割\n\n```c++\nclass Solution {\npublic:\n    string simplifyPath(string path) {\n        if(path == \"\")  return \"/\";\n        vector<string> v;\n        string res = \"\";\n        int first = path[0] == \'/\' ? 0 : -1;\n        for(int i = first + 1;i <= path.length();i++){\n            if(path[i] == \'/\' || i == path.length()){\n                string part = path.substr(first + 1,i - first - 1);\n                if(part == \"..\"){\n                    if(!v.empty())\n                        v.pop_back();\n                }\n                else if(part != \".\" && part != \"\")\n                    v.push_back(part);\n                first = i;\n            }\n        }\n        \n        for(const string &part : v)\n            res += \'/\' + part;\n        if(res == \"\")   return \"/\";\n        return res;\n    }\n};\n```\n', 'https://leetcode.com/problems/simplify-path/description/', 'algorithm', '字符串', 1, 1);
INSERT INTO `problems` VALUES (62, '2021-01-17 13:00:09.668', '2021-01-17 13:00:09.668', NULL, '序列化二叉树', '实现两个函数，分别用来序列化和反序列化二叉树\n\n', '#### 1）方法一\n\n可以先把一棵二叉树序列化成一个前序遍历和一个中序遍历的序列，然后在反序列化时通过这两个序列重构出原二叉树\n\n这种思路有两个缺点：\n\n* 该方法要求二叉树中不能有数值重复的节点；\n* 只有当两个序列中所有数据都读出后才能开始反序列化。如果两个遍历序列的数据是从一个流里读出来的，那么可能需要等待较长的时间\n\n#### 2）方法二\n\n如果二叉树序列化是从根节点开始的，那么相应的反序列化在根节点的数值读出来的时候就可以开始了。因此，可以根据前序遍历的顺序来序列化二叉树，因为前序遍历是从根节点开始的。在遍历二叉树碰到nullptr指针时，这些nullptr指针序列化为一个特殊的字符（如\'#\'）\n\n对于如下二叉树，被序列化成字符串“1,2,4,#,#,#,3,5,#,#,6,#,#”\n\n```\n      1\n     / \\\n    2   3\n   /   / \\\n  4   5   6\n```\n\n反序列化时，第一个读出的数字是1。由于前序遍历是从根节点开始的，这是根节点的值。接下来读出的数字是2，根据前序遍历的规则，这是根节点的左子节点的值。同样，接下来的数字4是值为2的节点的左子节点。接着从序列化字符串里读出两个字符\'#\'，这表明值为4的节点的左、右子节点均为nullptr指针，因此它是一个叶节点。接下来回到值为2的节点，重建它的右子节点。由于下一个字符是\'#\'，这表明值为2的节点的右子节点为nullptr指针。这个节点的左、右子树都已经构建完毕，接下来回到根节点，反序列化根节点的右子树\n\n下一个序列化字符串中的数字是3，因此右子树的根节点的值为3。它的左子节点是一个值为5的叶节点，因为接下来的三个字符是“5,#,#”。同样，它的右子节点是值为6的叶节点，因为最后3个字符是“6,#,#”\n\n总结前面的过程，我们都是把二叉树分解成3部分：根节点、左子树和右子树。在处理（序列化或反序列化）它的根节点之后再分别处理它的左、右子树\n\n```c++\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Codec {\npublic:\n\n    // Encodes a tree to a single string.\n    string serialize(TreeNode* root) {\n        if (root == nullptr) return \"#\";\n        return to_string(root->val)+\",\"+serialize(root->left)+\",\"+serialize(root->right);\n    }\n\n    // Decodes your encoded data to tree.\n    TreeNode* deserialize(string data) {\n        return deserializeCore(data);\n    }\n    \nprivate:\n    TreeNode* deserializeCore(string &data){\n        if(data == \"\")    return NULL;\n        \n        if(data[0] == \'#\'){\n            data = data.substr(data.find(\',\') + 1);\n            return NULL;\n        }\n        \n        size_t idx;\n        int val = stoi(data,&idx);\n        data = data.substr(idx + 1);\n        \n        TreeNode *node = new TreeNode(val);\n        \n        node->left = deserializeCore(data);\n        node->right = deserializeCore(data);\n        \n        return node;\n    }\n};\n```\n', 'https://leetcode.com/problems/serialize-and-deserialize-binary-tree/description/', 'algorithm', '树', 1, 1);
INSERT INTO `problems` VALUES (63, '2021-01-17 13:00:09.669', '2021-01-17 13:00:09.669', NULL, '输出二叉树的中序遍历序列', '给定一个二叉树，返回它的中序 遍历。\n\n示例:\n\n```\n输入: [1,null,2,3]\n   1\n    \\\n     2\n    /\n   3\n\n输出: [1,3,2]\n```\n\n进阶: 递归算法很简单，你可以通过迭代算法完成吗？\n\n', '#### 1）递归\n\n```c++\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> inorderTraversal(TreeNode* root) {\n        vector<int> res;\n        inorderTraversal(root,res);\n        return res;\n    }\nprivate:\n    void inorderTraversal(TreeNode *root,vector<int> &res){\n        if(!root)   return;\n        \n        inorderTraversal(root->left,res);\n        res.push_back(root->val);\n        inorderTraversal(root->right,res);\n        \n        return;\n    }\n};\n```\n\n#### 2）迭代\n\n```c++\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> inorderTraversal(TreeNode* root) {\n        vector<int> res;\n        stack<TreeNode*> s;\n        TreeNode *curr = root;\n        while(curr || !s.empty()){\n            if(curr){\n                s.push(curr);\n                curr = curr->left;\n            }\n            else{\n                res.push_back(s.top()->val);\n                curr = s.top()->right;\n                s.pop();\n            }\n        }\n        return res;\n    }\n};\n```\n', 'https://leetcode.com/problems/binary-tree-inorder-traversal/description/', 'algorithm', '树', 1, 1);
INSERT INTO `problems` VALUES (64, '2021-01-17 13:00:09.670', '2021-01-17 13:00:09.670', NULL, '最长有效括号', '给定一个只包含 `\'(\'` 和 `\')\'` 的字符串，找出最长的包含有效括号的子串的长度。\n\n示例 1:\n\n```\n输入: \"(()\"\n输出: 2\n解释: 最长有效括号子串为 \"()\"\n```\n\n示例 2:\n\n```\n输入: \")()())\"\n输出: 4\n解释: 最长有效括号子串为 \"()()\"\n```\n\n', '使用一个栈\n\n* 如果遇到`\'(\'`，那么将下标压入栈中\n* 如果遇到`\')\'`，说明可能出现一次匹配，那么查看栈是否为空（即左边是否存在`\'(\'`与该`\')\'`匹配）\n    - 如果栈为空，说明前面的匹配被该`\')\'`终止，`\')\'`后面的括号不可能和`\')\'`前面的括号产生匹配，所以更新匹配的起始下标`start`\n    - 如果栈不为空，那么弹出一个`\'(\'`，并且根据弹出后栈是否为空来更新`res`\n        + 如果弹出后栈不为空，那么从当前栈顶`\'(\'`的位置之后，到当前的`\')\'`为有效的匹配串\n        + 如果弹出后栈顶为空，那么从`start`后到当前的`\')\'`为有效的匹配串\n\n```c++\nclass Solution {\npublic:\n    int longestValidParentheses(string s) {\n        if(s == \"\") return 0;\n        \n        int res = 0,start = -1;\n        stack<int> st;\n        \n        for(int i = 0;i < s.length();i++){\n            switch(s[i]){\n                case \'(\':\n                    st.push(i);\n                    break;\n                case \')\':\n                    if(st.empty())\n                        start = i;\n                    else{\n                        st.pop();\n                        if(st.empty())\n                            res = max(res,i - start);\n                        else\n                            res = max(res,i - st.top());\n                    }\n                    break;\n            }\n        }\n        \n        return res;\n    }\n};\n```\n', 'https://leetcode.com/problems/longest-valid-parentheses/description/', 'algorithm', '栈和队列', 1, 1);
INSERT INTO `problems` VALUES (65, '2021-01-17 13:00:09.671', '2021-01-17 13:00:09.671', NULL, '之字形打印二叉树', '请实现一个函数按照之字形打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右至左的顺序打印，第三行按照从左到右的顺序打印，其他行以此类推\n\n', '* 需要两个栈，在遍历某个栈打印某一层的节点时，把下一层的子节点保存到另一层的栈里\n* 奇数层和偶数层保存左右子节点的顺序不同\n* 使用一个int变量index作为开关，取值为0或1在2个栈之间切换\n\n```c++\n/*\nstruct TreeNode {\n    int val;\n    struct TreeNode *left;\n    struct TreeNode *right;\n    TreeNode(int x) :\n            val(x), left(NULL), right(NULL) {\n    }\n};\n*/\nclass Solution {\npublic:\n    vector<vector<int> > Print(TreeNode* pRoot) {\n        vector<vector<int> > res;\n        if(!pRoot)\n            return res;\n        \n        stack<TreeNode*> st[2];\n        int index = 0;//0的栈存从左到右的节点，1存从右到左\n        st[index].push(pRoot);\n        \n        TreeNode* curr;\n        vector<int> linevec;\n        while(!st[index].empty()){\n            curr = st[index].top();\n            st[index].pop();\n            linevec.push_back(curr->val);\n            \n            if(!index){\n                if(curr->left)\n                    st[1-index].push(curr->left);\n                if(curr->right)\n                    st[1-index].push(curr->right);\n            }\n            else{\n                if(curr->right)\n                    st[1-index].push(curr->right);\n                if(curr->left)\n                    st[1-index].push(curr->left);\n            }\n            \n            //如果是最后一个元素\n            if(st[index].empty()){\n                index = 1 - index;\n                res.push_back(linevec);\n                linevec.clear();\n            }\n        }\n        \n        return res;\n    }\n};\n```\n', 'https://www.nowcoder.com/practice/91b69814117f4e8097390d107d2efbe0?tpId=13&tqId=11212&tPage=3&rp=3&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking', 'algorithm', '树', 1, 1);
INSERT INTO `problems` VALUES (66, '2021-01-17 13:00:09.671', '2021-01-17 13:00:09.671', NULL, '查找数组中任一峰值的下标', '峰值元素是指其值大于左右相邻值的元素。\n\n给定一个输入数组 `nums`，其中 `nums[i] ≠ nums[i+1]`，找到峰值元素并返回其索引。\n\n数组可能包含多个峰值，在这种情况下，返回任何一个峰值所在位置即可。\n\n你可以假设 `nums[-1] = nums[n] = -∞`。\n\n示例 1:\n\n```\n输入: nums = [1,2,3,1]\n输出: 2\n解释: 3 是峰值元素，你的函数应该返回其索引 2。\n```\n\n示例 2:\n\n```\n输入: nums = [1,2,1,3,5,6,4]\n输出: 1 或 5 \n解释: 你的函数可以返回索引 1，其峰值元素为 2；\n     或者返回索引 5， 其峰值元素为 6。\n```\n\n说明:\n\n你的解法应该是 O(logN) 时间复杂度的\n\n', '#### 1）线性查找\n\n遍历数组，对于每个元素，如果该元素的前一元素和后一元素都小于该元素，那么该元素是一个峰值，返回\n\n* 时间复杂度：O(n)\n* 空间复杂度：O(1)\n\n#### 2）二分查找\n\n* 如果中间元素比右边的元素小，意味着当前处于一个“升序”中，那么右边(不含当前元素)将会出现一个峰值\n* 如果中间元素比右边的元素大，意味着当前处于一个“降序”中，那么左边(包含当前元素)将会出现一个峰值\n* 如果中间元素等于右边的元素，那么无法减小区间（所以题目给出了nums[i]不等于nums[i+1]）\n\n使用上述判断一直减小区间，直到区间只有1个元素\n\n* 时间复杂度：O(logn)\n* 空间复杂度：O(1)\n\n```c++\nclass Solution {\npublic:\n    int findPeakElement(vector<int>& nums) {\n        int ret = -1;\n        int l = 0,r = nums.size() - 1,mid;\n        while(l < r){\n            mid = (l + r) >> 1;\n            if(nums[mid] < nums[mid + 1])\n                l = mid + 1;\n            else if(nums[mid] > nums[mid + 1])\n                r = mid;\n            //假设输入合法，如果nums[mid] == nums[mid+1]会无限循环\n            //为了代码的简洁性暂时不处理这种情况\n        }\n        return l == r ? l : -1;\n    }\n};\n```\n', 'https://leetcode.com/problems/find-peak-element/description/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (67, '2021-01-17 13:00:09.672', '2021-01-17 13:00:09.672', NULL, 'N皇后', 'n 皇后问题研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击\n\n给定一个整数 n，返回所有不同的 n 皇后问题的解决方案\n\n每一种解法包含一个明确的 n 皇后问题的棋子放置方案，该方案中 \'Q\' 和 \'.\' 分别代表了皇后和空位\n\n示例:\n\n```\n输入: 4\n输出: [\n [\".Q..\",  // 解法 1\n  \"...Q\",\n  \"Q...\",\n  \"..Q.\"],\n\n [\"..Q.\",  // 解法 2\n  \"Q...\",\n  \"...Q\",\n  \".Q..\"]\n]\n解释: 4 皇后问题存在两个不同的解法。\n```\n\n', '和[N皇后II](#n皇后ii)不同的是，前者是求出满足条件的排列数量，这里要求输出所有符合要求的排列。但是方法都是相同，前者是找到一个符合要求的排列时计数加1，这里是找到一个符合要求的排列时，根据排列设置矩阵，然后将矩阵添加到结果中\n\n#### 1）先排列后筛选\n\n时间复杂度：O(n! \\* n^2)\n\n```c++\nclass Solution {\npublic:\n    vector<vector<string>> solveNQueens(int n) {\n        if(n <= 0)  return vector<vector<string>>();\n        \n        vector<vector<string>> res;\n        vector<int> arr;    //排列\n        for(int i = 0;i < n;i++)    arr.push_back(i);\n        \n        dfs(arr,0,res);\n        \n        return res;\n    }\nprivate:\n    void dfs(vector<int> &arr,int i,vector<vector<string>> &res){\n        if(i == arr.size()){\n            if(valid(arr)){\n                int n = arr.size();\n                string s(n,\'.\');\n                vector<string> matrix(n,s);\n                for(int i = 0;i < n;i++)    matrix[i][arr[i]] = \'Q\';\n                res.push_back(matrix);\n            }\n            return;\n        }\n        \n        dfs(arr,i + 1,res);\n        for(int j = i + 1;j < arr.size();j++){\n            swap(arr[i],arr[j]);\n            dfs(arr,i + 1,res);\n            swap(arr[i],arr[j]);\n        }\n    }\n    \n    bool valid(const vector<int> &arr){\n        for(int i = 0;i < arr.size() - 1;i++)\n            for(int j = i + 1;j < arr.size();j++)\n                if(j - i == abs(arr[j] - arr[i]))\n                    return false;\n        return true;\n    }\n};\n```\n\n#### 2）边排列边筛选\n\n时间复杂度：O(n!)\n\n```c++\nclass Solution {\npublic:\n    vector<vector<string>> solveNQueens(int n) {\n        if(n <= 0)  return vector<vector<string>>();\n        \n        vector<vector<string>> res;\n        vector<int> arr;\n        for(int i = 0;i < n;i++)    arr.push_back(i);\n        vector<char> lineRed(2 * n - 1,0);     //红线是否已标记\n        vector<char> lineBlue(2 * n - 1,0);    //蓝线是否已标记\n        \n        dfs(arr,lineRed,lineBlue,0,n,res);\n        \n        return res;\n    }\nprivate:\n    void dfs(vector<int> &arr,vector<char> &lineRed,vector<char> &lineBlue,int i,int n,vector<vector<string>> &res){\n        if(i == n){\n            int n = arr.size();\n            string s(n,\'.\');\n            vector<string> matrix(n,s);\n            for(int i = 0;i < n;i++)    matrix[i][arr[i]] = \'Q\';\n            res.push_back(matrix);\n            return;\n        }\n        \n        for(int j = i;j < n;j++){\n            swap(arr[i],arr[j]);\n            \n            int y = i,x = arr[i];\n            int idxOfLineRed = x + y;               //当前点所在的红线的下标\n            int idxOfLineBlue = x - y + (n - 1);    //当前点所在的蓝线的下标\n            if(lineRed[idxOfLineRed] == 0 && lineBlue[idxOfLineBlue] == 0){\n                lineRed[idxOfLineRed] = 1;\n                lineBlue[idxOfLineBlue] = 1;\n                dfs(arr,lineRed,lineBlue,i + 1,n,res);\n                lineRed[idxOfLineRed] = 0;\n                lineBlue[idxOfLineBlue] = 0;\n            }\n            \n            swap(arr[i],arr[j]);\n        }\n    }\n};\n```\n', 'https://leetcode.com/problems/n-queens/description/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (68, '2021-01-17 13:00:09.673', '2021-01-17 13:00:09.673', NULL, '实现Trie树', '实现一个 Trie (前缀树)，包含 insert, search, 和 startsWith 这三个操作。\n\n示例:\n\n```\nTrie trie = new Trie();\n\ntrie.insert(\"apple\");\ntrie.search(\"apple\");   // 返回 true\ntrie.search(\"app\");     // 返回 false\ntrie.startsWith(\"app\"); // 返回 true\ntrie.insert(\"app\");   \ntrie.search(\"app\");     // 返回 true\n```\n\n说明:\n\n* 你可以假设所有的输入都是由小写字母 a-z 构成的。\n* 保证所有输入均为非空字符串。\n\n', '```c++\nclass TrieNode{\npublic:\n    TrieNode(){ \n        memset(next,0,sizeof(next));\n        word = false;\n    }\n    \n    bool containChar(char c){return next[c - \'a\'] == NULL ? false : true;}\n    \n    void putNext(char c,TrieNode *nd){next[c - \'a\'] = nd;}\n    \n    TrieNode* getNext(char c) {return next[c - \'a\'];}\n    \n    bool isWord() {return word;}\n    \n    void setWord() {word = true;} \nprivate:\n    bool word;//从根节点到当前节点的所有字符组成的单词是否包含在字典中\n    TrieNode* next[26];\n};\n\nclass Trie {\npublic:\n    /** Initialize your data structure here. */\n    Trie() {\n        root = new TrieNode();\n    }\n    \n    /** Inserts a word into the trie. */\n    void insert(string word) {\n        TrieNode *curr = root;\n        for(char c : word){\n            if(curr->containChar(c))    curr = curr->getNext(c);\n            else{\n                TrieNode *newNode = new TrieNode();\n                curr->putNext(c,newNode);\n                curr = newNode;\n            }\n        }\n        curr->setWord();\n    }\n    \n    /** Returns if the word is in the trie. */\n    bool search(string word) {\n        TrieNode *curr = root;\n        int len = 0;\n        for(char c : word){\n            if(!curr->containChar(c))   break;\n            else    curr = curr->getNext(c);\n            len++;\n        }\n        if(len != word.size())  return false;\n        return curr->isWord();\n    }\n    \n    /** Returns if there is any word in the trie that starts with the given prefix. */\n    bool startsWith(string prefix) {\n        TrieNode *curr = root;\n        int len = 0;\n        for(char c : prefix){\n            if(!curr->containChar(c))   break;\n            else    curr = curr->getNext(c);\n            len++;\n        }\n        if(len != prefix.size())  return false;\n        return true;\n    }\nprivate:\n    TrieNode *root;\n};\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie obj = new Trie();\n * obj.insert(word);\n * bool param_2 = obj.search(word);\n * bool param_3 = obj.startsWith(prefix);\n */\n```\n', 'https://leetcode.com/problems/implement-trie-prefix-tree/description/', 'algorithm', '设计', 1, 1);
INSERT INTO `problems` VALUES (69, '2021-01-17 13:00:09.674', '2021-01-17 13:00:09.674', NULL, '删除数组中值为val的元素', '给定一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，返回移除后数组的新长度。\n\n不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。\n\n元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。\n\n示例 1:\n\n```\n给定 nums = [3,2,2,3], val = 3,\n\n函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。\n\n你不需要考虑数组中超出新长度后面的元素。\n```\n\n示例 2:\n\n```\n给定 nums = [0,1,2,2,3,0,4,2], val = 2,\n\n函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。\n\n注意这五个元素可为任意顺序。\n\n你不需要考虑数组中超出新长度后面的元素\n```\n\n', '#### 1）计数\n\n如果值为val的元素有m个，那么相当于所有在val后面的元素都要前移，最终后面留下m个位置\n\n遍历数组，每出现一次val时，计数count增加一，如果元素的值不为val，那么前移count步\n\n```c++\nclass Solution {\npublic:\n    int removeElement(vector<int>& nums, int val) {\n        int count = 0;\n        for(int i = 0;i < nums.size();i++){\n            if(nums[i] == val)  count++;\n            else if(count != 0)    nums[i - count] = nums[i];\n        }\n        \n        return nums.size() - count;\n    }\n};\n```\n\n#### 2）双指针\n\n使用两个指针`i`和`j`，`j`用于遍历数组中的所有元素，`i`及`i`之前的元素都不等于`val`，因此初始化`i`为`-1`，在`j`进行遍历时，如果元素不等于`val`，那么存入位置`++i`\n\n```c++\nclass Solution {\npublic:\n    int removeElement(vector<int>& nums, int val) {\n        int i = -1;\n        for(int j = 0;j < nums.size();j++)\n            if(nums[j] != val)\n                nums[++i] = nums[j];\n        return i + 1;\n    }\n};\n```\n', 'https://leetcode.com/problems/remove-element/description/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (70, '2021-01-17 13:00:09.675', '2021-01-17 13:00:09.675', NULL, '平衡二叉树AVL', '输入一棵二叉树，判断该二叉树是否是平衡二叉树\n\n', '#### 1）方法一\n\n遍历AVL的每个节点，求该节点左右子树的高度，如果差不超过1，则继续递归，判断左右子树是不是AVL\n\n这种方法求深度时某些节点的深度会重复计算，效率低\n\n#### 2）方法二\n\n后续遍历，遍历到一个节点时已经遍历了它的左右子树，只要在遍历每个节点的时候记录它的深度，就可以一边遍历一边判断每个节点是不是平衡的\n\n```c++\nclass Solution {\npublic:\n    bool IsBalanced_Solution(TreeNode* pRoot) {\n        int depth;\n        return IsBalanced_Solution(pRoot,depth);\n    }\nprivate:\n    bool IsBalanced_Solution(TreeNode* pRoot,int &depth){\n        if(!pRoot){\n            depth = 0;\n            return true;\n        }\n        int depth_l,depth_r;\n        if(!IsBalanced_Solution(pRoot->left,depth_l) || \n            !IsBalanced_Solution(pRoot->right,depth_r) ||\n            abs(depth_l - depth_r) > 1)\n            return false;\n        depth = max(depth_l,depth_r) + 1;\n        return true;\n    }\n};\n```\n', 'https://www.nowcoder.com/practice/8b3b95850edb4115918ecebdf1b4d222?tpId=13&tqId=11192&tPage=2&rp=2&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking', 'algorithm', '树', 1, 1);
INSERT INTO `problems` VALUES (71, '2021-01-17 13:00:09.676', '2021-01-17 13:00:09.676', NULL, '旋转数组中查找数字', '假设按照升序排序的数组在预先未知的某个点上进行了旋转。\n\n( 例如，数组 `[0,1,2,4,5,6,7]` 可能变为 `[4,5,6,7,0,1,2]` )。\n\n搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 `-1` 。\n\n你可以假设数组中不存在重复的元素。\n\n你的算法时间复杂度必须是 O(log n) 级别。\n\n示例 1:\n\n```\n输入: nums = [4,5,6,7,0,1,2], target = 0\n输出: 4\n```\n\n示例 2:\n\n```\n输入: nums = [4,5,6,7,0,1,2], target = 3\n输出: -1\n```\n\n', '* 首先，如果`nums[mid] == target`，那么找到目标元素，返回`mid`\n* `如果nums[l] < nums[r]`，说明`l~r`范围的元素有序，那么执行正常的二分查找\n* 否则，根据`mid`位置的值判断`mid`是在左半部分还是右半部分\n    - 如果`nums[mid] ≥ nums[l]`，说明`mid`在左半部分\n        - 当`target > nums[r] && target < nums[mid]`，那么`target`只可能出现在`mid`的左边，因此在`mid`左边继续查找\n        - 否则，`target`只可能出现在`mid`的右边，因此在`mid`右边继续查找\n    * 否则，`mid`在右半部分\n        - 当`target > nums[mid] && target < nums[l]`，那么`target`只可能出现在`mid`的右边，因此在`mid`右边继续查找\n        - 否则，`target`只可能出现在`mid`的左边，因此在`mid`左边继续查找\n\n```c++\nclass Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n        int l = 0,r = nums.size() - 1;\n        while(l <= r){\n            int mid = (l + r) / 2;\n            if(nums[mid] == target) return mid;\n            if(nums[l] < nums[r]){\n                if(nums[mid] < target)   l = mid + 1;\n                else                     r = mid - 1;\n            }\n            else{\n                if(nums[mid] >= nums[l]){//mid在左边\n                    if(target > nums[r] && target < nums[mid])  r = mid - 1;\n                    else    l = mid + 1;\n                }\n                else{//mid在右边\n                    if(target > nums[mid] && target < nums[l])  l = mid + 1;\n                    else    r = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n};\n```\n', 'https://leetcode.com/problems/search-in-rotated-sorted-array/description/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (72, '2021-01-17 13:00:09.677', '2021-01-17 13:00:09.677', NULL, '单词搜索II', '给定一个二维网格 board 和一个字典中的单词列表 words，找出所有同时在二维网格和字典中出现的单词。\n\n单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母在一个单词中不允许被重复使用。\n\n示例:\n\n```\n输入: \nwords = [\"oath\",\"pea\",\"eat\",\"rain\"] and board =\n[\n  [\'o\',\'a\',\'a\',\'n\'],\n  [\'e\',\'t\',\'a\',\'e\'],\n  [\'i\',\'h\',\'k\',\'r\'],\n  [\'i\',\'f\',\'l\',\'v\']\n]\n\n输出: [\"eat\",\"oath\"]\n```\n\n说明:\n\n你可以假设所有输入都由小写字母 a-z 组成。\n\n提示:\n\n* 你需要优化回溯算法以通过更大数据量的测试。你能否早点停止回溯？\n* 如果当前单词不存在于所有单词的前缀中，则可以立即停止回溯。什么样的数据结构可以有效地执行这样的操作？散列表是否可行？为什么？ 前缀树如何？\n\n', '利用字典树Trie（[实现Trie树](#实现trie树)）来做, 就是将要搜索的单词先添加到字典树中, 然后从地图board的每一个元素搜索, 如果往上下左右搜索的时候其元素可以在字典树中找到, 那么就继续搜索下去, 并且如果搜索到某个结点的时候发现到这个结点构成了一个单词, 那么就将单词添加到结果集合中. 如果在字典树中无法找到这个元素, 那么就结束当前分支的搜索\n\n另外还需要标记搜索过的点, 可以再开一个二维数组来标记, 也可直接在原矩阵上修改, 搜索完之后再改回来\n\n```c++\nclass Solution {\npublic:\n    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {\n        if(board.empty() || words.empty())   return vector<string>();\n        \n        TrieNode *root = new TrieNode(),*nd;\n         for(auto str: words)  \n        {  \n            nd = root;  \n            for(auto ch: str)  \n            {  \n                if(!nd->next[ch-\'a\']) nd->next[ch-\'a\'] = new TrieNode();  \n                nd = nd->next[ch-\'a\'];  \n            }  \n            nd->word = true;  \n        }  \n        \n        vector<string> res;\n        for(int i = 0;i < board.size();i++){\n            for(int j = 0;j < board[0].size();j++){\n                dfs(board,root->next[board[i][j]-\'a\'],i,j,\"\",res);\n            }\n        }\n        return res;\n    }\nprivate:\n    struct TrieNode\n    {  \n        vector<TrieNode*> next;  \n        bool word;  \n        TrieNode(): next(vector<TrieNode*>(26, NULL)), word(false){}  \n    };\n    \n    void dfs(vector<vector<char>>& board,TrieNode *nd,int x,int y,string word,vector<string> &res){\n        if(!nd || board[x][y] == \'#\')\n            return;\n        \n        char c = board[x][y];\n        word += c;\n        if(nd->word){\n            res.push_back(word);\n            nd->word = false;    //防止重复\n        }\n        \n        board[x][y] = \'#\';\n        if(x - 1 >= 0)  \n            dfs(board,nd->next[board[x - 1][y] - \'a\'],x - 1,y,word,res);\n        if(x + 1 < board.size())  \n            dfs(board,nd->next[board[x + 1][y] - \'a\'],x + 1,y,word,res);\n        if(y - 1 >= 0)\n            dfs(board,nd->next[board[x][y - 1] - \'a\'],x,y - 1,word,res);\n        if(y + 1 < board[0].size())\n            dfs(board,nd->next[board[x][y + 1] - \'a\'],x,y + 1,word,res);\n        board[x][y] = c;\n    }\n};\n```\n', 'https://leetcode.com/problems/word-search-ii/description/', 'algorithm', '字符串', 1, 1);
INSERT INTO `problems` VALUES (73, '2021-01-17 13:00:09.678', '2021-01-17 13:00:09.678', NULL, '统计不同号码的个数', '已知某文件内包含一些电话号码，每个号码为8位数字，统计不同号码的个数\n\n', '8位数字表示的最大数为99999999，可以理解为从[0,99999999]的数字，用位图解决，则每个数字对应一个bit，只需要约12MB，依次读入每个号码，然后将位图相应位置设为1，最后统计位图中1的位数的个数\n', '', 'algorithm', '海量数据', 1, 1);
INSERT INTO `problems` VALUES (74, '2021-01-17 13:00:09.679', '2021-01-17 13:00:09.679', NULL, '有序数组中查找数字的范围', '统计一个数字在排序数组中出现的次数\n\n', '使用二分查找，分别找到数字的下边界和上边界\n\n```c++\nclass Solution {\npublic:\n    vector<int> searchRange(vector<int>& nums, int target) {\n        int l = searchRangel(nums,target);\n        int r = searchRanger(nums,target);\n        \n        vector<int> v;\n        v.push_back(l);\n        v.push_back(r);\n        return v;\n    }\n    \n    int searchRangel(const vector<int> &nums,int target)\n    {\n        int l = 0,r = nums.size() - 1;\n        int mid;\n        \n        while(l <= r){\n            mid = (l + r) / 2;\n            if(nums[mid] == target){\n                if(mid == 0 || nums[mid - 1] != nums[mid])  return mid;\n                else   r = mid - 1;\n            }\n            else if(nums[mid] > target) r = mid - 1;\n            else    l = mid + 1;\n        }\n        \n        return -1;\n    }\n    \n    int searchRanger(const vector<int> &nums,int target)\n    {\n        int l = 0,r = nums.size() - 1;\n        int mid,end = r;\n        \n        while(l <= r){\n            mid = (l + r) / 2;\n            if(nums[mid] == target){\n                if(mid == end || nums[mid + 1] != nums[mid])  return mid;\n                else   l = mid + 1;\n            }\n            else if(nums[mid] > target) r = mid - 1;\n            else    l = mid + 1;\n        }\n        \n        return -1;\n    }\n};\n```\n', 'https://leetcode.com/problems/search-for-a-range/description/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (75, '2021-01-17 13:00:09.679', '2021-01-17 13:00:09.679', NULL, '买卖股票的最佳时机', '给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。\n\n如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。\n\n注意你不能在买入股票前卖出股票。\n\n示例 1:\n\n```\n输入: [7,1,5,3,6,4]\n输出: 5\n解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。\n     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。\n```\n\n示例 2:\n\n```\n输入: [7,6,4,3,1]\n输出: 0\n解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。\n```\n\n', '遍历数组，如果遇到一个更小的价格，那么更新买入的价钱，否则，如果价格大于买入价格，则执行一次计算，判断是否是更大利润：\n\n```c++\nclass Solution {\npublic:\n    int maxProfit(vector<int>& prices) {\n        int buy = INT_MAX,sell,maxprofit = 0;\n        for(int i = 0;i < prices.size();i++){\n            if(prices[i] < buy) buy = prices[i];\n            else if(prices[i] > buy){ \n                sell = prices[i];       \n                if(sell - buy > maxprofit)  maxprofit = sell - buy;\n            }\n        }\n        return maxprofit;\n    }\n};\n```\n', 'https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (76, '2021-01-17 13:00:09.680', '2021-01-17 13:00:09.680', NULL, '斐波那契数列', '输入一个整数n，请你输出斐波那契数列的第n项\n\n', '斐波那契数列第n项的和取决于第n-1项的和还有第n-2项的和，即状态转移方程为：`f(n) = f(n-1) + f(n - 2)`（`f(0) = 0` `f(1) = 1`）\n\n```c++\nclass Solution {\npublic:\n    int Fibonacci(int n) {\n        if(n <= 0)\n            return 0;\n        \n        if(n == 1)    return 1;\n        \n        int num1 = 0,num2 = 1;\n        int res;\n        for(int i = 2;i <= n;i++){\n            res = num1 + num2;\n            num1 = num2;\n            num2 = res;\n        }\n        \n        return res;\n    }\n};\n```\n', 'https://www.nowcoder.com/practice/c6c7742f5ba7442aada113136ddea0c3?tpId=13&tqId=11160&tPage=1&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking', 'algorithm', '数学', 1, 1);
INSERT INTO `problems` VALUES (77, '2021-01-17 13:00:09.681', '2021-01-17 13:00:09.681', NULL, '分割回文串', '给定一个字符串 s，将 s 分割成一些子串，使每个子串都是回文串。\n\n返回 s 所有可能的分割方案。\n\n示例:\n\n```\n输入: \"aab\"\n输出:\n[\n  [\"aa\",\"b\"],\n  [\"a\",\"a\",\"b\"]\n]\n```\n\n', '#### 1）DFS\n\n对于字符串str,遍历从下标0开始的每一个子串：\n\n* 如果子串[0,i]是回文，则将子串添加到路径，递归处理剩余子串[i+1,n]\n* 如果子串[0,i]不是回文，处理下一个子串[0,i+1]\n* 如果字符串str为空，表示已经递归处理(DFS)到结尾，那么将这条路径添加到结果中\n* 每处理完一条路径，递归返回时，需要将之前添加到路径结尾的回文串[0,i]弹出\n\n> DFS会求重复子问题，比如”aabcd“，判断\"a\"是回文时，递归处理\"abcd\"时判断\"a\"是回文，进而 会求\"bcd\"；往后在判断\"aa\"是回文时，也会递归处理“bcd”\n\n```c++\nclass Solution {\npublic:\n    vector<vector<string>> partition(string s) {\n        vector<vector<string>> res;\n        vector<string> path;\n        \n        dfs(s,path,res);\n        \n        return res;\n    }\n    \n    void dfs(string s,vector<string> &path,vector<vector<string>> &res){\n        if(s.empty())   res.push_back(path);\n        \n        for(int len = 1;len <= s.size();len++){\n            string substr = s.substr(0,len);\n            if(isPalindrome(substr)){\n                path.push_back(substr);\n                dfs(s.substr(len),path,res);\n                path.pop_back();\n            }\n        }\n    }\n    \nprivate:\n    bool isPalindrome(const string &str){\n        int l = 0,r = str.size() - 1;\n        while(l < r){\n            if(str[l++] == str[r--])    continue;\n            else return false;\n        }\n        return true;\n    }\n};\n```\n\n#### 2）动态规划\n\n> 这种解法结合[单词拆分II](#单词拆分ii)一起分析，是求类似问题的通用解法\n\n对于`“aaabc”`：\n\n* 如果`“aaabc”`是回文，那么单独构成一个解\n* 如果`“aabc”`是回文，那么递归求出`“a”`的结果，在结果的每个解后面`push_back`回文`\"aabc\"`，得到了一组解\n* 如果`“abc”`是回文，那么递归求出`“aa”`的结果，在结果的每个解后面`push_back`回文`\"abc\"`，得到了一组解\n* ...\n* 如果`“c”`是回文，那么递归求出`“aabc”`的结果，在结果的每个解后面`push_back`回文`\"aabc\"`，得到了一组解\n\n在递归过程中，为了防止求重复子问题，使用`mem`保存状态，即每个子问题的解，如果后续需要求相同子问题的解，可以从`mem`中直接取出结果\n\n```c++\nclass Solution {\npublic:\n    vector<vector<string>> partition(string s) {\n        unordered_map<int,vector<vector<string>>> mem;\n        partition(s,s.length() - 1,mem);\n        return mem[s.length() - 1];\n    }\nprivate:\n    void partition(const string &s,int r,unordered_map<int,vector<vector<string>>> &mem){\n        if(mem.find(r) != mem.end())    return;\n        \n        if(isPalindrome(s.substr(0,r + 1)))\n            mem[r].push_back(vector<string>({s.substr(0,r + 1)}));\n        \n        for(int len = r;len >= 1;len--){//右边子串的长度\n            int leftLen = r + 1 - len;\n            const string &right = s.substr(leftLen,len);\n            if(isPalindrome(right)){\n                partition(s,leftLen - 1,mem);\n                for(vector<string> left : mem[leftLen - 1]){\n                    left.push_back(right);\n                    mem[r].push_back(left);\n                }\n            }\n        }\n    }\n    \n    bool isPalindrome(const string &s){\n        int i = 0,j = s.length() - 1;\n        while(i < j && s[i] == s[j]){\n            i++;\n            j--;\n        }\n        return i >= j;\n    }\n};\n```\n', 'https://leetcode.com/problems/palindrome-partitioning/description/', 'algorithm', '字符串', 1, 1);
INSERT INTO `problems` VALUES (78, '2021-01-17 13:00:09.681', '2021-01-17 13:00:09.681', NULL, '实现O(1)的插入删除与随机获取', '设计一个支持在平均 时间复杂度 O(1) 下，执行以下操作的数据结构。\n\n1. `insert(val)`：当元素 val 不存在时，向集合中插入该项。\n2. `remove(val)`：元素 val 存在时，从集合中移除该项。\n3. `getRandom`：随机返回现有集合中的一项。每个元素应该有相同的概率被返回。\n\n示例 :\n\n```\n// 初始化一个空的集合。\nRandomizedSet randomSet = new RandomizedSet();\n\n// 向集合中插入 1 。返回 true 表示 1 被成功地插入。\nrandomSet.insert(1);\n\n// 返回 false ，表示集合中不存在 2 。\nrandomSet.remove(2);\n\n// 向集合中插入 2 。返回 true 。集合现在包含 [1,2] 。\nrandomSet.insert(2);\n\n// getRandom 应随机返回 1 或 2 。\nrandomSet.getRandom();\n\n// 从集合中移除 1 ，返回 true 。集合现在包含 [2] 。\nrandomSet.remove(1);\n\n// 2 已在集合中，所以返回 false 。\nrandomSet.insert(2);\n\n// 由于 2 是集合中唯一的数字，getRandom 总是返回 2 。\nrandomSet.getRandom();\n```\n\n', '使用数组vector存储元素，使用map存储数字的`(值,下标)`\n\n* 插入一个元素时，直接插入vector尾部，并且将相应的`(值,下标)`插入map\n* 删除一个元素时，在map中查找这个元素在vector中的下标，然后将vector尾部元素移至即将被删除的元素所在的位置。更新map中尾元素的下标，并且删除vector尾元素，删除map中与被删除元素有关的项\n\n```c++\nclass RandomizedSet {\npublic:\n    /** Initialize your data structure here. */\n    RandomizedSet() {\n        //srand(time(0));\n    }\n    \n    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */\n    bool insert(int val) {\n        if(map.find(val) != map.end())  return false;\n        nums.emplace_back(val);\n        map[val] = nums.size() - 1;\n        return true;\n    }\n    \n    /** Removes a value from the set. Returns true if the set contained the specified element. */\n    bool remove(int val) {\n        if(map.find(val) == map.end())  return false;\n        int idxOfval = map[val];\n        int last = nums.back();\n        nums[idxOfval] = last;\n        map[last] = idxOfval;\n        map.erase(val);\n        nums.pop_back();\n        return true;\n    }\n    \n    /** Get a random element from the set. */\n    int getRandom() {\n        return nums[rand() % nums.size()];\n    }\nprivate:\n    vector<int> nums;               //存储元素\n    unordered_map<int,int> map;     //存储元素在nums中的下标\n};\n\n/**\n * Your RandomizedSet object will be instantiated and called as such:\n * RandomizedSet obj = new RandomizedSet();\n * bool param_1 = obj.insert(val);\n * bool param_2 = obj.remove(val);\n * int param_3 = obj.getRandom();\n */\n```\n', 'https://leetcode.com/problems/insert-delete-getrandom-o1/description/', 'algorithm', '设计', 1, 1);
INSERT INTO `problems` VALUES (79, '2021-01-17 13:00:09.683', '2021-01-17 13:00:09.683', NULL, '第K个排列', '给出集合 `[1,2,3,…,n]`，其所有元素共有 n! 种排列。\n\n按大小顺序列出所有排列情况，并一一标记，当 n = 3 时, 所有排列如下：\n\n1. `\"123\"`\n2. `\"132\"`\n3. `\"213\"`\n4. `\"231\"`\n5. `\"312\"`\n6. `\"321\"`\n\n给定 n 和 k，返回第 k 个排列。\n\n说明：\n\n* 给定 n 的范围是 [1, 9]。\n* 给定 k 的范围是 [1, n!]。\n\n示例 1:\n\n```\n输入: n = 3, k = 3\n输出: \"213\"\n```\n\n示例 2:\n\n```\n输入: n = 4, k = 9\n输出: \"2314\"\n```\n\n', '#### 1）方法一\n\n基于[下一个排列](#下一个排列)的方法\n\n可以在O(n)时间内求出下一个排列，因此初始化`res = \"123...\"`，调用k - 1次求下一个排列的方法，就可以得到第k个排列：\n\n* 时间复杂度：O(n \\* k)（k可能很大）\n* 空间复杂度：O(1)\n\n```c++\nclass Solution {\npublic:\n    string getPermutation(int n, int k) {\n        string res(n,\'0\');\n        for(int i = 0;i < n;i++)\n            res[i] += (i + 1);\n        \n        while(--k)  nextPermutation(res);\n        \n        return res;\n    }\nprivate:\n    void nextPermutation(string &s){\n        int idx1,idx2,len = s.length();\n        for(int i = len - 2;i >= 0;i--){\n            if(s[i] < s[i + 1]){\n                idx1 = i;\n                break;\n            }\n        } \n        \n        for(int i = len - 1;i > idx1;i--){\n            if(s[i] > s[idx1]){\n                idx2 = i;\n                break;\n            }\n        }\n        \n        swap(s[idx1],s[idx2]);\n        \n        int l = idx1 + 1,r = len - 1;\n        while(l < r)    swap(s[l++],s[r--]);\n    }\n};\n```\n\n#### 2）方法二\n\n当n为4时，可以按最高位划分成4组数：\n\n```\n1 + (2,3,4)\n2 + (1,3,4)\n3 + (1,2,4)\n4 + (1,2,3)\n```\n\n因此，如果知道每组数有多少个，那么就可以判断第k个排列在哪一组，从而可以设置结果的最高位数字。进一步，对于剩下的3个数字，也可以固定最高位，然后进一步判断要求的排列在哪一组，从而可以设置结果的次高位数字...，一直处理直到结果的所有位都被设置。为了判断每组数有多少个，要先求出`1!,2!,...,(n - 1)!`\n\n* 时间复杂度：O(n \\* n)（每次设置结果字符串中的一个数字，就需要O(n)的时间从list中删除这个数字，不过当k为0后，设置的每个数字都是list的开头数字，所以只需O(1)的时间就能删除）\n* 空间复杂度：O(1)\n\n```c++\nclass Solution {\npublic:\n    string getPermutation(int n, int k) {\n        list<int> nums;\n        vector<int> factorial(n,1);\n        string res(n,\'0\');\n        for(int i = 0;i < n;i++){\n            nums.push_back(i + 1);\n            factorial[i] = i > 0 ? factorial[i - 1] * i : 1;\n        }\n        \n        k--;\n        for(int i = 0;i < n;i++){\n            int idx = k / factorial[n - 1 - i];\n            list<int>::iterator itr = nums.begin();\n            while(idx--)    itr++;\n            res[i] += *itr;\n            nums.erase(itr);\n            k = k % factorial[n - 1 - i];\n        }\n        \n        return res;\n    }\n};\n```\n', 'https://leetcode.com/problems/permutation-sequence/description/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (80, '2021-01-17 13:00:09.684', '2021-01-17 13:00:09.684', NULL, '删除链表中等于给定值的所有节点', '删除链表中等于给定值 val 的所有节点。\n\n示例:\n\n```\n输入: 1->2->6->3->4->5->6, val = 6\n输出: 1->2->3->4->5\n```\n\n', '```c++\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* removeElements(ListNode* head, int val) {\n        ListNode node(0),*curr = &node;\n        node.next = head;\n        while(curr->next){\n            if(curr->next->val == val){\n                ListNode *tp = curr->next;\n                curr->next = curr->next->next;\n                delete tp;\n            }\n            else\n                curr = curr->next;\n        }\n        return node.next;\n    }\n};\n```\n', '', 'algorithm', '链表', 1, 1);
INSERT INTO `problems` VALUES (81, '2021-01-17 13:00:09.684', '2021-01-17 13:00:09.684', NULL, '填充同一层的兄弟节点', '给定一个二叉树\n\n```\nstruct TreeLinkNode {\n  TreeLinkNode *left;\n  TreeLinkNode *right;\n  TreeLinkNode *next;\n}\n```\n\n填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 `NULL`。\n\n初始状态下，所有 next 指针都被设置为 `NULL`。\n\n说明:\n\n* 你只能使用额外常数空间。\n* 使用递归解题也符合要求，本题中递归程序占用的栈空间不算做额外的空间复杂度。\n* 你可以假设它是一个完美二叉树（即所有叶子节点都在同一层，每个父节点都有两个子节点）。\n\n示例:\n\n给定完美二叉树，\n\n```\n     1\n   /  \\\n  2    3\n / \\  / \\\n4  5  6  7\n```\n\n调用你的函数后，该完美二叉树变为：\n\n```\n     1 -> NULL\n   /  \\\n  2 -> 3 -> NULL\n / \\  / \\\n4->5->6->7 -> NULL\n```\n\n', '题目要求使用常量空间，不然可以使用一个队列按层迭代遍历树，每遍历一层，将节点链接起来\n\n那么不用队列如何实现？题目假设所有叶子节点都在同一层，并且每个非叶子节点都有两个孩子，那么假设有如下树结构：\n\n```\n            node\n           /    \\\n        node    node\n       /    \\   /   \\\n     node node node node\n    /  \\  /  \\ /  \\  /  \\\n   n   n n   n n  n  n   n\n```\n\n假设对于树中的任意node，如果node不是叶子节点，那么可以将node的左子节点和右子节点连起来：\n\n```c++\nnode->left->next = node->right;\n```\n\n如果这样处理，那么按前序遍历整棵树，处理之后：\n\n```\n            node\n           /    \\\n        node----node\n       /    \\   /   \\\n     node-node node-node\n    /  \\  /  \\ /  \\  /  \\\n   n---n n---n n--n  n---n\n```\n\n这样的话，每一层的节点虽然能两两串起来，但是每对节点之间还是存在空隙，如第3层的中间两个节点没连接起来，最下层的第2个节点和第3个节点、第4个节点与第5个节点。。。\n\n那么怎么处理这些节点的链接？比方说第三层的第2个节点怎么连到第三层的第3个节点，肯定是不能等到遍历到第3层的第2个节点才处理，因为这样的话它无法获取到第3层的第3个节点。所以在遍历到其父节点时就进行处理：\n\n```\n//node为第二层的第1个节点\nnode->right->next = node->next-left;\n```\n\n**所以在前序遍历过程中，每遍历到一个节点时，要处理2个链接**：\n\n```c++\nnode->left->next = node->right;\nnode->right->next = node->next-left;\n```\n\n同样以前面的例子为例，整个处理过程如下：\n\n```\n//初始状态\n            node\n           /    \\\n        node    node\n       /    \\   /   \\\n     node node node node\n    /  \\  /  \\ /  \\  /  \\\n   n   n n   n n  n  n   n\n\n//处理根节点\n            node\n           /    \\\n        node----node\n       /    \\   /   \\\n     node node node node\n    /  \\  /  \\ /  \\  /  \\\n   n   n n   n n  n  n   n\n\n//处理根节点的左子节点\n            node\n           /    \\\n        node----node\n       /    \\   /   \\\n     node-node-node node\n    /  \\  /  \\ /  \\  /  \\\n   n   n n   n n  n  n   n\n\n//...\n            node\n           /    \\\n        node----node\n       /    \\   /   \\\n     node-node-node node\n    /  \\  /  \\ /  \\  /  \\\n   n---n-n   n n  n  n   n\n\n//...\n            node\n           /    \\\n        node----node\n       /    \\   /   \\\n     node-node-node node\n    /  \\  /  \\ /  \\  /  \\\n   n---n-n---n-n  n  n   n\n\n//处理根节点的右子节点\n            node\n           /    \\\n        node----node\n       /    \\   /   \\\n     node-node-node-node\n    /  \\  /  \\ /  \\  /  \\\n   n---n-n---n-n  n  n   n\n\n//...\n            node\n           /    \\\n        node----node\n       /    \\   /   \\\n     node-node-node-node\n    /  \\  /  \\ /  \\  /  \\\n   n---n-n---n-n--n--n   n\n\n//...\n            node\n           /    \\\n        node----node\n       /    \\   /   \\\n     node-node-node-node\n    /  \\  /  \\ /  \\  /  \\\n   n---n-n---n-n--n--n---n\n```\n\n```c++\n/**\n * Definition for binary tree with next pointer.\n * struct TreeLinkNode {\n *  int val;\n *  TreeLinkNode *left, *right, *next;\n *  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    void connect(TreeLinkNode *root) {\n        if(!root)\n            return;\n        \n        if(root->left && root->right)\n            root->left->next = root->right;\n        \n        if(root->right && root->next && root->next->left)\n            root->right->next = root->next->left;\n        \n        if(root->left)\n            connect(root->left);\n        if(root->right)\n            connect(root->right);\n    }\n};\n```\n', 'https://leetcode.com/problems/populating-next-right-pointers-in-each-node/description/', 'algorithm', '树', 1, 1);
INSERT INTO `problems` VALUES (82, '2021-01-17 13:00:09.686', '2021-01-17 13:00:09.686', NULL, '连续子数组的最大积', '给定一个整数数组 `nums` ，找出乘积最大的连续子数组（该数组至少包含一个数）\n\n示例 1:\n\n```\n输入: [2,3,-2,4]\n输出: 6\n解释: 子数组 [2,3] 有最大乘积 6。\n```\n\n示例 2:\n\n```\n输入: [-2,0,-1]\n输出: 0\n解释: 结果不能为 2, 因为 [-2,-1] 不是连续子数组。\n```\n\n', '假设`max_local[i]`表示以`nums[i]`结尾的连续子数组的最大积，如果能求出所有`max_local`，那么最大者就是答案\n\n现在看怎么求`max_local[i]`：\n\n* 如果`max_local[i - 1]`为`0`\n    - 当`nums[i]`大于等于`0`时，`max_local[i] = nums[i]`，与前面的子数组无关\n    - 当`nums[i]`小于`0`时，`max_local[i] = 0`\n* 否则，如果`nums[i]`与`max_local[i - 1]`符号相同，那么`max_local[i] = nums[i] * max_local[i - 1]`，此时将前面的连续子数组并入\n* 否则，如果`nums[i]`与`max_local[i - 1]`符号不同，那么`nums[i] * max_local[i - 1]`是以`nums[i]`结尾的连续子数组的最小积，设为`min_local[i]`，如果知道`min_local[i - 1]`，那么就能求出`max_local[i]`：`max_local[i] = min_local[i - 1] * nums[i]`\n\n因此，要求出max_local[i]，同时需要维护连续子数组的最小积——`min_local`数组，对上面的分析进行总结：因为`nums[i]`可能与`max_local[i - 1]`同号，可能异号，`max_local[i - 1]`也可能为`0`。所以`max_local[i]`取决于3个值：`max_local[i - 1]*nums[i]`、`min_local[i - 1]*nums[i]`、`nums[i]`（隐含了状态转移方程）\n\n```c++\nclass Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        if(nums.empty())    return 0;\n        \n        int max_global = nums[0];\n        int max_local = nums[0],min_local = nums[0];\n        \n        for(int i = 1;i < nums.size();i++){\n            int _max = max(max_local * nums[i],min_local * nums[i],nums[i]);\n            int _min = min(max_local * nums[i],min_local * nums[i],nums[i]);\n            max_local = _max;\n            min_local = _min;\n            if(max_local > max_global)  max_global = max_local;\n        }\n        \n        return max_global;\n    }\nprivate:\n    int max(int num1,int num2,int num3){\n        return num1 > num2 ? (num1 > num3 ? num1 : num3) : (num2 > num3 ? num2 : num3); \n    }\n    \n    int min(int num1,int num2,int num3){\n        return num1 < num2 ? (num1 < num3 ? num1 : num3) : (num2 < num3 ? num2 : num3);\n    }\n};\n```\n', 'https://leetcode.com/problems/maximum-product-subarray/description/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (83, '2021-01-17 13:00:09.686', '2021-01-17 13:00:09.686', NULL, '跳台阶', '', '一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法\n\n### 解法\n\n第一次可以选择跳1级也可以跳2级，因此 `f(n) = f(n-1) + f(n - 2)`，就是求斐波那契数列\n\n```c++\nclass Solution {\npublic:\n    int jumpFloor(int number) {\n        if(number < 1)\n            return 0;\n        if(number == 1)\n            return 1;\n        \n        int num1 = 1,num2 = 1;\n        int res;\n        for(int i = 2;i <= number;i++){\n            res = num1 + num2;\n            num1 = num2;\n            num2 = res;\n        }\n        \n        return res;\n    }\n};\n```\n', 'https://www.nowcoder.com/practice/8c82a5b80378478f9484d87d1c5f12a4?tpId=13&tqId=11161&tPage=1&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking', 'algorithm', '数学', 1, 1);
INSERT INTO `problems` VALUES (84, '2021-01-17 13:00:09.687', '2021-01-17 13:00:09.687', NULL, '丑数', '把只包含因子2、3和5的数称作丑数（Ugly Number）\n\n例如6、8都是丑数，但14不是，因为它包含因子7。 习惯上我们把1当做是第一个丑数。求按从小到大的顺序的第N个丑数\n\n', '丑数的判断：如果能被2整除，就连续除以2。如果能被3整除，就连续除以3。如果能被5整除，就连续除以5。如果最后得到的是1，这个数就是丑数，否则不是；\n\n#### 1）方法一\n\n从1开始逐个判断\n\n> 不是丑数的数也会进行判断，有多余时间开销\n\n#### 2）方法二\n\n创建数组nums保存已经找到的丑数，维护3个下标idx1、idx2、idx3\n\n* 因此下一个丑数是`min(nums[idx1] * 2,nums[idx2] * 3,nums[idx3] * 5)`\n\n每得到一个新的丑数，相应的下标加1，其余2个下标不变\n\n> 空间换时间，一个丑数应该是另一个丑数乘以2，3或5的结果\n\n```c++\nclass Solution {\npublic:\n    int GetUglyNumber_Solution(int index) {\n        if(index <= 0)//如果下标非法，返回0\n            return 0;\n        vector<int> uglyNumberArr;\n        uglyNumberArr.push_back(1);\n        \n        int idx2 = 0,idx3 = 0,idx5 = 0,curr = 0;\n        while(curr != index - 1){\n            if(uglyNumberArr[idx2] * 2 <= uglyNumberArr[curr]) {idx2++;}\n            if(uglyNumberArr[idx3] * 3 <= uglyNumberArr[curr]) {idx3++;}\n            if(uglyNumberArr[idx5] * 5 <= uglyNumberArr[curr]) {idx5++;}\n            \n            uglyNumberArr.push_back(minInThree(uglyNumberArr[idx2] * 2,uglyNumberArr[idx3] * 3,uglyNumberArr[idx5] * 5));\n            curr++;\n        }\n        \n        return uglyNumberArr[curr];\n    }\nprivate:\n    int minInThree(int a,int b,int c){\n        if(a < b)\n            return a < c ? a : c;\n        else\n            return b < c ? b : c;\n    }\n};\n```\n', 'https://www.nowcoder.com/practice/6aa9e04fc3794f68acf8778237ba065b?tpId=13&tqId=11186&tPage=2&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking', 'algorithm', '数学', 1, 1);
INSERT INTO `problems` VALUES (85, '2021-01-17 13:00:09.688', '2021-01-17 13:00:09.688', NULL, '用两个队列实现栈', '如题\n\n', '**插入**：元素插入包含元素的队列\n\n**删除(弹出栈顶)**：将包含n个元素的队列前n-1个元素移入另一个空队列，取出第n个元素\n\n> 删除的时间复杂度并不是O(1)\n', '', 'algorithm', '栈和队列', 1, 1);
INSERT INTO `problems` VALUES (86, '2021-01-17 13:00:09.688', '2021-01-17 13:00:09.688', NULL, '0~n中缺失的数字', '给定一个包含 0, 1, 2, ..., n 中 n 个数的序列，找出 0 .. n 中没有出现在序列中的那个数。\n\n示例 1:\n\n```\n输入: [3,0,1]\n输出: 2\n```\n\n示例 2:\n\n```\n输入: [9,6,4,2,3,5,7,0,1]\n输出: 8\n```\n\n说明:\n\n你的算法应具有线性时间复杂度。你能否仅使用额外常数空间来实现?\n\n', '#### 1）排序\n\n将每个数交换到下标i+1的位置，最后遍历一遍数组，如果某个下标的元素，不等于该下标加1，那么缺失的数就是这个下标加1，如果所有位置的元素都等于下标加1，那么缺失0：\n\n```c++\nclass Solution {\npublic:\n    int missingNumber(vector<int>& nums) {\n        for(int i = 0;i < nums.size();i++){\n            while(nums[i] != i + 1){\n                if(nums[i] != 0 && nums[nums[i] - 1] != nums[i])\n                    swap(nums[i],nums[nums[i] - 1]);\n                else\n                    break;\n            }\n        }\n        for(int i = 0;i < nums.size();i++)\n            if(nums[i] != i + 1)\n                return i + 1;\n        return 0;\n    }\n};\n```\n\n#### 2）高斯公式\n\n求0\\~n的和，然后计算数组中所有元素的和，相减就是缺失的数\n\n```c++\nclass Solution {\npublic:\n    int missingNumber(vector<int>& nums) {\n        int exceptSum = nums.size() * (nums.size() + 1) / 2;\n        int actualSum = 0;\n        for(int e : nums)   actualSum += e;\n        return exceptSum - actualSum;\n    }\n};\n```\n\n这个方法在数字量大的时候感觉会溢出\n\n#### 3）异或\n\n将0\\~n异或，然后与所有数组中的元素异或，因为两个相同的数异或为0，那么最后会剩下缺失的那个数：\n\n```c++\nclass Solution {\npublic:\n    int missingNumber(vector<int>& nums) {\n        int missing = nums.size();\n        for(int i = 0;i < nums.size();i++)\n            missing ^= i ^ nums[i];\n        return missing;\n    }\n};\n```\n', 'https://leetcode.com/problems/missing-number/description/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (87, '2021-01-17 13:00:09.689', '2021-01-17 13:00:09.689', NULL, '三数之和', '给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？找出所有满足条件且不重复的三元组。\n\n注意：答案中不可以包含重复的三元组。\n\n```\n例如, 给定数组 nums = [-1, 0, 1, 2, -1, -4]，\n\n满足要求的三元组集合为：\n[\n  [-1, 0, 1],\n  [-1, -1, 2]\n]\n```\n\n', '* 先排序\n* 以数组中每个元素为三个数中的第一个，在其后找到满足条件的剩下2个\n    - 因为已经排序，为了避免重复，所以相同元素只处理一次（也就是说，如果`nums[i] == nums[i - 1]`，说明以`nums[i]`为第一个元素的情况已经处理过，那么跳过，继续处理下一个数）\n* 为了找出剩余2个满足要求`target = 0 - nums[i]`的数，使用两个指针l和r，令`sum = nums[l] + nums[r]`\n    - 如果`sum > target`，则将`r`向左移动至第一个不等的元素处\n    - 如果`sum < target`，则将`l`向右移动至第一个不等的元素处\n    - 否则，满足要求，添加到结果中，并将`l`和`r`都移动至第一个不等的元素处\n\n```c++\nclass Solution {\npublic:\n    vector<vector<int>> threeSum(vector<int>& nums) {\n        if(nums.size() < 3) return vector<vector<int>>();\n        \n        sort(nums.begin(),nums.end());\n    \n        vector<vector<int>> res;\n        \n        for(int i = 0;i < nums.size() - 2;i++){\n            if(i == 0 || nums[i] != nums[i - 1]){\n                int target = 0 - nums[i];\n                int l = i + 1,r = nums.size() - 1;\n                while(l < r){\n                    int sum = nums[l] + nums[r];\n                    if(sum < target){\n                        while(l < r && nums[l + 1] == nums[l])    l++;\n                        l++;\n                    }\n                    else if(sum > target){\n                        while(l < r && nums[r - 1] == nums[r])    r--;\n                        r--;\n                    }  \n                    else{\n                        vector<int> triplet = {nums[i],nums[l],nums[r]};\n                        res.push_back(triplet);\n                        while(l < r && nums[l + 1] == nums[l])    l++;\n                        while(l < r && nums[r - 1] == nums[r])    r--;\n                        l++;r--;\n                    }\n                }\n            }\n        }\n        \n        return res;\n    }\n};\n```\n', 'https://leetcode.com/problems/3sum/description/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (88, '2021-01-17 13:00:09.690', '2021-01-17 13:00:09.690', NULL, '出现频率最高的k个数字', '给定一个非空的整数数组，返回其中出现频率前 k 高的元素。\n\n例如，\n\n给定数组 `[1,1,1,2,2,3]` , 和 k = 2，返回 `[1,2]`。\n\n注意：\n\n* 你可以假设给定的 k 总是合理的，1 ≤ k ≤ 数组中不相同的元素的个数。\n* 你的算法的时间复杂度必须优于 O(n log n) , n 是数组的大小。\n\n', '首先统计每个元素的频率，即出现次数\n\n然后创建桶数组，下标表示元素的频率，每个桶也是一个数组，内含出现频率为相应值的元素。例如bucket[i]表示出现频率为i的桶，内含所有出现i次的元素\n\n按频率”从高到低“输出k个数字\n\n```c++\nclass Solution {\npublic:\n    vector<int> topKFrequent(vector<int>& nums, int k) {\n        //统计每个元素出现的次数\n        unordered_map<int,int> map;\n        for(int num : nums)\n            map[num]++;\n        \n        //桶的下标表示元素出现的次数,所以下标越大出现越频繁\n        vector<vector<int>> bucket(nums.size() + 1);\n        for(auto p : map)\n            bucket[p.second].push_back(p.first);\n        \n        vector<int> res;\n        //从后面的桶往前面遍历\n        for(int i = bucket.size() - 1;i >= 0 && res.size() < k;--i){\n            //遍历桶中的每个数\n            for(int num : bucket[i]){\n                res.push_back(num);\n                if(res.size() == k)\n                    break;\n            }\n        }\n        \n        return res;\n    }\n};\n```\n', 'https://leetcode.com/problems/top-k-frequent-elements/description/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (89, '2021-01-17 13:00:09.691', '2021-01-17 13:00:09.691', NULL, '反转整数', '给定一个 32 位有符号整数，将整数中的数字进行反转。\n\n示例 1:\n\n```\n输入: 123\n输出: 321\n```\n\n示例 2:\n\n```\n输入: -123\n输出: -321\n```\n\n示例 3:\n\n```\n输入: 120\n输出: 21\n```\n\n注意:\n\n假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−2^31,  2^31 − 1]。根据这个假设，如果反转后的整数溢出，则返回 0\n\n', '每计算一次结果先乘以10，每次对10取模，加入结果中。注意溢出\n\n```c++\nclass Solution {\npublic:\n    int reverse(int x) {\n        long long res = 0;\n        bool negative = x < 0 ;\n        x = abs(x);\n        while(x){\n            res = res * 10 + x % 10;\n            x /= 10;\n        }\n        \n        if(negative)    res *= -1;\n        if(res < INT_MIN || res > INT_MAX)  return 0;\n        return res;\n    }\n};\n```\n', 'https://leetcode.com/problems/reverse-integer/description/', 'algorithm', '数学', 1, 1);
INSERT INTO `problems` VALUES (90, '2021-01-17 13:00:09.692', '2021-01-17 13:00:09.692', NULL, '单词转换的最少次数', '给出两个单词word1和word2，计算出将word1 转换为word2的最少操作次数。\n\n你总共三种操作方法：\n\n* 插入一个字符\n* 删除一个字符\n* 替换一个字符\n\n例如：给出 word1=`\"mart\"` 和 word2=`\"karma\"` 返回 `3`\n\n', '假设`state[i][j]`表示单词`word1.substr(0,i + 1)`转换成单词`word2.substr(0,j + 1)`的最少操作数：\n\n* 当`word1[i] == word2[j]`时，`state[i][j] = state[i - 1][j - 1]`\n* 否则，可以进行三种操作：\n    - 在`word1.substr(0,i + 1)`后面插入一个`word2[j]`，此时`state[i][j] = 1 + state[i][j - 1]`\n    - 将`word1.substr(0,i + 1)`最后一个字符删除，此时`state[i][j] = 1 + state[i - 1][j]`\n    - 将`word1.substr(0,i + 1)`最后一个字符替换成`word2[j]`，此时`state[i][j] = 1 + state[i - 1][j - 1]`\n    所以当`word1[i] != word2[j]`时，`state[i][j]`等于上面三者中的最小值\n\n```c++\nclass Solution {\npublic:\n    /**\n     * @param word1: A string\n     * @param word2: A string\n     * @return: The minimum number of steps.\n     */\n    int minDistance(string &word1, string &word2) {\n        // write your code here\n        if(word1 == \"\" || word2 == \"\")\n            return word1 == \"\" ? word2.length() : word1.length();\n            \n        int len1 = word1.length(),len2 = word2.length();\n        vector<vector<int>> state(len1,vector<int>(len2,0));\n        \n        state[0][0] = word1[0] == word2[0] ? 0 : 1;\n        \n        for(int j = 1;j < len2;j++)\n            state[0][j] = word1[0] == word2[j] ? j : 1 + state[0][j - 1];\n        for(int i = 1;i < len1;i++)\n            state[i][0] = word1[i] == word2[0] ? i : 1 + state[i - 1][0];\n        \n        for(int i = 1;i < len1;i++){\n            for(int j = 1;j < len2;j++){\n                if(word1[i] == word2[j])\n                    state[i][j] = state[i - 1][j - 1];\n                else{\n                    int times1 = 1 + state[i][j - 1];       //插入\n                    int times2 = 1 + state[i - 1][j];       //删除\n                    int times3 = 1 + state[i - 1][j - 1];   //替换\n                    state[i][j] = min(min(times1,times2),times3);\n                }\n            }\n        }\n        \n        return state[len1 - 1][len2 - 1];\n    }\n};\n```\n', 'https://www.lintcode.com/problem/edit-distance/description', 'algorithm', '字符串', 1, 1);
INSERT INTO `problems` VALUES (91, '2021-01-17 13:00:09.693', '2021-01-17 13:00:09.693', NULL, '跳步游戏', '给定一个非负整数数组，你最初位于数组的第一个位置。\n\n数组中的每个元素代表你在该位置可以跳跃的最大长度。\n\n判断你是否能够到达最后一个位置。\n\n示例 1:\n\n```\n输入: [2,3,1,1,4]\n输出: true\n解释: 从位置 0 到 1 跳 1 步, 然后跳 3 步到达最后一个位置。\n```\n\n示例 2:\n\n```\n输入: [3,2,1,0,4]\n输出: false\n解释: 无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永远不可能到达最后一个位置。\n```\n\n', '贪心，遍历数组中的每个位置，使用变量rest记录剩余可以前进的步数\n\n如果当前位置可以前进的步长大于剩余步长，则更新rest\n\n每前进一步rest减一，当rest为0时，更新rest为当前位置可以前进的步长。如果在到达最后位置之前，rest减为0，并且当前位置可以前进的步长也为0，说明无法继续前进，因此返回false\n\n> 整个过程一直更新rest，保存能前进的最大步长\n\n```c++\nclass Solution {\npublic:\n    bool canJump(vector<int>& nums) {\n        if(nums.empty())    return true;\n        \n        int rest = 0;//步长为非负数，这里初始化为0\n        \n        int i;\n        for(i = 0;i < nums.size();i++){\n            if(rest == 0 || nums[i] > --rest)   rest = nums[i];\n            if(rest == 0 && i < nums.size() - 1)   return false;\n        }\n    \n        return true;\n    }\n};\n```\n', 'https://leetcode.com/problems/jump-game/description/', 'algorithm', '图', 1, 1);
INSERT INTO `problems` VALUES (92, '2021-01-17 13:00:09.693', '2021-01-17 13:00:09.693', NULL, '最长连续序列', '给定一个未排序的整数数组，找出最长连续序列的长度\n\n要求算法的时间复杂度为 O(n)\n\n示例:\n\n```\n输入: [100, 4, 200, 1, 3, 2]\n输出: 4\n解释: 最长连续序列是 [1, 2, 3, 4]。它的长度为 4。\n```\n\n', '#### 1）排序\n\n先排序，排序完成后遍历一遍数组就能找出最长连续序列\n\n```c++\nclass Solution {\npublic:\n    int longestConsecutive(vector<int>& nums) {\n        sort(nums.begin(),nums.end());\n        int res = 0,sz = nums.size();\n        for(int i = 0;i < sz;i++){\n            int j = i,len = 1;\n            while(j + 1 < sz){\n                if(nums[j + 1] == nums[j] + 1)  len++;\n                else if(nums[j + 1] != nums[j]) break;\n                j++;\n            }\n            if(len > res)   res = len;\n            i = j; //j + 1已经不连续，所以i再++就到了第一个不连续的位置\n        }\n        return res;\n    }\n};\n```\n\n* **时间复杂度**：O(nlogn)（accept，但不符合要求）\n* **空间复杂度**：O(1)\n\n#### 2）hash表\n\n[参考](https://www.youtube.com/watch?v=rc2QdQ7U78I)\n\n使用一个hash表，key表示数，value表示以key为边界的连续序列的长度，很显然，当插入一个数字num时：\n\n* 如果num已经存在hash表中，那么以前已经处理过，那么忽略\n* 否则，又分为几种情况：\n    - 如果num-1在hash表中，表明num刚好和num-1结尾的序列相连，因此组成一个新的最大连续序列，此时更新区间左边界和右边界（即num）hash表项的value，即最大连续序列的长度\n    - 如果num+1在hash表中，表明num刚好和num+1开头的序列相连，因此组成一个新的最大连续序列，此时更新区间左边界（即num）和右边界hash表项的value，即最大连续序列的长度\n    - 如果num-1和num+1都在hash表中，说明num将两个连续序列相连，因此更新左边区间左边界hash项的value，以及右区间右边界hash项的value\n\n每次得到一个新的连续序列时，与结果判定，如果更大，那么更新结果。下图为[1,2,3,6,5,4]的示例：\n\n<div align=\"center\"> <img src=\"https://github.com/arkingc/note/raw/master/pic/leetcode-128-1.png\"/> </div>\n\n```c++\nclass Solution {\npublic:\n    int longestConsecutive(vector<int>& nums) {\n        unordered_map<int,int> map;\n        \n        int sz = nums.size(),res = 0;\n        for(int i = 0;i < sz;i++){\n            int idx = nums[i];\n            if(map.find(idx) == map.end()){ //只处理没有处理过的数\n                auto itr_l = map.find(idx - 1);\n                auto itr_r = map.find(idx + 1);\n                if(itr_l == map.end() && itr_r == map.end())//不与任何一个区间相连\n                    map[idx] = 1;\n                else if(itr_l != map.end() && itr_r != map.end()){//连接2个区间\n                    int left = itr_l->second,right = itr_r->second;\n                    map[idx - left] = left + right + 1;\n                    map[idx + right] = left + right + 1;\n                    map[idx] = left + right + 1;\n                }\n                else if(itr_l != map.end()){\n                    int left = itr_l->second;\n                    map[idx - left] = left + 1;\n                    map[idx] = left + 1;\n                }\n                else{\n                    int right = itr_r->second;\n                    map[idx + right] = right + 1;\n                    map[idx] = right + 1;\n                }\n                \n                if(map[idx] > res)  res = map[idx];\n            }\n        }\n        \n        return res;\n    }\n};\n```\n\n* **时间复杂度**：O(n)\n* **空间复杂度**：O(n)\n', 'https://leetcode.com/problems/longest-consecutive-sequence/description/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (93, '2021-01-17 13:00:09.694', '2021-01-17 13:00:09.694', NULL, '合并k个有序链表', '合并 k 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度\n\n示例:\n\n```\n输入:\n[\n  1->4->5,\n  1->3->4,\n  2->6\n]\n输出: 1->1->2->3->4->4->5->6\n```\n\n', '#### 1）建堆进行多路归并\n\n假设链表个数为k，那么可以使用k个链表的头节点建立一个k个节点的最小堆，每次从堆中删除堆顶节点，然后将被删除的节点所在链表的下一个节点添加到堆中。每删除一个节点就将被删除的节点链入结果链表中\n\n```c++\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    struct Compare{\n        bool operator()(const ListNode *n1,const ListNode *n2){\n            return n1->val > n2->val;\n        } \n    };\n    \n    ListNode* mergeKLists(vector<ListNode*>& lists) {\n        int k = lists.size();\n        \n        vector<ListNode*> min;\n        for(int i = 0;i < k;i++)\n            if(lists[i])\n                min.push_back(lists[i]);\n        make_heap(min.begin(),min.end(),Compare());\n\n        ListNode head(0),*curr = &head;\n        while(!min.empty()){\n            ListNode *next = min.front();\n            pop_heap(min.begin(),min.end(),Compare());\n            min.pop_back();\n            curr->next = next;\n            curr = next;\n            if(curr->next){\n                min.push_back(curr->next);\n                push_heap(min.begin(),min.end(),Compare());\n            }\n        }\n        \n        return head.next;\n    }\n};\n```\n\n设n为k个链表的节点总数：\n\n* **时间复杂度**：O(nlogk)\n* **空间复杂度**：O(k)\n\n#### 2）2路归并\n\n假设有k个链表，每次将k个链表中，每2个链表进行合并，可以得到k/2个新的链表。接着对k/2个链表中的每2个链表进行合并，又可以得到k/4个新的链表...如此反复，最终合并到只有1个链表\n\n```c++\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:  \n    ListNode* mergeKLists(vector<ListNode*>& lists) {\n        int sz = lists.size();\n        if(sz == 0) return NULL;\n        if(sz == 1) return lists[0];\n        \n        vector<ListNode*> mergeLists;\n        for(int i = 0;i < sz - 1;i += 2){\n            ListNode *l1 = lists[i],*l2 = lists[i + 1];\n            ListNode head(0) ,*curr = &head;\n            while(l1 && l2){\n                if(l1->val < l2->val){\n                    curr->next = l1;\n                    l1 = l1->next;\n                }else{\n                    curr->next = l2;\n                    l2 = l2->next;\n                }\n                curr = curr->next;\n            }\n            if(l1)  curr->next = l1;\n            else if(l2)  curr->next = l2;\n            mergeLists.push_back(head.next);\n        }\n        \n        if(sz % 2)  mergeLists.push_back(lists[sz - 1]);\n        \n        return mergeKLists(mergeLists);\n    }\n};\n```\n\n设n为k个链表的节点总数：\n\n* **时间复杂度**：O(nlogk)\n* **空间复杂度**：O(1)\n\n[这题的方法汇总](https://leetcode.com/problems/merge-k-sorted-lists/solution/)\n', 'https://leetcode.com/problems/merge-k-sorted-lists/description/', 'algorithm', '链表', 1, 1);
INSERT INTO `problems` VALUES (94, '2021-01-17 13:00:09.695', '2021-01-17 13:00:09.695', NULL, '旋转数组的最小数字', '把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素\n\n例如数组`{3,4,5,1,2}`为`{1,2,3,4,5}`的一个旋转，该数组的最小值为`1`\n\nNOTE：给出的所有元素都大于`0`，若数组大小为`0`，请返回`0`\n\n', '```c++\nclass Solution {\npublic:\n    int minNumberInRotateArray(vector<int> rotateArray) {\n        if(rotateArray.size() == 0)\n            return 0;\n        if(rotateArray.size() == 1)\n            return rotateArray[0];\n        \n        int sz = rotateArray.size();\n        int l = 0,r = sz - 1;\n        //如果没有旋转，不会进入循环，这样初始化会直接返回最左边元素\n        int mid = l;\n        while(rotateArray[r] <= rotateArray[l]){\n            if(r - l == 1){\n                mid = r;\n                break;\n            }\n            mid = (l + r) >> 1;\n            //如果首尾元素以及中间元素相等，那么没有办法判断中间元素到底是在左半部分还是右半部分，这时只能用顺序查找\n            if(rotateArray[l] == rotateArray[r] && rotateArray[l] == rotateArray[mid]){\n                int min = rotateArray[0];\n                for(int i = 1;i < sz;i++){\n                    if(rotateArray[i] < min) \n                        min = rotateArray[i];\n                }\n                return min;\n            }\n            if(rotateArray[mid] >= rotateArray[l])\n                l = mid;\n            else if(rotateArray[mid] <= rotateArray[r])\n                r = mid;\n        }\n        return rotateArray[mid];\n    }\n};\n```\n', 'https://www.nowcoder.com/practice/9f3231a991af4f55b95579b44b7a01ba?tpId=13&tqId=11159&tPage=1&rp=2&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (95, '2021-01-17 13:00:09.696', '2021-01-17 13:00:09.696', NULL, '数组中唯一只出现1次的数字', '在一个数组中除一个数字只出现一次之外，其他数字都出现了3次。请找出那个只出现一次的数字\n\n', '如果其余数字都出现2次，则使用异或很好解决，但是这里是3次，所以无法使用异或；但是还是可以沿用位运算的思路，如果一个数字出现3次，其二进制表示的每一位也出现3次，把所有出现3次的数字的二进制表示的每一位都分别加起来，每一位的和都能被3整除。我们把数组中所有数字的二进制表示的每一位都加起来。如果某一位的和能被3整除，那么只出现一次的数字二进制中对应的那一位是0，否则是1\n', '', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (96, '2021-01-17 13:00:09.696', '2021-01-17 13:00:09.696', NULL, '数组中最小的k个数', '输入`n`个整数，找出其中最小的`K`个数。例如输入`4,5,1,6,2,7,3,8`这8个数字，则最小的`4`个数字是`1,2,3,4`\n\n', '1. 基于partition函数的方法（不适合海量数据）\n2. 使用容器(最大堆)存储最小的k个数，遍历数组，当有更小的数时替换掉原容器中最大的（适合处理海量数据，即数组不能一次载入内存）​\n\n> 这个题改成求(从小到大)第k大的数也是这两种方法\n', 'https://www.nowcoder.com/practice/6a296eb82cf844ca8539b57c23e6e9bf?tpId=13&tqId=11182&tPage=2&rp=2&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (97, '2021-01-17 13:00:09.697', '2021-01-17 13:00:09.697', NULL, '八皇后', '在8\\*8的国际象棋上摆放8个皇后，使其不能相互攻击，即任意两个皇后不得处在同一行、同一列或者同一对角线上。问总共有多少种符合条件的摆法？\n\n', '由于`8`个皇后的任意两个不能处在同一行，那么肯定是每一个皇后占据一行。于是可以定义一个数组`ColumnIndex[8]`，数组中第`i`个数字表示位于第`i`行的皇后的列号。先把数组`ColumnIndex`的`8`个数字分别用`0~7`初始化，然后对数组`ColumnIndex`进行全排列。因为用不同的数字初始化了数组，所以任意两个皇后肯定不同列。只需判断每一个排列对应的8个皇后是不是在同一条对角线上，也就是对于数组的两个下标`i`和`j`，是否有`i-j==ColumnIndex[i]-ColumnIndex[j]`或者`j-i==ColumnIndex[i]-ColumnIndex[j]`\n', '', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (98, '2021-01-17 13:00:09.698', '2021-01-17 13:00:09.698', NULL, '复杂链表的复制', '输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针指向任意一个节点），返回结果为复制后复杂链表的head。（注意，输出结果中请不要返回参数中的节点引用，否则判题程序会直接返回空）\n\n', '#### 1）方法一\n\n* 复制原始链表上的每个节点，用next链接起来\n* 设置复制链表每个节点的random成员\n\n```c++\n/*\nstruct RandomListNode {\n    int label;\n    struct RandomListNode *next, *random;\n    RandomListNode(int x) :\n            label(x), next(NULL), random(NULL) {\n    }\n};\n*/\nclass Solution {\npublic:\n    RandomListNode* Clone(RandomListNode* pHead)\n    {\n        if(!pHead)\n            return nullptr;\n        \n        map<RandomListNode*,RandomListNode*> relationRMap,relationMap;\n        \n        RandomListNode* p = pHead;\n        RandomListNode *node = new RandomListNode(p->label);\n        relationRMap[p] = node;\n        relationMap[node] = p;\n        RandomListNode *head = node;\n        \n        while(p->next){\n            RandomListNode *nextnode = new RandomListNode(p->next->label);\n            node->next = nextnode;\n            node = nextnode;\n            \n            relationRMap[p->next] = nextnode;\n            relationMap[nextnode] = p->next;\n            \n            p = p->next;\n        }\n        \n        p = head;\n        while(p){\n            if(relationMap.find(p)->second->random)\n                p->random = relationRMap.find(relationMap.find(p)->second->random)->second;\n            p = p->next;\n        }\n        \n        return head;\n    }\n};\n```\n\n#### 2）方法二\n\n第一轮复制节点，使新节点链接在旧链表对应节点的后面：\n\n```\n        -------      -------      -------      -------\n... -> | 旧nd i | ->| 新nd i | ->|旧nd i+1| -> |新nd i+1| -> ... \n        -------      -------      -------      -------\n```\n\n第二轮遍历复制random，新节点的random指向对应旧节点random指向节点对应的新节点，因为现在对应的新节点在旧节点之后，所以新节点的random指向对应旧结点random指向节点的下一节点\n\n第三轮遍历将新链表的节点和旧链表的节点拆开，成为2个链表（这一步不能与第二轮遍历合并，因为后面的节点的random可能指向前面的节点，如果在设置random成员的同时拆链表，由于前面的节点已经拆开，所以新链表节点的random成员会指向旧链表的节点）\n\n```c++\n/**\n * Definition for singly-linked list with a random pointer.\n * struct RandomListNode {\n *     int label;\n *     RandomListNode *next, *random;\n *     RandomListNode(int x) : label(x), next(NULL), random(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    RandomListNode *copyRandomList(RandomListNode *head) {\n        if(!head)   return NULL;\n        \n        RandomListNode *p = head;\n        while(p){\n            RandomListNode *nd = new RandomListNode(p->label);\n            nd->next = p->next;\n            p->next = nd;\n            p = nd->next;\n        }\n        \n        //这一轮循环不能拆链表，因为后面的节点的random可能指向前面的节点，\n        //如果在设置random成员的同时拆链表，由于前面的节点已经拆开，所以新链表\n        //节点的random成员会指向旧链表的节点\n        p = head;\n        while(p){\n            if(p->random)\n                p->next->random = p->random->next;\n            p = p->next->next;\n        }\n        \n        p = head;\n        head = p->next; //更新head指向复制出的新链表的表头\n        while(p){\n            RandomListNode *tp = p->next;\n            p->next = tp->next;\n            p = p->next;\n            if(p)\n                tp->next = p->next;\n        }\n        \n        return head;\n    }\n};\n```\n', 'https://www.nowcoder.com/practice/f836b2c43afc4b35ad6adc41ec941dba?tpId=13&tqId=11178&tPage=2&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking', 'algorithm', '链表', 1, 1);
INSERT INTO `problems` VALUES (99, '2021-01-17 13:00:09.699', '2021-01-17 13:00:09.699', NULL, 'BST的后序遍历序列', '输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则输出Yes,否则输出No。假设输入的数组的任意两个数字都互不相同\n\n> 扩展：判断数组是不是某BST的前序遍历结果\n\n', '左->右->根  ---> 小->大->中\n\n首先判断序列是否满足这种大小关系，然后递归处理子树\n\n```c++\nclass Solution {\npublic:\n    bool VerifySquenceOfBST(vector<int> sequence) {\n        int sz = sequence.size();\n        \n        if(sz == 0)\n            return false;\n        \n        return VerifySquenceOfBST(sequence,0,sz-1);\n    }\n    \n    bool VerifySquenceOfBST(const vector<int> &sequence,int l,int r){\n        if(l >= r)\n            return true;\n        \n        int m,tp = l;\n        int root = sequence.at(r);\n        while(tp < r && sequence.at(tp++) < root){}\n        if(tp < r){\n            tp = tp - 1;\n            m = tp;\n            while(tp < r){\n                if(sequence.at(tp) < root){\n                    return false;\n                }\n                tp++;\n            }\n        }\n        \n        return VerifySquenceOfBST(sequence,l,m-1) && VerifySquenceOfBST(sequence,m,r-1);\n        \n    }\n};\n```\n', 'https://www.nowcoder.com/practice/a861533d45854474ac791d90e447bafd?tpId=13&tqId=11176&tPage=2&rp=2&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking', 'algorithm', '树', 1, 1);
INSERT INTO `problems` VALUES (100, '2021-01-17 13:00:09.699', '2021-01-17 13:00:09.699', NULL, '有序数组转BST', '将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。\n\n本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。\n\n示例:\n\n```\n给定有序数组: [-10,-3,0,5,9],\n\n一个可能的答案是：[0,-3,9,-10,null,5]，它可以表示下面这个高度平衡二叉搜索树：\n\n      0\n     / \\\n   -3   9\n   /   /\n -10  5\n```\n\n', '要平衡，那么左右子树节点首先必须相等，因此最开始选择数组中间的元素作为根节点，数组左边的元素用来构造左子树，右边的元素用来构造右子树。由于数组有序，因此满足BST的性质。选择左边数组的中间元素作为左子节点，右边数组的中间元素作为右子节点，从而又保证了以左右子节点为根节点的树的左子树和右子树的元素相等。这样递归构造，最终可以保证平衡：\n\n```c++\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\n        int l = 0,r = nums.size() - 1;\n        return sortedArrayToBSTCore(nums,l,r);\n    }\npublic:\n    TreeNode* sortedArrayToBSTCore(vector<int> &nums,int l,int r){\n        if(l > r)   return NULL;\n        \n        int mid = (l + r) >> 1;\n        TreeNode *root = new TreeNode(nums[mid]);\n        if(l < r){\n            root->left = sortedArrayToBSTCore(nums,l,mid - 1);\n            root->right = sortedArrayToBSTCore(nums,mid + 1,r);\n        }\n        \n        return root;\n    }\n};\n```\n', 'https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/description/', 'algorithm', '树', 1, 1);
INSERT INTO `problems` VALUES (101, '2021-01-17 13:00:09.700', '2021-01-17 13:00:09.700', NULL, '机器人的运动范围', '地上有一个`m`行和`n`列的方格。一个机器人从坐标`(0,0)`的格子开始移动，每一次只能向左，右，上，下四个方向移动一格，但是不能进入行坐标和列坐标的数位之和大于`k`的格子。 例如，当`k`为`18`时，机器人能够进入方格`(35,37)`，因为`3+5+3+7 = 18`。但是，它不能进入方格`(35,38)`，因为`3+5+3+8 = 19`。请问该机器人能够达到多少个格子？\n\n', '使用DFS，每到一个格子，如果格子复合要求，那么计数加1并继续使用DFS遍历，否则停止。为了防止重复走入同一格子，使用一个矩阵`flag`标记走过的位置\n\n```c++\nclass Solution {\npublic:\n    int movingCount(int threshold, int rows, int cols)\n    {\n        if(rows == 0 || cols == 0 || threshold < 0)    return 0;\n        \n        bool *flags = new bool[rows * cols];\n        for(int i = 0;i < rows * cols;i++)    flags[i] = false;\n        \n        int count = 0;\n        dfs(threshold,rows,cols,0,0,count,flags);\n        \n        delete flags;\n        return count;\n    }\n    \n    void dfs(int threshold,int rows,int cols,int row,int col,int &count,bool* flags){\n        if(row < 0 || row >= rows || col < 0 || col >= cols || flags[row * cols + col])\n            return;\n        \n        if(contain(threshold,row,col)){\n            count++;\n            flags[row * cols + col] = true;\n        }\n        else\n            return;\n        \n        dfs(threshold,rows,cols,row - 1,col,count,flags);//上\n        dfs(threshold,rows,cols,row + 1,col,count,flags);//下\n        dfs(threshold,rows,cols,row,col - 1,count,flags);//左\n        dfs(threshold,rows,cols,row,col + 1,count,flags);//右\n    }\n    \nprivate:\n    bool contain(const int &threshold,int row,int col){\n        int bitSum = 0;\n        while(row){\n            bitSum += row % 10;\n            row = row / 10;\n        } \n        \n        while(col){\n            bitSum += col % 10;\n            col = col / 10;\n        }\n        \n        return bitSum <= threshold;\n    }\n};\n```\n', 'https://www.nowcoder.com/practice/6e5207314b5241fb83f2329e89fdecc8?tpId=13&tqId=11219&tPage=4&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking', 'algorithm', '图', 1, 1);
INSERT INTO `problems` VALUES (102, '2021-01-17 13:00:09.701', '2021-01-17 13:00:09.701', NULL, '把字符串转换成整数', 'OJ链接：[牛客网](https://www.nowcoder.com/practice/1277c681251b4372bdef344468e4f26e?tpId=13&tqId=11202&tPage=3&rp=3&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking)、[Leetcode](https://leetcode.com/problems/string-to-integer-atoi/description/)\n\n实现 `atoi`，将字符串转为整数。\n\n在找到第一个非空字符之前，需要移除掉字符串中的空格字符。如果第一个非空字符是正号或负号，选取该符号，并将其与后面尽可能多的连续的数字组合起来，这部分字符即为整数的值。如果第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。\n\n字符串可以在形成整数的字符后面包括多余的字符，这些字符可以被忽略，它们对于函数没有影响。\n\n当字符串中的第一个非空字符序列不是个有效的整数；或字符串为空；或字符串仅包含空白字符时，则不进行转换。\n\n若函数不能执行有效的转换，返回 0。\n\n说明：\n\n假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−2^31,  2\n^31 − 1]。如果数值超过可表示的范围，则返回  INT_MAX (2^31 − 1) 或 INT_MIN (−2^31) 。\n\n示例 1:\n\n```\n输入: \"42\"\n输出: 42\n```\n\n示例 2:\n\n```\n输入: \"   -42\"\n输出: -42\n解释: 第一个非空白字符为 \'-\', 它是一个负号。\n     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。\n```\n\n示例 3:\n\n```\n输入: \"4193 with words\"\n输出: 4193\n解释: 转换截止于数字 \'3\' ，因为它的下一个字符不为数字。\n```\n\n示例 4:\n\n```\n输入: \"words and 987\"\n输出: 0\n解释: 第一个非空字符是 \'w\', 但它不是数字或正、负号。\n     因此无法执行有效的转换。\n```\n\n示例 5:\n\n```\n输入: \"-91283472332\"\n输出: -2147483648\n解释: 数字 \"-91283472332\" 超过 32 位有符号整数范围。 \n     因此返回 INT_MIN (−2^31) 。\n```\n\n', '* 使用long long保存中间结果，可以判断是否溢出\n* ”4 2“输出为4，不为42，即数字中间的空格不能忽略\n* \"+\"输出为0\n\n```c++\nclass Solution {\npublic:\n    int myAtoi(string str) {\n        int i = 0;\n        //找到第一个不为\' \'的位置\n        for(;i < str.length() && str[i] == \' \';i++) ;\n        if(i >= str.length())   return 0;\n        \n        bool negative = (str[i] == \'-\');\n        if(str[i] == \'+\' || str[i] == \'-\') i++;\n        \n        long long res = 0;\n        for(;i < str.length();i++){\n            if(str[i] > \'9\' || str[i] < \'0\')    break;\n            res = res * 10 + (str[i] - \'0\');\n            if(res > INT_MAX){\n                if(!negative)   return INT_MAX;\n                if(res - 1 > INT_MAX)   return INT_MIN;\n            }\n        }\n        \n        if(negative)    res *= -1;\n        return (int)res;\n    }\n};\n```\n', '', 'algorithm', '字符串', 1, 1);
INSERT INTO `problems` VALUES (103, '2021-01-17 13:00:09.702', '2021-01-17 13:00:09.702', NULL, '单词阶梯', '给定两个单词（beginWord 和 endWord）和一个字典，找到从 beginWord 到 endWord 的最短转换序列的长度。转换需遵循如下规则：\n\n1. 每次转换只能改变一个字母。\n2. 转换过程中的中间单词必须是字典中的单词。\n\n说明:\n\n* 如果不存在这样的转换序列，返回 0。\n* 所有单词具有相同的长度。\n* 所有单词只由小写字母组成。\n* 字典中不存在重复的单词。\n* 你可以假设 beginWord 和 endWord 是非空的，且二者不相同。\n\n示例 1:\n\n```\n输入:\nbeginWord = \"hit\",\nendWord = \"cog\",\nwordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\n\n输出: 5\n\n解释: 一个最短转换序列是 \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\",\n     返回它的长度 5。\n```\n\n示例 2:\n\n```\n输入:\nbeginWord = \"hit\"\nendWord = \"cog\"\nwordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\n\n输出: 0\n\n解释: endWord \"cog\" 不在字典中，所以无法进行转换。\n```\n\n', '#### 1）BFS\n\n<div align=\"center\"> <img src=\"https://github.com/arkingc/note/raw/master/pic/leetcode-127-1.png\"/> </div>\n\n```c++\nclass Solution {\npublic:\n    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {\n        if(beginWord.size() != endWord.size())  return 0;\n        \n        unordered_set<string> dict(wordList.begin(),wordList.end());\n        if(dict.find(endWord) == dict.end())    return 0;\n        \n        deque<string> q;    //for BFS\n        q.push_back(beginWord);\n        dict.erase(beginWord);\n        \n        int length = beginWord.size();\n        int step = 0;\n        \n        while(!q.empty()){\n            ++step;\n            for(int level = q.size();level > 0;level--){//一层一层处理\n                string s = q.front();\n                q.pop_front();\n                for(int i = 0;i < length;i++){\n                    char c = s[i];\n                    for(int j = \'a\';j <= \'z\';j++){\n                        s[i] = j;\n                        if(s == endWord)    return step + 1;\n                        else if(dict.find(s) == dict.end()) continue;\n                        q.push_back(s);\n                        dict.erase(s);\n                    }\n                    s[i] = c;\n                }\n            }\n        }\n        \n        return 0;\n    }\n};\n```\n\n#### 2）双向BFS\n\n<div align=\"center\"> <img src=\"https://github.com/arkingc/note/raw/master/pic/leetcode-127-2.png\"/> </div>\n\n```c++\nclass Solution {\npublic:\n    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {\n        if(beginWord.size() != endWord.size())  return 0;\n        \n        unordered_set<string> dict(wordList.begin(),wordList.end());\n        if(dict.find(endWord) == dict.end())    return 0;\n        \n        //双向BFS，所以需要两个队列，但是每次需要查找一个字符串是否在另一个队列中，\n        //所以使用unordered_set替代deque\n        unordered_set<string> bq = {beginWord};\n        unordered_set<string> eq = {endWord};\n        dict.erase(beginWord);\n        dict.erase(endWord);\n        \n        int length = beginWord.size();\n        int step = 0;\n        \n        while(!bq.empty() && !eq.empty()){\n            if(bq.size() > eq.size())//每次从首端和尾端选择节点较少的一层处理\n                std::swap(bq,eq);\n        \n            step++;\n            unordered_set<string> q;\n            \n            for(auto s : bq){//一层一层处理\n                for(int i = 0;i < length;i++){\n                    char c = s[i];\n                    for(int j = \'a\';j <= \'z\';j++){\n                        s[i] = j;\n                        if(eq.find(s) != eq.end())  return step + 1;\n                        else if(dict.find(s) == dict.end()) continue;\n                        q.insert(s);\n                        dict.erase(s);\n                    }\n                    s[i] = c;\n                }\n            }\n            \n            std::swap(q,bq);\n        }\n        \n        return 0;\n    }\n};\n```\n\n<div align=\"center\"> <img src=\"https://github.com/arkingc/note/raw/master/pic/leetcode-127-3.png\"/> </div>\n\n[参考](http://zxi.mytechroad.com/blog/searching/127-word-ladder/)\n', 'https://leetcode.com/problems/word-ladder/description/', 'algorithm', '字符串', 1, 1);
INSERT INTO `problems` VALUES (104, '2021-01-17 13:00:09.702', '2021-01-17 13:00:09.702', NULL, '两个字符串的最长公共子序列', '给出2个字符串，找出它们的最长公共子序列（LCS）。返回其长度\n\n例子：\n\n* For `\"ABCD\"` and `\"EDCA\"`, the LCS is `\"A\"` (or `\"D\"`, `\"C\"`), return `1`.\n* For `\"ABCD\"` and `\"EACB\"`, the LCS is `\"AC\"`, return `2`.\n\n', '假设两个字符串序列为`X`和`Y`，从结尾字符进行分析（设`n`和`m`为两个字符串的长度）：\n\n* 如果结尾字符相等，那么问题转换为求序列`X(n-1)`和`Y(m-1)`的最长公共子序列，即：`LCS(X(n-1),Y(m-1)) + 1`\n* 如果结尾字符不相等，那么问题转换成求`max(LCS(X(n-1),Y(m)),LCS(X(n),Y(m-1)))`\n\n为了防止求重复子问题，可以使用二维矩阵state保存状态（即每个LCS），从左上角往右下角进行求解\n\n复杂度：\n\n* **时间复杂度**：`O(n * m)`\n* **空间复杂度**：\n    - 无状态压缩：`O(n * m)`\n    - 状态压缩：`O(n)`或`O(m)`\n\n> 也可以从起始字符进行分析\n\n#### 1）无状态压缩\n\n```c++\nclass Solution {\npublic:\n    /**\n     * @param A: A string\n     * @param B: A string\n     * @return: The length of longest common subsequence of A and B\n     */\n    int longestCommonSubsequence(string &A, string &B) {\n        // write your code \n        if(A == \"\" || B == \"\")  return 0;\n        int len1 = A.length();\n        int len2 = B.length();\n        vector<vector<int> > state(len1,vector<int>(len2,0));\n        state[0][0] = A[0] == B[0] ? 1 : 0;\n        //DP\n        for(int i = 1;i < len1;i++) //第一列\n            state[i][0] = A[i] == B[0] ? 1 : state[i - 1][0];\n        for(int j = 1;j < len2;j++) //第一行\n            state[0][j] = A[0] == B[j] ? 1 : state[0][j - 1];\n        for(int i = 1;i < len1;i++)\n            for(int j = 1;j < len2;j++)\n                state[i][j] = A[i] == B[j] ? 1 + state[i - 1][j - 1] : max(state[i - 1][j],state[i][j - 1]);\n                \n        return state[len1 - 1][len2 - 1];\n    }\n};\n```\n\n#### 2）状态压缩\n\n```c++\nclass Solution {\npublic:\n    /**\n     * @param A: A string\n     * @param B: A string\n     * @return: The length of longest common subsequence of A and B\n     */\n    int longestCommonSubsequence(string &A, string &B) {\n        // write your code \n        if(A == \"\" || B == \"\")  return 0;\n        int len1 = A.length();\n        int len2 = B.length();\n        vector<int> state(len2,0);\n        state[0] = A[0] == B[0] ? 1 : 0;\n        //DP\n        for(int j = 1;j < len2;j++) //第一行\n            state[j] = A[0] == B[j] ? 1 : state[j - 1];\n        for(int i = 1;i < len1;i++){\n            int tmp = state[0],tmp2;\n            state[0] = A[i] == B[0] ? 1 : state[0];\n            for(int j = 1;j < len2;j++){\n                tmp2 = state[j];\n                state[j] = A[i] == B[j] ? 1 + tmp : max(state[j],state[j - 1]);\n                tmp = tmp2;\n            }\n        }        \n        return state[len2 - 1];\n    }\n};\n```\n', 'https://www.lintcode.com/problem/longest-common-subsequence/description', 'algorithm', '字符串', 1, 1);
INSERT INTO `problems` VALUES (105, '2021-01-17 13:00:09.703', '2021-01-17 13:00:09.703', NULL, '打家劫舍II', '你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都围成一圈，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。\n\n给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。\n\n示例 1:\n\n```\n输入: [2,3,2]\n输出: 3\n解释: 你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。\n```\n\n示例 2:\n\n```\n输入: [1,2,3,1]\n输出: 4\n解释: 你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。\n     偷窃到的最高金额 = 1 + 3 = 4 。\n```\n\n', '[前一题](#打家劫舍)可以求出从房子0~i中能偷窃到的最高金额。这一题不同的是，最后一个房子和第一个房子相连，房子呈环状分布。因此，在这种场景下，最后一个房子和第一个房子也和其它相邻的房子一样存在约束。即：\n\n* 如果盗窃了最后一个房子，那么不能盗窃第一个房子\n* 如果盗窃了第一个房子，那么不能盗窃最后一个房子\n\n如果能将环打破，那么就可以通过前一题求解。对于任一两个相邻的房子i和i+1。我们可以将问题分解成以下2个问题：\n\n* 不偷窃房子i，可以偷窃（可以不代表一定要偷窃）房子i+1\n* 不偷窃房子i+1，可以偷窃（可以不代表一定要偷窃）房子i\n\n最终解由上面2个问题解的较大者，而上面2个问题都将环打破，因此可以使用前一题的解法分别求出上面2个问题的解，然后进一步求出最终结果\n\n下面的代码i和i+1分别对应最后一个房子和第一个房子\n\n```c++\nclass Solution {\npublic:\n    int rob(vector<int>& nums) {\n        if(nums.size() == 1)    return nums[0];\n        return max(rob(nums,0,nums.size() - 2),rob(nums,1,nums.size() - 1));\n    }\nprivate:\n    int rob(vector<int> &nums,int i,int j){\n        if(i > j)   return 0;\n        //dp[i] = max{dp[i - 1],nums[i] + dp[i - 2]}\n        int include = nums[i],exclude = 0,res = include;\n        for(int m = i + 1;m <= j;m++){\n            int tp = max(include,nums[m] + exclude);\n            if(tp > res)    res = tp;\n            exclude = include;\n            include = tp;\n        }\n        return res;\n    }\n};\n```\n', 'https://leetcode.com/problems/house-robber-ii/description/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (106, '2021-01-17 13:00:09.703', '2021-01-17 13:00:09.703', NULL, '合并两个有序数组', '给定两个有序整数数组 nums1 和 nums2，将 nums2 合并到 nums1 中，使得 num1 成为一个有序数组。\n\n说明:\n\n* 初始化 nums1 和 nums2 的元素数量分别为 m 和 n。\n* 你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。\n\n示例:\n\n```\n输入:\nnums1 = [1,2,3,0,0,0], m = 3\nnums2 = [2,5,6],       n = 3\n\n输出: [1,2,2,3,5,6]\n```\n\n', '如果从前往后合并，那么可能会覆盖nums1中还未合并的元素，因此从后往前合并。\n\n使用3个变量，end1指向nums1中需要合并的尾元素的位置，end2指向nums2中需要合并的尾元素的位置，end指向nums1的末尾。每次从end1和end2指向元素中选出较大者，插入end位置：\n\n```c++\nclass Solution {\npublic:\n    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {\n        if(nums1.empty() || nums2.empty() || m < 0 || n < 0)  return ;\n        \n        int end1 = m - 1,end2 = n - 1,end = nums1.size() - 1;\n        while(end1 >= 0 && end2 >= 0){\n            if(nums1[end1] >= nums2[end2])\n                nums1[end--] = nums1[end1--];\n            else\n                nums1[end--] = nums2[end2--];\n        }\n        \n        while(end2 >= 0)\n            nums1[end--] = nums2[end2--];\n    }\n};\n```\n', 'https://leetcode.com/problems/merge-sorted-array/description/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (107, '2021-01-17 13:00:09.704', '2021-01-17 13:00:09.704', NULL, '最小覆盖子串', '给定一个字符串 S 和一个字符串 T，请在 S 中找出包含 T 所有字母的最小子串。\n\n示例：\n\n```\n输入: S = \"ADOBECODEBANC\", T = \"ABC\"\n输出: \"BANC\"\n```\n\n说明：\n\n* 如果 S 中不存这样的子串，则返回空字符串 \"\"\n* 如果 S 中存在这样的子串，我们保证它是唯一的答案\n\n', '首先使用一个map统计字符串t中每个字符出现的次数，要解决这个问题，就是要找到s的子串中，包含所有map中的字符，并且字符出现次数大于等于该字符在map中计数的子串。满足要求的最短子串就是答案\n\n使用一个变量total记录字符串t的长度，这个长度将用于判断滑动窗口中是否包含所有t中的字符。使用一个变量min表示满足要求的子串的最小长度，一个变量start表示该子串的起始下标。我们按如下假设遍历s进行处理：\n\n* 当遇到一个t中的字符时，将其map中的计数减1（可能小于0，因为s中可能包含多个这样的字符）\n    - 如果减1之前计数大于0，说明这个字符应该含入滑动窗口中，此时total减1\n    - 如果减1之前计数小于等于0，说明这个字符在s中出现了很多次，此时total不变\n* 当遇到一个不在t中出现的字符时，跳过\n\n显然，当total为0时，我们找到了一个满足要求的滑动窗口，这个滑动窗口中，包含了所有t中的字符。因此，我们比较这个滑动窗口的长度与min的值，如果小于min，说明找到了一个新的滑动窗口，因此更新min和start\n\n既然当total为0时，找到了一个满足要求的滑动窗口，那么下一步该怎么做？注意到我们找到的第一个滑动窗口是位于最左边，此时map中一些字符的计数可能小于0，因为t中的某些字符在该滑动窗口中出现了很多次。此时我们从左边开始释放字符，目的是希望在右边能找到一个新的相同字符，从而得到一个新的满足要求的滑动窗口。但是从左边开始，第一个在t中的字符可能是一个冗余的字符（即map中的计数小于0），因此释放了这个字符后，滑动窗口中还是拥有满足条件的字符，那么此时回收应该只增加其在map中的计数，但是不需要从右边开始滑动窗口（即不增加total）。因此，只有当遇到一个在t中，并且map中计数为0的字符，才需要将total加1。因为map计数为0说明滑动窗口中这个字符的数量“恰好”满足要求，因此可以开始从右边滑动窗口，也就是说，我们还应该从右边找到1个这样字符，使得map中其计数递减后，又变为0。\n\n```c++\nclass Solution {\npublic:\n    string minWindow(string s, string t) {\n        unordered_map<char,int> map;\n        for(char c : t) map[c]++;\n        \n        int start = 0,i = 0,min = INT_MAX;\n        int total = t.length();\n        for(int j = 0;j < s.length();j++){\n            if(map.find(s[j]) != map.end())//如果遇到一个t中的字符\n                if(map[s[j]]-- > 0)\n                    total--;\n            while(total == 0){//说明当前滑动窗口覆盖了t中的所有字符\n                if(j - i + 1 < min){\n                    min = j - i + 1;\n                    start = i; //更新start的位置\n                }\n                //从滑动窗口左边回收字符，寻找下一个满足条件的滑动窗口\n                //如果t中某些字符在滑动窗口中出现了多次，对于map中的计数会<0\n                //如果++没有大于0，说明是遇到一个在滑动窗口中出现多次的字符\n                //因此不增加total\n                if(map.find(s[i]) != map.end()){\n                    if(++map[s[i]] > 0)\n                        total++;\n                }\n                i++;\n            }\n        }\n        \n        return min == INT_MAX ? \"\" : s.substr(start,min);\n    }\n};\n```\n', 'https://leetcode.com/problems/minimum-window-substring/description/', 'algorithm', '字符串', 1, 1);
INSERT INTO `problems` VALUES (108, '2021-01-17 13:00:09.704', '2021-01-17 13:00:09.704', NULL, '正则表达式匹配', '给定一个字符串 (s) 和一个字符模式 (p)。实现支持 \'.\' 和 \'*\' 的正则表达式匹配。\n\n```\n\'.\' 匹配任意单个字符。\n\'*\' 匹配零个或多个前面的元素。\n匹配应该覆盖整个字符串 (s) ，而不是部分字符串。\n```\n\n说明:\n\n* s 可能为空，且只包含从 a-z 的小写字母。\n* p 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。\n\n示例 1:\n\n```\n输入:\ns = \"aa\"\np = \"a\"\n输出: false\n解释: \"a\" 无法匹配 \"aa\" 整个字符串。\n```\n\n示例 2:\n\n```\n输入:\ns = \"aa\"\np = \"a*\"\n输出: true\n解释: \'*\' 代表可匹配零个或多个前面的元素, 即可以匹配 \'a\' 。因此, 重复 \'a\' 一次, 字符串可变为 \"aa\"。\n```\n\n示例 3:\n\n```\n输入:\ns = \"ab\"\np = \".*\"\n输出: true\n解释: \".*\" 表示可匹配零个或多个(\'*\')任意字符(\'.\')。\n```\n\n示例 4:\n\n```\n输入:\ns = \"aab\"\np = \"c*a*b\"\n输出: true\n解释: \'c\' 可以不被重复, \'a\' 可以被重复一次。因此可以匹配字符串 \"aab\"。\n```\n\n示例 5:\n\n```\n输入:\ns = \"mississippi\"\np = \"mis*is*p*.\"\n输出: false\n```\n\n', '**动态规划**\n\n创建一个二维矩阵记录状态。`state[i][j]`表示`s[0~i-1]`能否和`p[0~j-1]`匹配：\n\n* 如果`p[j - 1] == \'*\'`，此时`p[j - 2]`可以使用也可以不使用\n    - 如果使用，`state[i][j] = ((p[j - 2] == \'.\' || p[j - 2] == s[i - 1]) && state[i - 1][j])`\n    - 如果不使用，`state[i][j] = state[i][j - 2]`\n* 如果`p[j - 1] == \'.\'`，此时`state[i][j] = state[i - 1][j - 1]`\n* 否则，`state[i][j] = p[j - 1] == s[i - 1] && state[i - 1][j - 1]`\n\n**注意二维bool矩阵的创建方法，这里不要使用vector**\n\n```c++\nclass Solution {\npublic:\n    bool isMatch(string s, string p) {\n        int len1 = s.length(),len2 = p.length();\n        \n        bool **state = new bool*[len1 + 1];\n        for(int i = 0;i <= len1;i++)\n            state[i] = new bool[len2 + 1];\n        \n        //第一列，p = \"\"\n        state[0][0] = true;\n        for(int i = 1;i <= len1;i++)    state[i][0] = false;\n        \n        //第一行，s = \"\"\n        state[0][1] = false;\n        for(int j = 2;j <= len2;j++)    state[0][j] = (p[j - 1] == \'*\') ? (state[0][j - 2]) : false;\n        \n        for(int i = 1;i <= len1;i++)\n            for(int j = 1;j <= len2;j++){\n                if(p[j - 1] == \'*\')\n                    state[i][j] = state[i][j - 2] || ((p[j - 2] == \'.\' || p[j - 2] == s[i - 1]) && state[i - 1][j]);\n                else if(p[j - 1] == \'.\')\n                    state[i][j] = state[i - 1][j - 1];\n                else\n                    state[i][j] = (p[j - 1] == s[i - 1]) && state[i - 1][j - 1];\n            }\n        \n        return state[len1][len2];\n    }\n};\n```\n', 'https://leetcode.com/problems/regular-expression-matching/description/', 'algorithm', '字符串', 1, 1);
INSERT INTO `problems` VALUES (109, '2021-01-17 13:00:09.705', '2021-01-17 13:00:09.705', NULL, '四数之和II', '给定四个包含整数的数组列表 A , B , C , D ,计算有多少个元组 ```(i, j, k, l)``` ，使得 ```A[i] + B[j] + C[k] + D[l] = 0```\n\n为了使问题简单化，所有的 A, B, C, D 具有相同的长度 N，且 0 ≤ N ≤ 500 。所有整数的范围在 -2^28 到 2^28 - 1 之间，最终结果不会超过 2^31 - 1 。\n\n例如:\n\n```\n输入:\nA = [ 1, 2]\nB = [-2,-1]\nC = [-1, 2]\nD = [ 0, 2]\n\n输出:\n2\n\n解释:\n两个元组如下:\n1. (0, 0, 0, 1) -> A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0\n2. (1, 1, 0, 0) -> A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0\n```\n\n', '每个数组中选取一个数，总共4个数构成一个排列，判断这4个数相加的结果是否等于0，因为每个数组的元素个数为n，那么总共有n^4种路径\n\n#### 1）暴力法\n\n通过上面的分析，可以使用4个循环，针对每条路径（每种排列），判断是否符合要求，符合则计数加1\n\n```c++\nclass Solution {\npublic:\n    int fourSumCount(vector<int>& A, vector<int>& B, vector<int>& C, vector<int>& D) {\n        int count = 0;\n        for(int num1 : A)\n            for(int num2 : B)\n                for(int num3 : C)\n                    for(int num4 : D)\n                        if(num1 + num2 + num3 + num4 == 0)\n                            count ++;\n        return count;  \n    }\n};\n```\n\n* **时间复杂度**：O(n^4)\n* **空间复杂度**：O(1)\n\n这种方法显然会超时：**28/48 test cases passed**\n\n#### 2）空间换时间1\n\n如果使用一个集合保存最后一个数组的数，那么只需求出前3个数的所有排列，然后判断集合中有多少个数等于-num1-num2-num3，那么计数就加多少。这样通过O(n)的空间换取O(n)的时间：\n\n```c++\nclass Solution {\npublic:\n    int fourSumCount(vector<int>& A, vector<int>& B, vector<int>& C, vector<int>& D) {\n        int count = 0;\n        \n        unordered_multiset<int> set;\n        for(int num4 : D)   set.insert(num4);\n        \n        for(int num1 : A)\n            for(int num2 : B)\n                for(int num3 : C)\n                        count += set.count(-num1-num2-num3);\n        return count;  \n    }\n};\n```\n\n* **时间复杂度**（忽略set.count）：O(n^3)\n* **空间复杂度**：O(n)\n\n这种方法还是会超时：**40/48 test cases passed**\n\n#### 3）空间换时间2\n\n进一步，可以使用set保存前2个数组所有元素相加的和，那么只需2层循环遍历后2个数组，然后计算在集合中有多少个元素等于-num3-num4就可以再用O(n)的空间复杂度换O(n)的时间复杂度：\n\n```c++\nclass Solution {\npublic:\n    int fourSumCount(vector<int>& A, vector<int>& B, vector<int>& C, vector<int>& D) {\n        int count = 0;\n        \n        unordered_multiset<int> set;\n        \n        for(int num1 : A)\n            for(int num2 : B)\n                set.insert(num1+num2);\n        \n        for(int num3 : C)\n            for(int num4 : D)\n                count += set.count(-num3-num4);\n        \n        return count;  \n    }\n};\n```\n\n* **时间复杂度**（忽略set.count）：O(n^2)\n* **空间复杂度**：O(n^2)\n\n这种方法依然会超时：**47/48 test cases passed**\n\n#### 4）空间换时间3\n\n观察发现，上面使用的是set，在计数时调用了count函数，这个函数还是会遍历相同的元素，因此存在一定开销。可以将set换成map，key为num1+num2的值，value为相同key的排列数。所以避免了调用count\n\n```c++\nclass Solution {\npublic:\n    int fourSumCount(vector<int>& A, vector<int>& B, vector<int>& C, vector<int>& D) {\n        int count = 0;\n        \n        unordered_map<int,int> map;\n        \n        for(int num1 : A)\n            for(int num2 : B)\n                map[num1+num2]++;\n        \n        for(int num3 : C)\n            for(int num4 : D){\n                auto itr = map.find(-num3-num4);\n                if(itr != map.end())\n                    count += itr->second;\n            }\n        \n        return count;  \n    }\n};\n```\n\n* **时间复杂度**：O(n^2)\n* **空间复杂度**：O(n^2)\n', 'https://leetcode.com/problems/4sum-ii/description/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (110, '2021-01-17 13:00:09.706', '2021-01-17 13:00:09.706', NULL, '打乱数组', '打乱一个没有重复元素的数组\n\n示例：\n\n```c++\n// 以数字集合 1, 2 和 3 初始化数组。\nint[] nums = {1,2,3};\nSolution solution = new Solution(nums);\n\n// 打乱数组 [1,2,3] 并返回结果。任何 [1,2,3]的排列返回的概率应该相同。\nsolution.shuffle();\n\n// 重设数组到它的初始状态[1,2,3]。\nsolution.reset();\n\n// 随机返回数组[1,2,3]打乱后的结果。\nsolution.shuffle();\n```\n\n', '> 洗牌中“乱”的定义应该是：对于一副54张牌的扑克，有54!种排序方式。洗牌算法应该能等概率地生成这54!种结果中的一种\n\nFisher–Yates shuffle洗牌算法的思想是，每次从未处理的牌中随机选择一个，与未处理牌中最后一张牌交换，从而打乱顺序。算法本身没有保证在取每个随机数的时候是等概率的，它保证的是可以等概率的生成给定数组的任一排列。对于n张牌的数组，处理过程如下：\n\n* 第一次：从[0,n-1]中，随机选择一个位置k1，交换位置k1和位置n-1的元素\n* 第二次：从[0,n-2]中，随机选择一个位置k2，交换位置k2和位置n-2的元素\n* ...\n\n当需要将一个数组(整形,字符...)中元素的顺序打乱时，可以使用Fisher–Yates shuffle洗牌算法\n\n```c++\nclass Solution {\npublic:\n    Solution(vector<int> nums) : _nums(nums) {\n        srand(time(0));\n    }\n    \n    /** Resets the array to its original configuration and return it. */\n    vector<int> reset() {\n        return _nums;\n    }\n    \n    /** Returns a random shuffling of the array. */\n    vector<int> shuffle() {\n        vector<int> res = _nums;\n        \n        for(int i = res.size() - 1;i >= 1;i--){\n            int random = rand() % (i + 1);\n            int tp = res[i];\n            res[i] = res[random];\n            res[random] = tp;\n        }\n        \n        return res;\n    }\nprivate:\n    vector<int> _nums;\n};\n```\n\n测试：\n\n```c++\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nconst int number = 54;  //牌总数\n\nvoid shuffle(vector<unsigned int> &plates){\n    //根据时间设置随机数种子\n    srand(time(0));\n\n    int k,tp;\n    for(int i = number - 1;i >= 1;i--){\n        //在0~i中得到一个随机数\n        k = rand() % (i + 1);\n        //交换plates[i]和plates[k]\n        tp = plates[i];\n        plates[i] = plates[k];\n        plates[k] = tp;\n    }\n}\n\nint main()\n{\n    vector<unsigned int> plates;\n    for(int i = 1;i <= number;i++)\n        plates.push_back(i);\n\n    shuffle(plates);//洗牌\n\n    for(auto e : plates)\n        cout << e << \" \";\n    cout << endl;\n}\n```\n', 'https://leetcode.com/problems/shuffle-an-array/description/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (111, '2021-01-17 13:00:09.706', '2021-01-17 13:00:09.706', NULL, '矩阵置零', '给定一个 m x n 的矩阵，如果一个元素为 0，则将其所在行和列的所有元素都设为 0。请使用原地算法。\n\n示例 1:\n\n```\n输入: \n[\n  [1,1,1],\n  [1,0,1],\n  [1,1,1]\n]\n输出: \n[\n  [1,0,1],\n  [0,0,0],\n  [1,0,1]\n]\n```\n\n示例 2:\n\n```\n输入: \n[\n  [0,1,2,0],\n  [3,4,5,2],\n  [1,3,1,5]\n]\n输出: \n[\n  [0,0,0,0],\n  [0,4,5,0],\n  [0,3,1,0]\n]\n```\n\n进阶:\n\n* 一个直接的解决方案是使用  O(mn) 的额外空间，但这并不是一个好的解决方案。\n* 一个简单的改进方案是使用 O(m + n) 的额外空间，但这仍然不是最好的解决方案。\n* 你能想出一个常数空间的解决方案吗？\n\n', '#### 1）使用辅助空间\n\n如果元素matrix\\[i\\]\\[j\\]为0，需要将第i行和第j列设置为0。如果直接在原矩阵上设置，那么如果第i行或第j列后面的元素会被覆盖，导致后续无法判断。可以使用一个额外的矩阵flags保存源矩阵，遍历flags，如果某个元素为0，那么将matrix中对应元素所在的行和列设置为0\n\n**空间代价**：![](http://latex.codecogs.com/gif.latex?\\\\\\\\$$O(m*n)$)\n\n```c++\nclass Solution {\npublic:\n    void setZeroes(vector<vector<int>>& matrix) {\n        vector<vector<int>> flags = matrix;\n        \n        for(int i = 0;i < flags.size();i++){\n            for(int j = 0;j < flags[i].size();j++){\n                if(flags[i][j] == 0){\n                    for(int m = 0;m < matrix.size();m++)    matrix[m][j] = 0;\n                    for(int n = 0;n < matrix[0].size();n++) matrix[i][n] = 0;\n                }\n            }\n        }\n    }\n};\n```\n\n#### 2）辅助空间优化\n\n方法一的空间代价为 ![](http://latex.codecogs.com/gif.latex?\\\\\\\\$$O(m*n)$)，考虑能否减少。可以使用两个数组rows和columns，如果元素matrix\\[i\\]\\[j\\]为0，那么\n将第i行和第j列设置为0，即![](http://latex.codecogs.com/gif.latex?\\\\\\\\$$rows[i]=0$)，![](http://latex.codecogs.com/gif.latex?\\\\\\\\$$columns[j]=0$)\n\n**空间代价**： ![](http://latex.codecogs.com/gif.latex?\\\\\\\\$$O(m+n)$)\n\n```c++\nclass Solution {\npublic:\n    void setZeroes(vector<vector<int>>& matrix) {\n        if(matrix.empty())  return;\n        \n        vector<int> rows(matrix.size(),-1),columns(matrix[0].size(),-1);\n        \n        for(int i = 0;i < matrix.size();i++)\n            for(int j = 0;j < matrix[i].size();j++)\n                if(matrix[i][j] == 0){\n                    rows[i] = 0;\n                    columns[j] = 0;\n                }\n        \n        for(int i = 0;i < rows.size();i++){\n            if(rows[i] == 0)\n                for(int j = 0;j < columns.size();j++)\n                    matrix[i][j] = 0;\n        }\n        for(int j = 0;j < columns.size();j++){\n            if(columns[j] == 0)\n                for(int i = 0;i < rows.size();i++)\n                    matrix[i][j] = 0;\n        }\n    }\n};\n```\n\n#### 3）原地修改\n\n可以使用第0行和第0列存储状态，从而避免空间开销\n\n![](../pic/leetcode-73-1.png)\n\n```c++\nclass Solution {\npublic:\n    void setZeroes(vector<vector<int>>& matrix) {\n        bool col0 = false;\n        int rows = matrix.size();\n        int columns = rows > 0 ? matrix[0].size() : 0;\n        \n        for(int i = 0;i < rows;i++){\n            if(matrix[i][0] == 0) col0 = true;\n            for(int j = 1;j < columns;j++){\n                if(matrix[i][j] == 0)\n                    matrix[i][0] = matrix[0][j] = 0;\n            }\n        }\n        \n        for(int j = 1;j < columns;j++)\n            if(matrix[0][j] == 0)\n                for(int i = 1;i < rows;i++)\n                    matrix[i][j] = 0;\n        \n        for(int i = 0;i < rows;i++)\n            if(matrix[i][0] == 0)\n                for(int j = 1;j < columns;j++)\n                    matrix[i][j] = 0;\n        \n        if(col0)\n            for(int i = 0;i < rows;i++)\n                matrix[i][0] = 0;\n    }\n};\n```\n\n**空间代价**： ![](http://latex.codecogs.com/gif.latex?\\\\\\\\$$O(1)$)\n', 'https://leetcode.com/problems/set-matrix-zeroes/description/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (112, '2021-01-17 13:00:09.707', '2021-01-17 13:00:09.707', NULL, '二进制中1的个数', '输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示\n\n', '#### 1）方法一\n\n首先把n和1做与运算，判断n的最低位是不是为1。接着把1左移一位得到2，再和n做与运算...（循环次数等于整数二进制的位数。unsigned int flag = 1）\n\n#### 2）方法二\n\n一个整数减去1之后再和原来的整数做位与运算，得到的结果相当于把整数二进制表示中最右边的1变成0；（有多少个1就循环多少次）\n\n```c++\nclass Solution {\npublic:\n     int  NumberOf1(int n) {\n         int count = 0;\n         \n         while(n){\n            n = (n - 1) & n;\n            count++;\n         }\n         \n         return count;\n     }\n};\n```\n', 'https://www.nowcoder.com/practice/8ee967e43c2c4ec193b040ea7fbb10b8?tpId=13&tqId=11164&tPage=1&rp=3&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking', 'algorithm', '数学', 1, 1);
INSERT INTO `problems` VALUES (113, '2021-01-17 13:00:09.708', '2021-01-17 13:00:09.708', NULL, 'BST转双链表', '输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向\n\n', '中序遍历，​​当前节点之前的节点已经处理好，使用一个变量保存链表的最后一个节点，对当前节点，处理它和链表最后一个节点的指向关系，并更新链表的最后一个节点。\n\n使用指针的指针记录链表的最后一个节点，如果使用指针，函数调用修改的是形参last指针，调用返回后实参last并未修改\n\n```c++\n/*\nstruct TreeNode {\n    int val;\n    struct TreeNode *left;\n    struct TreeNode *right;\n    TreeNode(int x) :\n            val(x), left(NULL), right(NULL) {\n    }\n};*/\nclass Solution {\npublic:\n    TreeNode* Convert(TreeNode* pRootOfTree)\n    {\n        TreeNode *last = nullptr;\n        \n        ConvertCore(pRootOfTree,&last);\n        \n        while(last && last->left){\n            last = last->left;\n        }\n        \n        return last;\n    }\n    \n    void ConvertCore(TreeNode* pRootOfTree,TreeNode **last)\n    {\n        if(!pRootOfTree)\n            return;\n        \n        ConvertCore(pRootOfTree->left,last);\n        pRootOfTree->left = *last;\n        if(*last)\n            (*last)->right = pRootOfTree;\n        *last = pRootOfTree;\n        ConvertCore(pRootOfTree->right,last);\n    }\n};\n```\n', 'https://www.nowcoder.com/practice/947f6eb80d944a84850b0538bf0ec3a5?tpId=13&tqId=11179&tPage=2&rp=2&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking', 'algorithm', '树', 1, 1);
INSERT INTO `problems` VALUES (114, '2021-01-17 13:00:09.708', '2021-01-17 13:00:09.708', NULL, '二叉树的镜像', '操作给定的二叉树，将其变换为源二叉树的镜像\n\n例如：\n\n```\n      8\n     /  \\\n    6   10\n   / \\  / \\\n  5  7 9 11\n\n对应的镜像为：\n\n      8\n     /  \\\n    10   6\n   / \\  / \\\n  11 9 7  5\n```\n\n', '#### 1）迭代\n\n```c++\n/*\nstruct TreeNode {\n    int val;\n    struct TreeNode *left;\n    struct TreeNode *right;\n    TreeNode(int x) :\n            val(x), left(NULL), right(NULL) {\n    }\n};*/\nclass Solution {\npublic:\n    void Mirror(TreeNode *pRoot) {\n        stack<TreeNode*> st;\n        if(pRoot)\n            st.push(pRoot);\n        \n        TreeNode *curr,*tp;\n        while(!st.empty()){\n            curr = st.top();\n            st.pop();\n            \n            tp = curr->left;\n            curr->left = curr->right;\n            curr->right = tp;\n            \n            if(curr->left)\n                st.push(curr->left);\n            if(curr->right)\n                st.push(curr->right);\n        }\n    }\n};\n```\n', 'https://www.nowcoder.com/practice/564f4c26aa584921bc75623e48ca3011?tpId=13&tqId=11171&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking', 'algorithm', '树', 1, 1);
INSERT INTO `problems` VALUES (115, '2021-01-17 13:00:09.708', '2021-01-17 13:00:09.708', NULL, '左上角到右下角的路径数II', '一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。\n\n机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。\n\n现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？\n\n网格中的障碍物和空位置分别用 `1` 和 `0` 来表示。\n\n说明：m 和 n 的值均不超过 100。\n\n示例 1:\n\n```\n输入:\n[\n  [0,0,0],\n  [0,1,0],\n  [0,0,0]\n]\n输出: 2\n解释:\n3x3 网格的正中间有一个障碍物。\n从左上角到右下角一共有 2 条不同的路径：\n1. 向右 -> 向右 -> 向下 -> 向下\n2. 向下 -> 向下 -> 向右 -> 向右\n```\n\n', '使用`state(i,j)`表示从起点到`(i,j)`的路径数，那么：\n\n* 如果`(i,j)`为障碍物，`state(i,j) = 0`\n* 否则，可以从`(i - 1,j)`往下走1步到达`(i,j)`，也可以从`(i,j - 1)`往右走一步到达`(i,j)`，因此`state(i,j) = state(i - 1,j) + state(i,j - 1)`\n\n以下解法进行了状态压缩（使用一维矩阵）：\n\n```c++\nclass Solution {\npublic:\n    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {\n        if(obstacleGrid.empty())    return 0;\n        \n        int rows = obstacleGrid.size(),cols = obstacleGrid[0].size();\n        vector<int> state(cols);\n        state[0] = obstacleGrid[0][0] == 1 ? 0 : 1;\n        for(int j = 1;j < cols;j++){\n            if(obstacleGrid[0][j] == 1)     state[j] = 0;\n            else                            state[j] = state[j - 1];\n        }\n        \n        for(int i = 1;i < rows;i++){\n            if(obstacleGrid[i][0] == 1) state[0] = 0;\n            for(int j = 1;j < cols;j++){\n                if(obstacleGrid[i][j] == 1) state[j] = 0;\n                else                        state[j] += state[j - 1];\n            }\n        }\n        \n        return state[cols - 1];\n    }\n};\n```\n', 'https://leetcode.com/problems/unique-paths-ii/description/', 'algorithm', '图', 1, 1);
INSERT INTO `problems` VALUES (116, '2021-01-17 13:00:09.709', '2021-01-17 13:00:09.709', NULL, '查找某个数是否在40亿个数当中', '给40亿个不重复的unsigned int的整数，没排过序，然后再给一个数，如何快速判断这个数是否在40亿个数当中？\n\n', 'unsigned int最多有2^32个数，用位图的方法，申请512MB的内存，一个bit位代表一个unsigned int，读入40亿个数，设置相应的bit位，读入要查询的数，查看相应bit位是否为1，为1表示存在，为0表示不存在\n', '', 'algorithm', '海量数据', 1, 1);
INSERT INTO `problems` VALUES (117, '2021-01-17 13:00:09.710', '2021-01-17 13:00:09.710', NULL, '四数之和', '给定一个包含 n 个整数的数组 `nums` 和一个目标值 `target`，判断 `nums` 中是否存在四个元素 a，b，c 和 d ，使得 a + b + c + d 的值与 `target` 相等？找出所有满足条件且不重复的四元组。\n\n注意：答案中不可以包含重复的四元组。\n\n示例：\n\n```\n给定数组 nums = [1, 0, -1, 0, -2, 2]，和 target = 0。\n\n满足要求的四元组集合为：\n[\n  [-1,  0, 0, 1],\n  [-2, -1, 1, 2],\n  [-2,  0, 0, 2]\n]\n```\n\n', '其实总体思路和[三数之和](#三数之和)一样\n\n* 先排序，然后以数组中每个元素为4个候选数之一，找出其余3个元素。为了防止重复，相邻的重复元素只处理一次\n* 在选好第一个数`a`后，分别将该元素后的每一个元素`b`作为剩余3个候选数之一，在`b`后找到剩余的2个候选数。为了防止重复，相邻的重复元素`b`只处理一次\n* 为了找到最后2个数，使用2个指针`l`和`r`，分别指向剩余元素的第一个和最后一个，根据`nums[i] + nums[r]`与`target - a - b`的大小来更新`l`和`r`。当找到了组复合要求的解时，可能`l`后面和`r`前面的元素是重复元素，因此需要跳过所有重复元素，防止冗余\n\n> 作为一个优化。在选择`a`和`b`时，由于数组已经排好序，`a`肯定不能超过`target / 4`，`b`肯定不能超过`(target - a) / 3`，因此可以对后面的分支进行剪枝，提前结束循环\n\n```c++\nclass Solution {\npublic:\n    vector<vector<int>> fourSum(vector<int>& nums, int target) {\n        sort(nums.begin(),nums.end());\n        \n        vector<vector<int>> res;\n        int sz = nums.size();\n        for(int i = 0;i < sz - 3 && nums[i] <= target / 4;i++){\n            if(i > 0 && nums[i - 1] == nums[i]) continue;\n            for(int j = i + 1;j < sz - 2 && nums[j] <= (target - nums[i]) / 3;j++){\n                if(j > i + 1 && nums[j] == nums[j - 1]) continue;\n                int l = j + 1,r = sz - 1,_target = target - nums[i] - nums[j];\n                while(l < r){\n                    //cout << \"i:\" << i << \"  j:\" << j << \"  l:\" << l << \"  r:\" << r << endl;\n                    if(nums[l] + nums[r] > _target)         r--;\n                    else if(nums[l] + nums[r] < _target)    l++;\n                    else{\n                        res.push_back(vector<int>{nums[i],nums[j],nums[l],nums[r]});\n                        while(l < r && nums[l + 1] == nums[l])  l++;\n                        while(l < r && nums[r - 1] == nums[r])  r--;\n                        l++,r--;\n                    }\n                }\n            }\n        }\n        \n        return res;\n    }\n};\n```\n', 'https://leetcode.com/problems/4sum/description/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (118, '2021-01-17 13:00:09.710', '2021-01-17 13:00:09.710', NULL, '手写实现智能指针', '实现一个根据引用计数管理资源的智能指针\n\n', '> 仅供参考\n\n#### 1）不使用辅助类\n\n```c++\n/****************************************************************\n *\n *       SharedPtr<T>               T                  int\n *       -------------        --------------       ----------\n *      | ptr | count |   -->|              |  |->|          |\n *       --|------|---    |   --------------   |   ----------\n *         |      |       |                    |\n *         |------|-------|                    |\n *                |                            |\n *                |----------------------------|\n *\n ****************************************************************/\n\ntemplate <typename T>\nclass SharedPtr{\npublic:\n    /* 构造函数 */\n    SharedPtr() : ptr(new T()),count(new int(1)) {}\n    explicit SharedPtr(T *src) : ptr(src),count(new int(1)) {}\n    explicit SharedPtr(T value) : ptr(new T(value)),count(new int(1)) {}\n    /* 拷贝构造函数 */\n    SharedPtr(const SharedPtr &rhs) : ptr(rhs.ptr) , count(rhs.count)\n    {\n        ++(*count); //增加引用计数\n    }\n    /* 拷贝赋值运算符 */\n    SharedPtr& operator= (const SharedPtr &rhs)\n    {\n        //能处理自赋值\n        ++(*(rhs.count));     //递增rhs管理的资源的引用计数\n        if(--(*count) == 0) {  //递减自身管理的资源的引用计数\n            delete ptr;\n            delete count;\n        }\n        ptr = rhs.ptr;\n        count = rhs.count;\n        return *this;\n    }\n    /* 析构函数 */\n    ~SharedPtr() {\n        if(--(*count) == 0) {\n            delete ptr;\n            delete count;\n        }\n    }\n\n    /* 获取资源 */\n    T* get() const {return ptr;}\nprivate:\n    T *ptr;     //原始指针\n    int *count; //引用计数\n};\n```\n\n#### 2）使用辅助类\n\n```c++\n/****************************************************************\n *\n *       SharedPtr<T>         RefPtr<T>              T\n *       -----------        --------------       ----------\n *      |    ptr    |   -->| _src | count |  -->|          |\n *       -----|-----    |   ---|----------   |   ----------\n *            |---------|      |-------------|\n *\n ****************************************************************/\n\ntemplate <typename> class SharedPtr;\n\n//辅助类\ntemplate <typename T>\nclass RefPtr\n{\n    friend class SharedPtr<T>;\n\n    RefPtr() : _src(new T()),count(1) {}\n    RefPtr(T *src) : _src(src),count(1) {}\n    RefPtr(T value) : _src(new T(value)),count(1) {}\n    ~RefPtr() { delete _src; }\n\n    int count;  //引用计数\n    T *_src;    //原始指针\n};\n\ntemplate <typename T>\nclass SharedPtr{\npublic:\n    /* 构造函数 */\n    SharedPtr() : ptr(new RefPtr<T>()) {}\n    explicit SharedPtr(T *src) : ptr(new RefPtr<T>(src)) {}\n    explicit SharedPtr(T value) : ptr(new RefPtr<T>(value)) {}\n    /* 拷贝构造函数 */\n    SharedPtr(const SharedPtr &rhs) : ptr(rhs.ptr)\n    {\n        ++(ptr->count); //增加引用计数\n    }\n    /* 拷贝赋值运算符 */\n    SharedPtr& operator= (const SharedPtr &rhs)\n    {\n        //能处理自赋值\n        ++(rhs.ptr->count);     //递增rhs管理的资源的引用计数\n        if(--(ptr->count) == 0) //递减自身管理的资源的引用计数\n            delete ptr;\n        ptr = rhs.ptr;\n        return *this;\n    }\n    /* 析构函数 */\n    ~SharedPtr() {\n        if(--(ptr->count) == 0)\n            delete ptr;\n    }\n\n    /* 获取资源 */\n    T* get() const {return ptr->_src;}\nprivate:\n    RefPtr<T> *ptr;    //辅助类对象指针\n};\n```\n', '', 'algorithm', 'c/c++基础', 1, 1);
INSERT INTO `problems` VALUES (119, '2021-01-17 13:00:09.711', '2021-01-17 13:00:09.711', NULL, '连续子数组的最大和', '给定一个整数数组 `nums`，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。\n\n示例:\n\n```\n输入: [-2,1,-3,4,-1,2,1,-5,4],\n输出: 6\n解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。\n```\n\n进阶:\n\n如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的分治法求解。\n\n', '令sum[i]表示所有以位置i的元素结尾的连续子数组的最大和，状态转移方程如下：\n\n* 当 `sum[i] <= 0` 时，`sum[i+1] = array[i + 1]`\n* 当 `sum[i] > 0` 时，`sum[i+1] = sum[i] + array[i + 1]`\n\n那么连续子数组的最大和，就是`max{sum[0],sum[1],...,sum[n-1]}`\n\n```c++\nclass Solution {\npublic:\n    int FindGreatestSumOfSubArray(vector<int> array) {\n        if(array.size() == 0)   return 0;\n\n        int sum = array[0],res = array[0];\n        int sz = array.size();\n        for(int i = 1;i < sz;i++){\n            if(sum > 0)    sum += array[i];\n            else           sum = array[i];\n            if(sum > res)  res = sum;\n        }\n        \n        return res;\n    }\n};\n```\n', 'https://www.nowcoder.com/practice/459bd355da1549fa8a49e350bf3df484?tpId=13&tqId=11183&tPage=2&rp=2&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (120, '2021-01-17 13:00:09.712', '2021-01-17 13:00:09.712', NULL, '不含重复元素数组的全排列', '给定一个没有重复数字的序列，返回其所有可能的全排列。\n\n示例:\n\n```\n输入: [1,2,3]\n输出:\n[\n  [1,2,3],\n  [1,3,2],\n  [2,1,3],\n  [2,3,1],\n  [3,1,2],\n  [3,2,1]\n]\n```\n\n', '和“字符的全排列”一样，数组中的每个元素和后面的元素交换，然后继续处理剩余数组。处理完后恢复交换之前的状态\n\n```c++\nclass Solution {\npublic:\n    vector<vector<int>> permute(vector<int>& nums) {\n        vector<vector<int>> res;\n        \n        permute(nums,0,res);\n        \n        return res;\n    }\nprivate:\n    void permute(vector<int> &nums,int idx,vector<vector<int>> &res){\n        if(idx == nums.size())\n            res.push_back(nums);\n        \n        for(int i = idx;i < nums.size();i++){\n            int tp = nums[i];\n            nums[i] = nums[idx];\n            nums[idx] = tp;\n            \n            permute(nums,idx + 1,res);\n            \n            tp = nums[i];\n            nums[i] = nums[idx];\n            nums[idx] = tp;\n        }\n    }    \n};\n```\n', 'https://leetcode.com/problems/permutations/description/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (121, '2021-01-17 13:00:09.712', '2021-01-17 13:00:09.712', NULL, '数组中的逆序对', '在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组,求出这个数组中的逆序对的总数`P`。并将`P`对`1000000007`取模的结果输出。 即输出`P%1000000007`\n\n', '1. 遍历每个元素，在这个元素的后面剩余元素中查找比该元素小的元素，每找到一个组成一个逆序对；（O(n^2)）\n2. 基于归并排序的方法；（O(nlogn)）\n\n```c++\nclass Solution {\npublic:\n    int InversePairs(vector<int> data) {\n       if(data.size() < 2)\n           return 0;\n        \n        vector<int> tp = data;\n        int count = 0,sz = data.size();\n        InversePairs(data,tp,count,0,sz - 1);\n        \n        return count;\n    }\n    \n    void InversePairs(vector<int> &data,vector<int> &tp,int &count,int l,int r){\n        if(l >= r)\n            return;\n        \n        int mid = (l + r)/2;\n        InversePairs(data,tp,count,l,mid);\n        InversePairs(data,tp,count,mid + 1,r);\n        \n        //归并\n        int idx1 = mid,idx2 = r,curr = r;\n        while(idx1 >= l && idx2 >= mid + 1){\n            if(data[idx1] > data[idx2]){//有逆序对\n                count = (idx2 - mid + count) % 1000000007;\n                tp[curr--] = data[idx1--];\n            }\n            else{\n                tp[curr--] = data[idx2--];\n            }\n        }\n        while(idx1 >= l)\n            tp[curr--] = data[idx1--];\n        while(idx2 >= mid + 1)\n            tp[curr--] = data[idx2--];\n        \n        for(int i = l;i <= r;i++)\n            data[i] = tp[i];\n    }\n};\n```\n', 'https://www.nowcoder.com/practice/96bd6684e04a44eb80e6a68efc0ec6c5?tpId=13&tqId=11188&tPage=2&rp=2&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (122, '2021-01-17 13:00:09.712', '2021-01-17 13:00:09.712', NULL, '有序矩阵中第K小的元素', '给定一个 n x n 矩阵，其中每行和每列元素均按升序排序，找到矩阵中第k小的元素。\n请注意，它是排序后的第k小元素，而不是第k个元素\n\n示例:\n\n```\nmatrix = [\n   [ 1,  5,  9],\n   [10, 11, 13],\n   [12, 13, 15]\n],\nk = 8,\n\n返回 13。\n```\n\n说明: \n\n可以假设 k 的值永远是有效的, 1 ≤ k ≤ n^2 \n\n', '#### 1）优先队列\n\n使用一个优先队列，这个队列中的元素个数等于矩阵的行数\n\n将矩阵的第0列元素插入队列，此时队列头部的元素为matrix\\[0\\]\\[0\\]，是矩阵中最小的元素，对其执行出队操作，此时将matrix\\[0\\]\\[1\\]插入队列\n\n由于优先队列使用堆实现，因此队列头部始终是最小的元素。每一个元素出队时，将其所在行的后一个元素插入队列。由于矩阵元素的性质，这样可以保证优先队列中始终包含当前所有剩余元素中最小的元素。那么只需做K次出队操作，第K个出队的元素就是答案\n\n```c++\nclass Solution {\npublic:\n    struct compare{\n        bool operator()(const pair<int,pair<int,int>> &p1,const pair<int,pair<int,int>> &p2){\n            return p1.first > p2.first;\n        }\n    };\n    int kthSmallest(vector<vector<int>>& matrix, int k) {\n        //template <class T, class Sequence = vector<T>, class Compare = less<typename Sequence::value_type> >\n        priority_queue<pair<int,pair<int,int>>,vector<pair<int,pair<int,int>>>,compare> pq;\n        \n        for(int i = 0;i < matrix.size();i++)    \n            pq.push(make_pair(matrix[i][0],make_pair(i,0)));\n        \n        int res,cols = matrix[0].size();\n        while(k--){\n            res = pq.top().first;\n            int i = pq.top().second.first,j = pq.top().second.second;\n            pq.pop();\n            if(j < cols - 1)\n                pq.push(make_pair(matrix[i][j + 1],make_pair(i,j+1)));\n        }  \n        \n        return res;\n    }\n};\n```\n\n#### 2）二分查找\n\n**基于值**的二分查找：首先找到矩阵所有元素中的最小值和最大值，求其中值，然后记录矩阵中小于该值的元素个数，根据这个计数结果与K进行比较来增大最小值或减小最大值\n\n```c++\nclass Solution {\npublic:\n    int kthSmallest(vector<vector<int>>& matrix, int k) {\n        if(matrix.empty())  return -1;\n        \n        int rows = matrix.size();\n        int cols = matrix[0].size();\n        int small = matrix[0][0],large = matrix[rows - 1][cols - 1],median;\n        while(small < large){\n            median = (small + large) >> 1;\n            int count = 0;\n            for(int i = 0;i < rows;i++)\n                count += std::upper_bound(matrix[i].cbegin(),matrix[i].cend(),median) - matrix[i].cbegin();\n            if(count < k)\n                small = median + 1;\n            else\n                large = median;\n        }\n        return small;\n    }\n};\n```\n\n使用题目开头给出的矩阵为例子:\n\n```\nmatrix = [\n   [ 1,  5,  9],\n   [10, 11, 13],\n   [12, 13, 15]\n],\nk = 8,\n```\n\n上述代码会按下列步骤执行：\n\n```\ns            m           l \n1 , ...... , 8 , ...... ,15\n\ncount = 2 小于 k = 8, 因此 s = m + 1 = 9\n\ns          m        l \n9 , ... , 12 , ... ,15\n\ncount = 6 小于 k = 8, 因此 s = m + 1 = 13\n\ns    m    l \n13 , 14 , 15\n\ncount = 8 等于 k = 8, 因此 l = m = 14\n\ns|m  l\n13 , 14\n\ncount = 8 等于 k = 8, 因此 l = m = 13\n\n此时 s = l = 13循环终止，结果为13\n```\n', 'https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/description/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (123, '2021-01-17 13:00:09.713', '2021-01-17 13:00:09.713', NULL, '90度旋转图片', '给定一个 n × n 的二维矩阵表示一个图像。\n\n将图像顺时针旋转 90 度。\n\n说明：\n\n你必须在原地旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要使用另一个矩阵来旋转图像。\n\n示例 1:\n\n```\n给定 matrix = \n[\n  [1,2,3],\n  [4,5,6],\n  [7,8,9]\n],\n\n原地旋转输入矩阵，使其变为:\n[\n  [7,4,1],\n  [8,5,2],\n  [9,6,3]\n]\n```\n\n示例 2:\n\n```\n给定 matrix =\n[\n  [ 5, 1, 9,11],\n  [ 2, 4, 8,10],\n  [13, 3, 6, 7],\n  [15,14,12,16]\n], \n\n原地旋转输入矩阵，使其变为:\n[\n  [15,13, 2, 5],\n  [14, 3, 4, 1],\n  [12, 6, 8, 9],\n  [16, 7,10,11]\n]\n```\n\n', '这个题的主要问题是不能分配额外的矩阵，必须在原矩阵上修改。那么必须保证在将一个元素移动到旋转后的正确位置上之前，目的地位置的元素必须已经旋转至正确位置\n\n比如元素`matrix[i][j]`，需要旋转至`matrix[j][n-i-1]`，而`matrix[j][n-i-1]`又需要旋转至`matrix[n-i-1][n-j-1]`，`matrix[n-i-1][n-j-1]`需要旋转至`matrix[n-j-1][i]`，`matrix[n-j-1][i]`需要旋转至`matrix[i][j]`，整个坐标旋转映射关系如下：\n\n`(i,j) -> (j,n-i-1) -> (n-i-1,n-j-1) -> (n-j-1,i) -> (i,j)`\n\n这个旋转轨迹涉及到以`(i,i)`为左上角，以`(n-i-1,n-i-1)`为右下角的正方形的4条边上的元素，所以可以使用上面的旋转轨迹，由外向内，每次旋转一个正方形4条边上的所有元素\n\n```c++\nclass Solution {\npublic:\n    void rotate(vector<vector<int>>& matrix) {\n        int n = matrix.size();\n        \n        for(int i = 0;i <= (n-1)/2;i++){\n            for(int j = i;j < n - 1 - i;j++){\n                int tp = matrix[i][j];\n                matrix[i][j] = matrix[n-j-1][i];\n                matrix[n-j-1][i] = matrix[n-i-1][n-j-1];\n                matrix[n-i-1][n-j-1] = matrix[j][n-i-1];\n                matrix[j][n-i-1] = tp;\n            }\n        }\n    }\n};\n```\n', 'https://leetcode.com/problems/rotate-image/description/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (124, '2021-01-17 13:00:09.714', '2021-01-17 13:00:09.714', NULL, '构建乘积数组', '给定一个数组`A[0,1,...,n-1]`,请构建一个数组`B[0,1,...,n-1]`,其中`B`中的元素`B[i]=A[0]*A[1]*...*A[i-1]*A[i+1]*...*A[n-1]`。不能使用除法\n\n', '可以将`B[i]`的乘积分为两部分，左边为`A[0]*A[1]*...*A[i-1]`，右边为`A[i+1]，A[i+2]...A[n-1]`\n\n先按自上而下为每个B[i]获得左边部分的乘积，然后自下而上获得右边部分的乘积\n\n```c++\nclass Solution {\npublic:\n    vector<int> multiply(const vector<int>& A) {\n        vector<int> B;\n        if(A.size() < 2)\n            return B;\n        \n        int value = 1;\n        B.push_back(1);\n        for(int i = 1;i < A.size();i++){\n            B.push_back(B.back() * A[i - 1]);\n        }\n        \n        int tp = 1;\n        for(int j = A.size() - 2;j >= 0;j--){\n            tp = tp * A[j+1];\n            B[j] *= tp;\n        }\n        \n        return B;\n    }\n};\n```\n', 'https://www.nowcoder.com/practice/94a4d381a68b47b7a8bed86f2975db46?tpId=13&tqId=11204&tPage=3&rp=2&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (125, '2021-01-17 13:00:09.715', '2021-01-17 13:00:09.715', NULL, 'K个一组翻转链表', '给出一个链表，每 k 个节点一组进行翻转，并返回翻转后的链表。\n\nk 是一个正整数，它的值小于或等于链表的长度。如果节点总数不是 k 的整数倍，那么将最后剩余节点保持原有顺序。\n\n示例 :\n\n给定这个链表：`1->2->3->4->5`\n\n当 k = 2 时，应当返回: `2->1->4->3->5`\n\n当 k = 3 时，应当返回: `3->2->1->4->5`\n\n说明 :\n\n* 你的算法只能使用常数的额外空间。\n* 你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。\n\n', '实现一个函数使用递归对k个节点组成的链表进行翻转。返回翻转后的头结点、翻转后的未节点last、k个节点的下一个节点`next`（即下次处理的k个节点的头节点）\n\n使用一个指针`curr`指向已经处理过的链表的尾节点，那么每翻转一次后需要4步更新：\n\n1. 设置`curr`的next指针指向经过翻转的k个节点链表的头结点\n2. 更新`curr`指向`last`节点\n3. 设置`curr`的next指针指向还未处理的节点链表的头节点（这一步是有必要的，虽然下一次处理会更改`curr`的next指针指向后面经过翻转的k个节点链表的头结点，但是如果已经是最后一次处理，那么这次处理后`curr`的next指针会指向前一个节点）\n4. 更新头结点`head`为`next`，继续下一次处理\n\n```c++\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* reverseKGroup(ListNode* head, int k) {\n        ListNode pHead(0),*curr = &pHead;\n        while(head){\n            ListNode *last = NULL,*next = NULL;\n            curr->next = reverseKNode(head,k - 1,&last,&next);\n            curr = last;\n            if(curr)    curr->next = next;\n            head = next;\n        }\n        return pHead.next;\n    }\nprivate:\n    ListNode* reverseKNode(ListNode* node,int k,ListNode **last,ListNode **next){\n        if(!node)   return NULL;\n        \n        if(k == 0){\n            *last = node;\n            *next = node->next;\n            return node;\n        }\n        \n        ListNode *head = reverseKNode(node->next,k - 1,last,next);\n        \n        if(*last){//当剩余节点不够k个时，last始终为NULL，因此不翻转剩余不足k个的节点\n            (*last)->next = node;\n            *last = node;\n        }\n        \n        return *last ? head : node;\n    }\n};\n```\n', 'https://leetcode.com/problems/reverse-nodes-in-k-group/description/', 'algorithm', '链表', 1, 1);
INSERT INTO `problems` VALUES (126, '2021-01-17 13:00:09.716', '2021-01-17 13:00:09.716', NULL, '包含min函数的栈', '定义栈的数据结构，请在该类型中实现一个能够得到栈最小元素的min函数\n\n', '使用一个栈保存最小元素，最小栈的栈顶元素是当前栈中所有元素的最小元素\n\n为了保证每次压入新元素时，最小栈的栈顶也压入新的最小值，只需要比较新压入元素与最小栈栈顶元素的大小\n\n* 如果新元素小于最小栈的栈顶元素，那么新元素小于当前栈中的最小元素，则将新元素压入最小栈\n* 否则，压入新值并没有用改变栈的最小值，那么继续往最小栈中压入最小栈的栈顶元素\n\n```c++\nclass Solution {\npublic:\n    void push(int value) {\n        dataStack.push(value);\n        if(minStack.empty() || !minStack.empty() && value < minStack.top()){\n            minStack.push(value);\n        }\n        else\n            minStack.push(minStack.top());\n    }\n    void pop() {\n        if(dataStack.empty())\n            throw new exception();\n        dataStack.pop();\n        minStack.pop();\n    }\n    int top() {\n        if(dataStack.empty())\n            throw new exception();\n        return dataStack.top();\n    }\n    int min() {\n        if(dataStack.empty())\n            throw new exception();\n        return minStack.top();\n    }\nprivate:\n    stack<int> dataStack;\n    stack<int> minStack;\n};\n```\n', 'https://www.nowcoder.com/practice/4c776177d2c04c2494f2555c9fcc1e49?tpId=13&tqId=11173&tPage=1&rp=4&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking', 'algorithm', '栈和队列', 1, 1);
INSERT INTO `problems` VALUES (127, '2021-01-17 13:00:09.717', '2021-01-17 13:00:09.717', NULL, '加油站', '在一条环路上有 N 个加油站，其中第 i 个加油站有汽油 gas[i] 升。\n\n你有一辆油箱容量无限的的汽车，从第 i 个加油站开往第 i+1 个加油站需要消耗汽油 cost[i] 升。你从其中的一个加油站出发，开始时油箱为空。\n\n如果你可以绕环路行驶一周，则返回出发时加油站的编号，否则返回 -1。\n\n说明: \n\n* 如果题目有解，该答案即为唯一答案。\n* 输入数组均为非空数组，且长度相同。\n* 输入数组中的元素均为非负数。\n\n示例 1:\n\n```\n输入: \ngas  = [1,2,3,4,5]\ncost = [3,4,5,1,2]\n\n输出: 3\n\n解释:\n从 3 号加油站(索引为 3 处)出发，可获得 4 升汽油。此时油箱有 = 0 + 4 = 4 升汽油\n开往 4 号加油站，此时油箱有 4 - 1 + 5 = 8 升汽油\n开往 0 号加油站，此时油箱有 8 - 2 + 1 = 7 升汽油\n开往 1 号加油站，此时油箱有 7 - 3 + 2 = 6 升汽油\n开往 2 号加油站，此时油箱有 6 - 4 + 3 = 5 升汽油\n开往 3 号加油站，你需要消耗 5 升汽油，正好足够你返回到 3 号加油站。\n因此，3 可为起始索引。\n```\n\n示例 2:\n\n```\n输入: \ngas  = [2,3,4]\ncost = [3,4,3]\n\n输出: -1\n\n解释:\n你不能从 0 号或 1 号加油站出发，因为没有足够的汽油可以让你行驶到下一个加油站。\n我们从 2 号加油站出发，可以获得 4 升汽油。 此时油箱有 = 0 + 4 = 4 升汽油\n开往 0 号加油站，此时油箱有 4 - 3 + 2 = 3 升汽油\n开往 1 号加油站，此时油箱有 3 - 3 + 3 = 3 升汽油\n你无法返回 2 号加油站，因为返程需要消耗 4 升汽油，但是你的油箱只有 3 升汽油。\n因此，无论怎样，你都不可能绕环路行驶一周。\n```\n\n', '* 假如从位置`i`开始，`i+1，i+2...`，一路开过来一路油箱都没有空。说明什么？说明从`i`到`i+1，i+2，...`肯定是正积累。\n* 现在突然发现开往位置`j`时油箱空了。这说明什么？说明从位置`i`开始没法走完全程(废话)。那么，我们要从位置`i+1`开始重新尝试吗？不需要！为什么？因为前面已经知道，位置`i`肯定是正积累，那么，如果从位置`i+1`开始走更加没法走完全程了，因为没有位置`i`的正积累了。同理，也不用从`i+2，i+3，...`开始尝试。所以我们可以放心地从位置`j+1`开始尝试\n\n```c++\nclass Solution {\npublic:\n    int canCompleteCircuit(vector<int>& gas, vector<int>& cost) {\n        int start = 0;      //起始位置\n        int remain = 0;     //当前剩余燃料\n        int debt = 0;       //前面没能走完的路上欠的债\n        \n        for(int i = 0;i < gas.size();i++){\n            remain += gas[i] - cost[i];\n            if(remain < 0){\n                start = i + 1;\n                debt += remain;\n                remain = 0;\n            }\n        }\n        \n        return debt + remain >= 0 ? start : -1;\n    }\n};\n```\n', 'https://leetcode.com/problems/gas-station/description/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (128, '2021-01-17 13:00:09.718', '2021-01-17 13:00:09.718', NULL, '删除有序链表中的重复节点', '给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。\n\n示例 1:\n\n```\n输入: 1->1->2\n输出: 1->2\n```\n\n示例 2:\n\n```\n输入: 1->1->2->3->3\n输出: 1->2->3\n```\n\n', '使用指针的指针curr记录指向当前节点指针的地址。指针的指针可以解引用得到指向当前节点的指针，然后可以进一步修改其next成员，指向删除节点的后一节点，实现节点删除\n\n每次处理开始先解引用curr，检查指向当前节点的指针是否为空，为空说明链表为空或者到达链表结尾，此时处理完成。否则，说明当前节点不为空，需要进一步处理：\n\n* 如果当前节点中，存在下一个节点的指针(即next成员非空)并且当前节点的值和下一节点的值相等，则删除下一节点，用临时指针tp记录删除节点的地址，然后更新链表\n\n* 否则，说明下一节点不能删除或者下一节点为空，因此修改curr的值，使其保存指向下一节点的指针的地址。\n\n需要从链表头遍历到链表结尾，时间代价为n\n\n```c++\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* deleteDuplicates(ListNode* head) {\n        ListNode **curr = &head,*tp;\n\n        while(*curr){//当前节点不为NULL\n            if((*curr)->next && (*curr)->val == (*curr)->next->val){\n                tp = (*curr)->next;\n                (*curr)->next = tp->next;\n                tp->next = NULL;\n                delete tp;\n            }\n            else\n                curr = &((*curr)->next);\n        }\n        \n        return head;\n    }\n};\n```\n', 'https://leetcode.com/problems/remove-duplicates-from-sorted-list/description/', 'algorithm', '链表', 1, 1);
INSERT INTO `problems` VALUES (129, '2021-01-17 13:00:09.718', '2021-01-17 13:00:09.718', NULL, '按层不分行输出二叉树', '从上往下打印出二叉树的每个节点，同层节点从左至右打印\n\n', '使用队列进行BFS，将根节点插入队列，当队列不为空时，弹出一个节点，打印，然后将该节点的左右子节点插入队列\n\n```c++\n/*\nstruct TreeNode {\n    int val;\n    struct TreeNode *left;\n    struct TreeNode *right;\n    TreeNode(int x) :\n            val(x), left(NULL), right(NULL) {\n    }\n};*/\nclass Solution {\npublic:\n    vector<int> PrintFromTopToBottom(TreeNode* root) {\n        vector<int> res;\n        if(!root)\n            return res;\n        \n        deque<TreeNode*> q;\n        q.push_back(root);\n        \n        TreeNode *curr;\n        while(!q.empty()){\n            curr = q.front();\n            res.push_back(curr->val);\n            q.pop_front();\n            \n            if(curr->left)\n                q.push_back(curr->left);\n            if(curr->right)\n                q.push_back(curr->right);\n        }\n        \n        return res;\n    }\n};\n```\n', 'https://www.nowcoder.com/practice/7fe2212963db4790b57431d9ed259701?tpId=13&tqId=11175&tPage=2&rp=2&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking', 'algorithm', '树', 1, 1);
INSERT INTO `problems` VALUES (130, '2021-01-17 13:00:09.719', '2021-01-17 13:00:09.719', NULL, '查找插入位置', '给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。\n\n你可以假设数组中无重复元素。\n\n示例 1:\n\n```\n输入: [1,3,5,6], 5\n输出: 2\n```\n\n示例 2:\n\n```\n输入: [1,3,5,6], 2\n输出: 1\n```\n\n示例 3:\n\n```\n输入: [1,3,5,6], 7\n输出: 4\n```\n\n示例 4:\n\n```\n输入: [1,3,5,6], 0\n输出: 0\n```\n\n', '二分查找，注意如果没找到应该返回`l`：\n\n```c++\nclass Solution {\npublic:\n    int searchInsert(vector<int>& nums, int target) {\n        int l = 0,r = nums.size() - 1;\n        while(l <= r){\n            int mid = (l + r) >> 1;\n            if(nums[mid] < target)       l = mid + 1;\n            else if(nums[mid] > target)  r = mid - 1;\n            else                         return mid;\n        }\n        \n        return l;\n    }\n};\n```\n', 'https://leetcode.com/problems/search-insert-position/description/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (131, '2021-01-17 13:00:09.720', '2021-01-17 13:00:09.720', NULL, '接雨水', '给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。\n\n![](../pic/leetcode-42-1.png)\n\n示例:\n\n```\n输入: [0,1,0,2,1,0,1,3,2,1,2,1]\n输出: 6\n```\n\n', '#### 1）暴力法\n\n**把问题缩小到一个柱子上，考虑柱子i上能接多少雨水**。这取决于i左右两边最高的柱子：\n\n* 假设包括柱子i在内的所有i左边的柱子中，最大者为max_left\n* 包括i在内的所有右边的柱子中，最大者为max_right\n \n那么柱子i上能接的雨水量就是min(max_left,max_right)-height[i]。因此遍历每个柱子，然后遍历左边求出max_left，遍历右边求出max_right，然后将每个柱子能接的雨水量加入结果中\n\n```c++\nclass Solution {\npublic:\n    int trap(vector<int>& height) {\n        int water = 0,sz = height.size();\n        for(int bar = 0;bar < sz;bar++){\n            int max_left = 0,max_right = 0;\n            for(int left_bar = bar;left_bar >= 0;left_bar--)\n                if(height[left_bar] > max_left) max_left = height[left_bar];\n            for(int right_bar = bar;right_bar < sz;right_bar++)\n                if(height[right_bar] > max_right)   max_right = height[right_bar];\n            water += min(max_left,max_right) - height[bar];\n        }\n        \n        return water;\n    }\n};\n```\n\n* **时间复杂度**：O(n^2)\n* **空间复杂度**：O(1)\n\n#### 2）优化暴力法\n\n方法一在求max_left和max_right时，需要遍历柱子i的左边和右边，如果可以优化这个过程，在O(1)时间求出max_left和max_right，就能将O(n^2)的时间复杂度降到O(n)\n\n考虑使用两个数组，max_lefts和max_rights，对于max_lefts来说，下标i表示[0,i]的柱子中最高柱子的高度。那么max_lefts[i+1] = max(max_lefts[i],height[i+1])。因此只需要遍历一遍所就能求出max_lefts。同样，对于max_rights来说，下标i表示[i,sz-1]的柱子中最高柱子的高度...\n\n```c++\nclass Solution {\npublic:\n    int trap(vector<int>& height) {\n        if(height.size() <= 2)  return 0;\n        \n        int water = 0,sz = height.size();\n        vector<int> max_lefts(sz,0),max_rights(sz,0);\n        max_lefts[0] = height[0],max_rights[sz - 1] = height[sz - 1];\n        \n        for(int bar1 = 1,bar2 = sz - 2;bar1 < sz && bar2 >= 0;bar1++,bar2--){\n            max_lefts[bar1] = max(max_lefts[bar1 - 1],height[bar1]);\n            max_rights[bar2] = max(max_rights[bar2 + 1],height[bar2]);\n        }\n        \n        for(int bar = 0;bar < sz;bar++){\n            int max_left = max_lefts[bar],max_right = max_rights[bar];\n            water += min(max_left,max_right) - height[bar];\n        }\n        \n        return water;\n    }\n};\n```\n\n* **时间复杂度**：O(n)\n* **空间复杂度**：O(n)\n\n#### 3）栈\n\n用栈保存每个柱子的下标，当一个柱子的高度<=栈顶的柱子的高度时，将这个柱子(的下标)压入栈中。因此，在遇到一个比栈顶柱子要高的柱子前，栈中柱子的高度从栈底到栈顶是一个降序序列，那么栈中每个柱子都是后一个柱子储水量的边界柱子。当遇到一个柱子高于栈顶柱子时，说明栈顶柱子出现了第一个左右边界柱子，那么计算其储水量，加入结果中。此时，相当于区间内最低的坑已经储上了水，因此可以将栈顶元素弹出，如此反复计算，直到栈顶元素大于等于新的柱子，然后将新的柱子(的下标)压入栈中，处理下一个柱子\n\n```c++\nclass Solution {\npublic:\n    int trap(vector<int>& height) {\n        stack<int> s;\n        int water = 0,sz = height.size();\n        for(int bar = 0;bar < sz;bar++){\n            while(!s.empty() && height[bar] > height[s.top()]){\n                int low_bar = s.top();\n                s.pop();\n                if(s.empty()) break;\n                int left_bound = s.top();\n                water += (bar - left_bound - 1) * (min(height[bar],height[left_bound]) - height[low_bar]); \n            }\n            s.push(bar);\n        }\n        \n        return water;\n    }\n};\n```\n\n* **时间复杂度**：O(n)\n* **空间复杂度**：O(n)\n\n#### 4）双指针\n\n使用两个变量max_left和max_right，分别表示左边柱子的最高者和右边柱子的最高者，初始化为最左边柱子的高度和最右边柱子的最高者\n\n另外使用两个指针left_bar和right_bar，分别表示左边的一个柱子和右边的一个柱子，初始化为最左边的柱子和最右边的柱子。现在不考虑中间的柱子怎么样，只分析这两个指针所表示的柱子\n\n假设left_bar和right_bar中高度较低者为left_bar：\n\n* 如果left_bar比max_left要低，那么left_bar上面能储水max_left-left_bar\n* 否则，left_bar比左边的柱子都要高，那么需要更新max_left的值\n\n经过上面的处理后，递增left_bar，继续处理下一个柱子\n\n同理，如果高度较低者为right_bar：\n\n* 如果right_bar比max_right要低，那么right_bar上面能储水max_right-right_bar\n* 否则，right_bar比右边的柱子都要高，那么需要更新max_right的值\n\n经过上面的处理后，递减right_bar，继续处理下一个柱子\n\n这里可能有个疑问：为什么增加储水量时不考虑另外一个边界？原因在于每次更新max_left或max_right时，都是left_bar和right_bar中高度较低者，因此，另外一边必然存在一个边界大于max_left或max_right\n\n```c++\nclass Solution {\npublic:\n    int trap(vector<int>& height) {\n        int water = 0,sz = height.size();\n        int left_bar = 0,right_bar = sz - 1;\n        int max_left = 0,max_right = 0;\n        \n        while(left_bar < right_bar){\n            if(height[left_bar] < height[right_bar]){\n                if(height[left_bar] < max_left) water += max_left - height[left_bar];\n                else    max_left = height[left_bar];\n                left_bar++;\n            }\n            else{\n                if(height[right_bar] < max_right) water += max_right - height[right_bar];\n                else    max_right = height[right_bar];\n                right_bar--;\n            }\n        }\n        \n        return water;\n    }\n};\n```\n\n* **时间复杂度**：O(n)\n* **空间复杂度**：O(1)\n', '', 'algorithm', '数学', 1, 1);
INSERT INTO `problems` VALUES (132, '2021-01-17 13:00:09.720', '2021-01-17 13:00:09.720', NULL, '实现一个函数确定主机字节序', '', '* **大端**：高序字节存储在低地址，低序字节存储在高地址\n* **小端**：高序字节存储在高地址，低序字节存储在低地址\n\n```c\n//返回1表示大端，0表示小端，-1表示unknown\nint bigEndian() {\n    union {\n        short s;   //short在16位、32位、64位下都是2字节\n        char c[2];\n    }un;\n    un.s = 0x0102;\n    if (un.c[0] == 1 && un.c[1] == 2)       return 1;\n    else if (un.c[0] == 2 && un.c[1] == 1)  return 0;\n    else                                    return -1;\n}\n```\n', '', 'algorithm', 'c/c++基础', 1, 1);
INSERT INTO `problems` VALUES (133, '2021-01-17 13:00:09.722', '2021-01-17 13:00:09.722', NULL, '二叉树中与target距离为K的结点', '给定一个二叉树（具有根结点 `root`）， 一个目标结点 `target` ，和一个整数值 `K` 。\n\n返回到目标结点 `target` 距离为 `K` 的所有结点的值的列表。 答案可以以任何顺序返回。\n\n示例 1：\n\n```\n输入：root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, K = 2\n\n输出：[7,4,1]\n```\n\n![](../pic/leetcode-863-1.png)\n\n提示：\n\n1. 给定的树是非空的，且最多有 `K` 个结点。\n2. 树上的每个结点都具有唯一的值 `0 <= node.val <= 500` 。\n3. 目标结点 `target` 是树上的结点。\n4. `0 <= K <= 1000`.\n\n', '使用DFS(前序)遍历二叉树，得到从`root`到`target`的路径，假设路径如下：\n\n```\n     root\n      /\n    nd1\n      \\\n       nd2\n        \\\n        target\n```\n\n那么所有与`target`距离为`K`的节点就是：\n\n1. 以`target`为根节点的子树中，深度为`K`的节点\n2. 以`nd2->left`为根节点的子树中，深度为`K-2`的节点\n3. 以`nd1->left`为根节点的子树中，深度为`K-3`的节点\n4. 以`root->right`为根节点的子树中，深度为`K-4`的节点\n5. 除此之外，在`root`到`target`的路径上的节点，也可以满足要求。比如`K=1`时，`nd2`要添加到结果中，`K=2`时，`nd1`要添加到结果中...\n\n这个过程可以通过BFS完成\n\n* 时间复杂度：O(n)（DFS时每个节点最多遍历一次，BFS时每个节点最多也只遍历一次）\n* 空间复杂度：O(n)（需要使用一个vector保存路径，BFS时需要一个队列保存节点）\n\n```c++\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> distanceK(TreeNode* root, TreeNode* target, int K) {\n        vector<TreeNode*> path;\n        vector<int> res;\n        //使用dfs获取root到target的路径,返回false时，路径不存在，即输入不合法\n        if(!dfs(root,target,path))  return res;\n        \n        //使用bfs将以第一个参数为根节点的子树中，深度为K的节点添加到结果res中\n        bfs(target,res,K);\n        for(int i = path.size() - 2;i >= 0 && K > 0;i--){\n            TreeNode *nd = path[i],*child = nd->left == path[i + 1] ? nd->right : nd->left;   \n            if(--K == 0)    res.push_back(nd->val); \n            bfs(child,res,K - 1);\n        }\n        \n        return res;\n    }\nprivate:\n    bool dfs(TreeNode *root,TreeNode *target,vector<TreeNode*> &path){\n        if(!root)   return false;\n        \n        path.push_back(root);\n        \n        if(root == target)\n            return true;\n        \n        if(dfs(root->left,target,path))     return true;\n        if(dfs(root->right,target,path))    return true;\n        \n        path.pop_back();\n        \n        return false;\n    }\n    \n    void bfs(TreeNode *root,vector<int> &res,int k){\n        if(!root || k < 0)  return;\n        \n        deque<TreeNode*> d;\n        d.push_back(root);\n        \n        while(!d.empty() && k--){\n            for(int count = d.size();count > 0;count--){\n                TreeNode *nd = d.front();\n                d.pop_front();\n                if(nd->left)    d.push_back(nd->left);\n                if(nd->right)   d.push_back(nd->right);\n            }\n        }\n        \n        for(TreeNode *nd : d)   res.push_back(nd->val);\n    }\n};\n```\n', 'https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/description/', 'algorithm', '树', 1, 1);
INSERT INTO `problems` VALUES (134, '2021-01-17 13:00:09.723', '2021-01-17 13:00:09.723', NULL, '被包围的区域', '给定一个二维的矩阵，包含 `\'X\'` 和 `\'O\'`（字母 O）。\n\n找到所有被 `\'X\'` 围绕的区域，并将这些区域里所有的 `\'O\'` 用 `\'X\'` 填充。\n\n示例:\n\n```\nX X X X\nX O O X\nX X O X\nX O X X\n```\n\n运行你的函数后，矩阵变为：\n\n```\nX X X X\nX X X X\nX X X X\nX O X X\n```\n\n解释:\n\n被围绕的区间不会存在于边界上，换句话说，任何边界上的 `\'O\'` 都不会被填充为 `\'X\'`。 任何不在边界上，或不与边界上的 `\'O\'` 相连的 `\'O\'` 最终都会被填充为 `\'X\'`。如果两个元素在水平或垂直方向相邻，则称它们是“相连”的\n\n', '**关键在于理解，哪些`‘O’`应该被改成`\'X\'`。由于`‘O’`不能出现在边界，所以与边界相连的所有`\'O\'`都不能改成`\'X\'`，其余的`\'O\'`应该改成`\'X\'`**\n\n那么可以先遍历4个条边界，如果边界上的某个位置为`‘O’`，则使用DFS，将包含该`\'O\'`的块的元素都设置成`‘#’`\n\n然后遍历一遍所有元素，此时图中存在3种元素：`‘X’`、`\'O\'`、`\'#\'`，将所有的`\'O\'`改成`\'X\'`，将所有的`\'#\'`改回`‘O‘`\n\n```c++\nclass Solution {\npublic:\n    void solve(vector<vector<char>>& board) {\n        if(board.empty() || board[0].empty())   return;\n        \n        int rows = board.size();\n        int cols = board[0].size();\n        \n        for(int i = 0;i < rows;i++){\n            if(board[i][0] == \'O\')  dfs(board,i,0);\n            if(board[i][cols - 1] == \'O\') dfs(board,i,cols - 1);\n        }\n        \n        for(int j = 0;j < cols;j++){\n            if(board[0][j] == \'O\')  dfs(board,0,j);\n            if(board[rows - 1][j] == \'O\') dfs(board,rows - 1,j);\n        }\n        \n        for(int i = 0;i < rows;i++){\n            for(int j = 0;j < cols;j++){\n                if(board[i][j] == \'O\')  board[i][j] = \'X\';\n                else if(board[i][j] == \'#\') board[i][j] = \'O\';\n            }\n        }\n    }\n    \n    void dfs(vector<vector<char>> &board,int row,int col){\n        if(row < 0 || col < 0 || row >= board.size() || col >= board[row].size() || board[row][col] != \'O\') return;\n        \n        board[row][col] = \'#\';\n        \n        dfs(board,row - 1,col) , dfs(board,row + 1,col) , dfs(board,row,col - 1) , dfs(board,row,col + 1);\n    }\n};\n```\n', 'https://leetcode.com/problems/surrounded-regions/description/', 'algorithm', '图', 1, 1);
INSERT INTO `problems` VALUES (135, '2021-01-17 13:00:09.724', '2021-01-17 13:00:09.724', NULL, '打家劫舍', '你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。\n\n给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。\n\n示例 1:\n\n```\n输入: [1,2,3,1]\n输出: 4\n解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。\n     偷窃到的最高金额 = 1 + 3 = 4 。\n```\n\n示例 2:\n\n```\n输入: [2,7,9,3,1]\n输出: 12\n解释: 偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。\n     偷窃到的最高金额 = 2 + 9 + 1 = 12 。\n```\n\n', '动态规划，如果state[i]表示从1~i的房屋能偷窃到的最高金额，那么第i间房屋可以选择偷窃或者不偷窃：\n\n* 如果偷窃，state[i] = nums[i] + state[i - 2]\n* 如果不偷窃，state[i] = state[i - 1];\n\n因此，state[i] = max(nums[i] + state[i - 2],state[i - 1])\n\n#### 1）无状态压缩\n\n```c++\nclass Solution {\npublic:\n    int rob(vector<int>& nums) {\n        if(nums.empty())    return 0;\n        if(nums.size() == 1)  return nums[0];\n        \n        vector<int> state(nums.size() + 1,0);\n        state[1] = nums[0];\n        for(int idx = 1;idx < nums.size();idx++){\n            int i = idx + 1;\n            state[i] = max(state[i - 1],nums[idx] + state[i - 2]);\n        }\n        \n        return state[nums.size()];\n    }\n};\n```\n\n#### 2）状态压缩\n\n从状态转移方程可以指定，每个状态只依赖于前面两个2状态，因此只需要用2个变量保存状态，不需要使用一个数组\n\n```c++\nclass Solution {\npublic:\n    int rob(vector<int>& nums) {\n        if(nums.empty())    return 0;\n        if(nums.size() == 1)  return nums[0];\n        \n        int include = nums[0],exclude = 0,res = include;\n        for(int i = 1;i < nums.size();i++){\n            int tp = max(include,nums[i] + exclude);\n            if(tp > res)    res = tp;\n            exclude = include;\n            include = tp;\n        }\n        return res;\n    }\n};\n```\n', 'https://leetcode.com/problems/house-robber/description/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (136, '2021-01-17 13:00:09.724', '2021-01-17 13:00:09.724', NULL, '按频率排序多个文件中的query记录', '有10个文件，每个文件1GB，每个文件的每一行存放的都是用户的query，每个文件中的query都有可能重复。请按照query的频度排序\n\n', '#### 1）方案一\n\n顺序读取10个文件，按照hash(query)%10的结果将query写入到另外10个文件中，记为[a0,a1,...,a9]，这样新生成的文件每个大小约为1GB\n\n找到一台内存在2GB左右的机器，依次对[a0,a1,...,a9]用hash_map(query,query_count)来统计每个query出现的次数，并利用快速/堆/归并排序按照出现次数进行排序。将排序好的query和对应的query_count输出到文件中。这样得到了10个排好序的文件，记为[b0,b1,...,b9]。对这10个文件进行归并排序（可利用败者树进行多路归并）\n\n#### 2）方案二\n\n一般query的总量是有限的，只是重复的次数比较多，若所有的query一次性就可以加入到内存中，就可以采用Trie树/hash_map等直接来统计每个query出现的次数，然后按出现次数做快速/堆/归并排序\n', '', 'algorithm', '海量数据', 1, 1);
INSERT INTO `problems` VALUES (137, '2021-01-17 13:00:09.725', '2021-01-17 13:00:09.725', NULL, '3的幂', '给定一个整数，写一个函数来判断它是否是 3 的幂次方。\n\n示例 1:\n\n```\n输入: 27\n输出: true\n```\n\n示例 2:\n\n```\n输入: 0\n输出: false\n```\n\n示例 3:\n\n```\n输入: 9\n输出: true\n```\n\n示例 4:\n\n```\n输入: 45\n输出: false\n```\n\n进阶：\n\n你能不使用循环或者递归来完成本题吗？\n\n', '#### 1）递归\n\n```c++\nclass Solution {\npublic:\n    bool isPowerOfThree(int n) {\n        if(n <= 0)  return false;\n        if(n == 1)  return true;\n        if(n % 3 != 0)  return false;\n        return isPowerOfThree(n/3);\n    }\n};\n```\n\n#### 2）迭代\n\n```c++\nclass Solution {\npublic:\n    bool isPowerOfThree(int n) {\n        if(n < 0)  return false;\n        \n        while(n){\n            if(n == 1)  return true;\n            if(n % 3 != 0)  return false;\n            n /= 3;\n        }\n        \n        return false;\n    }\n};\n```\n\n#### 3）Discuss中不使用递归和迭代的方法\n\n```c++\nclass Solution {\npublic:\n    bool isPowerOfThree(int n) {\n        // 1162261467 is 3^19,  3^20 is bigger than int  \n        return ( n>0 &&  1162261467%n==0);\n    }\n};\n\n//下列函数可以用以获取int中最大的3的幂的数\nint getMaxPowerOfThree() {\n    int max = 1;\n    while (max * 3 > max) max *= 3;\n    return max;\n}\n```\n', 'https://leetcode-cn.com/problems/power-of-three/description/', 'algorithm', '数学', 1, 1);
INSERT INTO `problems` VALUES (138, '2021-01-17 13:00:09.726', '2021-01-17 13:00:09.726', NULL, '合并区间', '给出一个区间的集合，请合并所有重叠的区间。\n\n示例 1:\n\n```\n输入: [[1,3],[2,6],[8,10],[15,18]]\n输出: [[1,6],[8,10],[15,18]]\n解释: 区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].\n```\n\n示例 2:\n\n```\n输入: [[1,4],[4,5]]\n输出: [[1,5]]\n解释: 区间 [1,4] 和 [4,5] 可被视为重叠区间。\n```\n\n', '先对区间按start进行排序，这保证了每个区间不可能出现在前一个区间之前\n\n排序后，对区间进行合并。假设前k个区间已经合并成m个区间，对于区间k+1：\n\n* 区间k+1的start在合并好的m-1区间的范围内，那么根据区间m-1的end和区间k+1的end判断是否更新区间m-1的end值\n* 区间k+1的start在合并好的m-1区间的后面，那么区间k+1单独成为一个独立的区间，添加到合并的m个区间中\n\n```c++\n/**\n * Definition for an interval.\n * struct Interval {\n *     int start;\n *     int end;\n *     Interval() : start(0), end(0) {}\n *     Interval(int s, int e) : start(s), end(e) {}\n * };\n */\nclass Solution {\npublic:\n    vector<Interval> merge(vector<Interval>& intervals) {\n        if(intervals.empty())   return vector<Interval>();\n        \n        //lambda：[capture list] (parameter list) -> return type {function body}\n        sort(intervals.begin(),intervals.end(),[](const Interval &i1,const Interval &i2){return i1.start < i2.start;});\n        \n        vector<Interval> res;\n        res.push_back(intervals[0]);\n        for(int i = 1;i < intervals.size();i++){\n            if(intervals[i].start <= res.back().end)    \n                res.back().end = max(intervals[i].end,res.back().end);\n            else\n                res.push_back(intervals[i]);\n        }\n        \n        return res;\n    }\n};\n```\n', 'https://leetcode.com/problems/merge-intervals/description/', 'algorithm', '数学', 1, 1);
INSERT INTO `problems` VALUES (139, '2021-01-17 13:00:09.726', '2021-01-17 13:00:09.726', NULL, '不含重复元素集合的所有子集', '给定一组不含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）\n\n说明：解集不能包含重复的子集\n\n示例:\n\n```\n输入: nums = [1,2,3]\n输出:\n[\n  [3],\n  [1],\n  [2],\n  [1,2,3],\n  [1,3],\n  [2,3],\n  [1,2],\n  []\n]\n```\n\n', '对于每个元素，可以选择要或者不要\n\n#### 1）方法一\n\n使用DFS，每次将一个元素添加到路径中，递归DFS返回后从路径中删除元素\n\n```c++\nclass Solution {\npublic:\n    vector<vector<int>> subsets(vector<int>& nums) {\n        vector<int> subset;\n        vector<vector<int>> res;\n        dfs(nums,0,res,subset);\n        return res;\n    }\n    \nprivate:\n    void dfs(const vector<int> &nums,int idx,vector<vector<int>> &res,vector<int> subset){\n        if(idx < 0) return;\n        else if(idx == nums.size()){\n            res.push_back(subset);\n            return;\n        }\n        \n        subset.push_back(nums[idx]);\n        dfs(nums,idx + 1,res,subset);\n        subset.pop_back();\n        dfs(nums,idx + 1,res,subset);\n    }\n};\n```\n\n#### 2）方法二\n\n假设已经处理过的元素组合为`{s}`，对于每个新的元素num，可以选择要或者不要，因此，新的组合为{{s},{s}+num}\n\n```c++\nclass Solution {\npublic:\n    vector<vector<int>> subsets(vector<int>& nums) {\n        if(nums.empty())    return vector<vector<int>>();\n        \n        vector<vector<int>> res;\n        res.push_back(vector<int>());\n        subsets(nums,0,res);\n        return res;\n    }\n    \nprivate:\n    void subsets(const vector<int> &nums,int idx,vector<vector<int>> &res){\n        if(idx < 0 || idx == nums.size()) return;\n        \n        vector<vector<int>> v = res;\n        for(int i = 0;i < v.size();i++)\n            v[i].push_back(nums[idx]);\n        \n        res.insert(res.end(),v.begin(),v.end());\n        \n        subsets(nums,idx + 1,res);\n    }\n};\n```\n', 'https://leetcode.com/problems/subsets/description/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (140, '2021-01-17 13:00:09.727', '2021-01-17 13:00:09.727', NULL, '判断数组是否包含重复元素', '给定一个整数数组，判断是否存在重复元素。\n\n如果任何值在数组中出现至少两次，函数返回 true。如果数组中每个元素都不相同，则返回 false。\n\n示例 1:\n\n```\n输入: [1,2,3,1]\n输出: true\n```\n\n示例 2:\n\n```\n输入: [1,2,3,4]\n输出: false\n```\n\n示例 3:\n\n```\n输入: [1,1,1,3,3,4,3,2,4,2]\n输出: true\n```\n\n', '使用一个set存储元素，如果某个元素在set中，说明出现重复\n\n```c++\nclass Solution {\npublic:\n    bool containsDuplicate(vector<int>& nums) {\n        unordered_set<int> s;\n        for(int e : nums){\n            if(s.find(e) != s.end())\n                return true;\n            else\n                s.insert(e);\n        }\n        return false;\n    }\n};\n```\n\nDiscuss中一行的方法：\n\n```c++\nclass Solution {\npublic:\n    bool containsDuplicate(vector<int>& nums) {\n        return nums.size() > set<int>(nums.begin(), nums.end()).size();        \n    }\n};\n```\n', 'https://leetcode.com/problems/contains-duplicate/description/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (141, '2021-01-17 13:00:09.727', '2021-01-17 13:00:09.727', NULL, '细胞自动机的下一个状态', '给定一个包含 m × n 个格子的面板，每一个格子都可以看成是一个细胞。每个细胞具有一个初始状态 live（1）即为活细胞， 或 dead（0）即为死细胞。每个细胞与其八个相邻位置（水平，垂直，对角线）的细胞都遵循以下四条生存定律：\n\n1. 如果活细胞周围八个位置的活细胞数少于两个，则该位置活细胞死亡；\n2. 如果活细胞周围八个位置有两个或三个活细胞，则该位置活细胞仍然存活；\n3. 如果活细胞周围八个位置有超过三个活细胞，则该位置活细胞死亡；\n4. 如果死细胞周围正好有三个活细胞，则该位置死细胞复活；\n\n根据当前状态，写一个函数来计算面板上细胞的下一个（一次更新后的）状态\n\n', '如果直接在原矩阵上做0和1的变换，会影响后面的细胞的状态分析\n\n#### 1）使用额外的矩阵空间\n\n创建一个 m × n 的辅助空间，将下一个状态保存在辅助矩阵中\n\n#### 2）原地修改\n\n如果要在原矩阵上修改，那么需要保留原来的状态，使得后面的分析不受影响，因此可以利用int右起第2位作为新的状态，当分析完所有细胞的新的状态后，再遍历一遍数组，每个元素右移一位得到新状态\n\n```c++\nclass Solution {\npublic:\n    void gameOfLife(vector<vector<int>>& board) {\n        if(board.empty())   return;\n        \n        int rows = board.size(),cols = board[0].size();   \n        for(int i = 0;i < rows;i++){\n            for(int j = 0;j < cols;j++){\n                int count = board[i][j] & 1 == 1 ? -1 : 0;\n                for(int m = max(i - 1,0);m <= min(i + 1,rows - 1);m++)\n                    for(int n = max(j - 1,0);n <= min(j + 1,cols - 1);n++)\n                        if(board[m][n] & 1 == 1)    count++;\n                if(count == 3 || (board[i][j] == 1 && count == 2))\n                    board[i][j] |= 2;\n            }\n        }\n        \n        for(int i = 0;i < rows;i++)\n            for(int j = 0;j < cols;j++)\n                board[i][j] >>= 1;\n    }\n};\n```\n', '', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (142, '2021-01-17 13:00:09.728', '2021-01-17 13:00:09.728', NULL, '盛最多水的容器', '给定 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai) 。画 n 条垂直线，使得垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。\n\n注意：你不能倾斜容器，n 至少是2。\n\n', '使用两个指针`l`和`r`，分别指向最左边的垂直线和最右边的垂直线，因此`r-1`就是容器的宽，`min(height[l],height[r])`就是容器的高，可以求出盛水量，为了盛更多的水，需要更大的面积，`l`和`r`向中间移动时，宽会变小，那么要得到更大的面积，高必须增加，因此选择`l`和`r`中高度较小者向中间移动，直到碰到一个更高的垂直线，此时判断是否更新最大盛水量。这个过程一直持续到`l>=r`\n\n```c++\nclass Solution {\npublic:\n    int maxArea(vector<int>& height) {\n        int l = 0,r = height.size() - 1;\n        int res = 0;\n        while(l < r){\n            int minHeight = min(height[l],height[r]);\n            res = max(res , (r - l) * minHeight);\n            while(l < r && height[l] <= minHeight)  l++;\n            while(l < r && height[r] <= minHeight)  r--;\n        }\n        return res;\n    }\n};\n```\n', 'https://leetcode.com/problems/container-with-most-water/description/', 'algorithm', '数学', 1, 1);
INSERT INTO `problems` VALUES (143, '2021-01-17 13:00:09.729', '2021-01-17 13:00:09.729', NULL, '字符串中第一个只出现一次的字符', '在一个字符串(1<=字符串长度<=10000，全部由字母组成)中找到第一个只出现一次的字符,并返回它的位置\n\n', '#### 1）暴力法\n\n从头遍历每个字符，对于任意字符，遍历剩余字符看是否重复出现\n\n* 时间复杂度：O(n^2)\n* 空间复杂度：O(1)\n\n#### 2）哈希表\n\n用一个辅助数组，下标为字符，值为字符出现次数，第一次遍历时统计每个字符的出现次数，第二次遍历找到第一个只出现一次的字符\n\n* 时间复杂度：O(n)\n* 空间复杂度：O(1)（如果都是ASCII字符，只需要256大小的数组）\n\n```c++\nclass Solution {\npublic:\n    int FirstNotRepeatingChar(string str) {\n        vector<int> count(256,0);\n        \n        for(const char &c : str)\n            count[c]++;\n        \n        for(int i = 0;i < str.length();i++)\n            if(count[str[i]] == 1)\n                return i;\n        \n        return -1;\n    }\n};\n```\n', 'https://www.nowcoder.com/practice/1c82e8cf713b4bbeb2a5b31cf5b0417c?tpId=13&tqId=11187&tPage=2&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking', 'algorithm', '字符串', 1, 1);
INSERT INTO `problems` VALUES (144, '2021-01-17 13:00:09.729', '2021-01-17 13:00:09.729', NULL, '两个排序数组的中值', '给定两个大小为 m 和 n 的有序数组 nums1 和 nums2 。\n\n请找出这两个有序数组的中位数。要求算法的时间复杂度为 O(log (m+n)) \n\n示例 1:\n\n```\nnums1 = [1, 3]\nnums2 = [2]\n\n中位数是 2.0\n```\n\n示例 2:\n\n```\nnums1 = [1, 2]\nnums2 = [3, 4]\n\n中位数是 (2 + 3)/2 = 2.5\n```\n\n', '#### 1）归并\n\n使用一个辅助数组，使用归并排序的合并方法将两个数组合并，排成一个按序排序的数组，然后求中值：\n\n```c++\nclass Solution {\npublic:\n    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {\n        int idx1 = 0,idx2 = 0,idx = 0,sz1 = nums1.size(),sz2 = nums2.size();\n        vector<int> nums(sz1 + sz2,0);\n        while(idx1 != sz1 && idx2 != sz2){\n            if(nums1[idx1] < nums2[idx2])   nums[idx++] = nums1[idx1++];\n            else nums[idx++] = nums2[idx2++];\n        }\n        while(idx1 != sz1)  nums[idx++] = nums1[idx1++];\n        while(idx2 != sz2)  nums[idx++] = nums2[idx2++];\n        \n        if((sz1 + sz2) % 2 == 0)\n            return (double)(nums[(sz1 + sz2 - 1) / 2] + nums[(sz1 + sz2) / 2]) / 2;\n        else\n            return nums[(sz1 + sz2) / 2];\n    }\n};\n```\n\n* **时间复杂度**：O(m + n)\n* **空间复杂度**：O(m + n)\n\n时间复杂度不满足题目要求，但是这种方法也能accept\n\n\n#### 2）归并（不使用辅助空间）\n\n还是使用归并排序合并的思想，但是不使用辅助数组，根据两个数组的大小判断中值的下标，然后归并过程中递增下标，直到到达中值的下标。这样可以避免使用额外空间\n\n```c++\nclass Solution {\npublic:\n    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {\n        int idx1 = 0,idx2 = 0,sz1 = nums1.size(),sz2 = nums2.size();\n        int end1 = (sz1 + sz2 - 1) / 2, end2 = (sz1 + sz2) % 2 ? -1 : (sz1 + sz2) / 2,begin = 0;\n        int num1,num2;\n        \n        while(idx1 != sz1 && idx2 != sz2){\n            if(begin == end1){\n                num1 = nums1[idx1] < nums2[idx2] ? nums1[idx1] : nums2[idx2];\n                if(end2 == -1)   return num1;\n            }\n            if(begin == end2){\n                num2 = nums1[idx1] < nums2[idx2] ? nums1[idx1] : nums2[idx2];\n                return (double)(num1 + num2) / 2;\n            }\n            if(nums1[idx1] < nums2[idx2])   idx1++;\n            else    idx2++;\n            begin++;\n        }\n        \n        while(idx1 != sz1){\n            if(begin == end1){\n                num1 = nums1[idx1];\n                if(end2 == -1)   return num1;\n            }\n            if(begin == end2){\n                num2 = nums1[idx1];\n                return (double)(num1 + num2) / 2;\n            }\n            idx1++;\n            begin++;\n        }\n        while(idx2 != sz2){\n            if(begin == end1){\n                num1 = nums2[idx2];\n                if(end2 == -1)   return num1;\n            }\n            if(begin == end2){\n                num2 = nums2[idx2];\n                return (double)(num1 + num2) / 2;\n            }\n            idx2++;\n            begin++;\n        }\n        \n        return 0;//nums1和nums2都为空\n    }\n};\n```\n\n* **时间复杂度**：O(m + n)\n* **空间复杂度**：O(1)\n\n时间复杂度不满足题目要求，但是这种方法也能accept\n\n#### 3）二分法\n\n要求O(log(m+n))的时间复杂度，那么必须使用二分法，那么如何进行二分？考虑将数组`num1`分为2部分```[part1,part3]```，将数组num2分为2部分```[part2,part4]```，然后假设`part1`包含`sz1`个元素，`part2`包含`sz2`个元素。那么我们肯定是要找到`part1`和`part2`，使得：\n\n```sz1+sz2 = len/2，len为两个数组总长```\n\n可以以`len/2`为长度总和，以`part1`为基准：\n\n* 当`part1`变大时，`sz1`扩大，那么`sz2`必须减小，因此`part2`要减小\n* 当`part1`变小时，`sz1`减小，那么`sz2`必须扩大，因此`part2`要扩大\n\n现在问题是根据什么标准来扩大或减小`part1`？这里设4个变量：\n\n1. `part1`中最右边的元素（即`part1`最大的元素）为`l1`\n2. `part3`中最左边的元素（即`part3`最小的元素）为`r1`\n3. `part2`中最右边的元素（即`part2`最大的元素）为`l2`\n4. `part4`中最左边的元素（即`part4`最小的元素）为`r2`\n\n由于`part1`和`part2`必须为数组`nums1`和`nums2`组成数组的前半部分，那么必须满足：\n\n```\nl1 <= r1（已经满足）\nl1 <= r2\nl2 <= r1\nl2 <= r2（已经满足）\n```\n\n因此，可以根据中间两个条件是否满足来扩大或减小`part1`\n\n```c++\nclass Solution {\npublic:\n    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {\n        if(nums2.size() < nums1.size())\n            return findMedianSortedArrays(nums2,nums1);\n        \n        int sz = nums1.size() + nums2.size();\n        int sz1l = 0,sz1r = nums1.size();\n        int sz1 = 0,sz2 = 0;\n        while(sz1 <= nums1.size()){\n            sz1 = (sz1l + sz1r) / 2;\n            sz2 = sz / 2 - sz1; \n            int l1 = sz1 == 0 ? INT_MIN : nums1[sz1 - 1];\n            int r1 = sz1 == nums1.size() ? INT_MAX : nums1[sz1];\n            int l2 = sz2 == 0 ? INT_MIN : nums2[sz2 - 1];\n            int r2 = sz2 == nums2.size() ? INT_MAX : nums2[sz2];\n            if(l1 > r2)\n                sz1r = sz1 - 1;\n            else if(l2  > r1)\n                sz1l = sz1 + 1;\n            else{\n                if(sz % 2 == 0){\n                    l1 = l1 > l2 ? l1 : l2;\n                    r1 = r1 < r2 ? r1 : r2;\n                    return (double)(l1 + r1) / 2;\n                }\n                else{\n                    r1 = r1 < r2 ? r1 : r2;\n                    return r1;\n                }\n            }\n                \n        }\n        \n        return -1;\n    }\n};\n```\n\n* **时间复杂度**：O(log(min(m,n)))\n* **空间复杂度**：O(1)\n', 'https://leetcode.com/problems/median-of-two-sorted-arrays/description/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (145, '2021-01-17 13:00:09.730', '2021-01-17 13:00:09.730', NULL, '将一组数拼接成最大数字', '* 排成最大数字：[OJ链接](https://leetcode.com/problems/largest-number/description/)（Leetcode）\n* 排成最小数字：[OJ链接](https://www.nowcoder.com/practice/8fecd3f8ba334add803bf2a06af1b993?tpId=13&tqId=11185&tPage=2&rp=2&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking)（牛客网）\n\n给定一组非负整数，重新排列它们的顺序使之组成一个最大的整数。\n\n示例 1:\n\n```\n输入: [10,2]\n输出: 210\n```\n\n示例 2:\n\n```\n输入: [3,30,34,5,9]\n输出: 9534330\n```\n\n说明: 输出结果可能非常大，所以你需要返回一个字符串而不是整数\n\n', '给出数字`m`和`n`，需要确定一个规则判断`m`和`n`哪个应该排在前面，如果`mn>nm`，那么`m`应该排在`n`前面，此时定义`m>n`...\n\n根据这个规则对数组中的数字进行排序，排序后的序列就是最大的数；\n\n#### 1）使用函数\n\n```c++\nclass Solution {\npublic:\n    string largestNumber(vector<int>& nums) {\n        sort(nums.begin(),nums.end(),comp);\n        \n        //处理所有元素都是0的情况\n        if(!nums.empty() && nums[0] == 0)   return \"0\";\n        \n        string res = \"\";\n        for(int num : nums) res = res + to_string(num);\n        \n        return res;\n    }\nprivate:\n    static bool comp(int num1,int num2){\n        string s1 = to_string(num1) + to_string(num2);\n        string s2 = to_string(num2) + to_string(num1);\n        \n        return s2 < s1;\n    }\n};\n```\n\n#### 2）使用lambda\n\n```c++\nclass Solution {\npublic:\n    string largestNumber(vector<int>& nums) {\n        sort(nums.begin(),nums.end(),[](const int &num1,const int &num2){\n            return to_string(num2) + to_string(num1) < to_string(num1) + to_string(num2);\n        });\n        \n        //处理所有元素都是0的情况\n        if(!nums.empty() && nums[0] == 0)   return \"0\";\n        \n        string res = \"\";\n        for(int num : nums) res = res + to_string(num);\n        \n        return res;\n    }\n};\n```\n', '', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (146, '2021-01-17 13:00:09.730', '2021-01-17 13:00:09.730', NULL, '下一个排列', '实现获取下一个排列的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。\n\n如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。\n\n必须原地修改，只允许使用额外常数空间。\n\n以下是一些例子，输入位于左侧列，其相应输出位于右侧列。\n\n```\n1,2,3 → 1,3,2\n3,2,1 → 1,2,3\n1,1,5 → 1,5,1\n```\n\n', '考虑到要查找的序列只能比当前序列“稍微大一点”，因此应该调整数组右边部分的序列，如果右边部分为“降序”，则继续往左找，直到找到一个数，使得这个数和右边“降序”序列中的其中一个交换，可以得到一个更大的序列\n\n```\n[2,3]   //当右边降序序列为[3]时，2小于3，所以交换2,3得到的序列[3,2]更大\n[1,3,2] //当右边降序序列为[3,2]时，1小于2，所以交换1,2得到的序列[2,3,1]更大\n```\n\n但是在上面`[1,3,2]`的例子中，得到的`[2,3,1]`并不是最终结果，因为3,1是递减的，换成递增可以得到一个比当前序列更小，但仍比原始序列更大的序列，即`[2,1,3]`，所以在交换后需要对右边序列进行一次排序。但是由于一开始我们是在右边序列中，找出比1大的最小的一个元素，也就是2，所以交换后，右边序列仍然是降序的，因此排序只需要反转右边的序列就行，需要O(n)的时间复杂度\n\n* 时间复杂度：O(n)\n* 空间复杂度：O(1)\n\n```c++\nclass Solution {\npublic:\n    void nextPermutation(vector<int>& nums) {\n        if(nums.size() <= 1)    return;\n        int sz = nums.size();\n    \n        int idx1 = sz - 2;\n        for(;idx1 >= 0 && nums[idx1] >= nums[idx1 + 1];idx1--)    ;\n        \n        if(idx1 == -1){\n            for(int i = idx1 + 1,j = sz - 1;i < j;)\n                swap(nums[i++],nums[j--]);\n            return;\n        }\n        \n        int idx2 = idx1 + 1;\n        for(int i = idx2;i < sz;i++){\n            if(nums[i] > nums[idx1]) idx2 = i;\n            else    break;\n        }\n        \n        swap(nums[idx1],nums[idx2]);\n\n        for(int i = idx1 + 1,j = sz - 1;i < j;)\n            swap(nums[i++],nums[j--]);\n    }\n};\n```\n', 'https://leetcode.com/problems/next-permutation/description/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (147, '2021-01-17 13:00:09.731', '2021-01-17 13:00:09.731', NULL, '变态跳台阶', '一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法\n\n', '第一次可以选择跳`1`级或`2`级...或`n`级，那么 `f(n) = f(n - 1) + f(n - 2) + ... + f(0)`，可以进一步求得`f(n) = 2f(n-1)`，因为`f(1) = 1`，故`f(n) = 2^(n - 1)`\n\n> 这个题实际上是一个延伸扩展，并不属于斐波那契数列\n\n```c++\nclass Solution {\npublic:\n    int jumpFloorII(int number) {\n        if(number <= 0)\n            return 0;\n        \n        if(number == 1)\n            return 1;\n        \n        int res = 1;\n        for(int i = 2;i <= number;i++){\n            res *= 2;\n        }\n        \n        return res;\n    }\n};\n```\n', 'https://www.nowcoder.com/practice/22243d016f6b47f2a6928b4313c85387?tpId=13&tqId=11162&tPage=1&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking', 'algorithm', '数学', 1, 1);
INSERT INTO `problems` VALUES (148, '2021-01-17 13:00:09.732', '2021-01-17 13:00:09.732', NULL, '课程安排', '现在你总共有 n 门课需要选，记为 `0` 到 `n-1`。\n\n在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们: `[0,1]`\n\n给定课程总量以及它们的先决条件，判断是否可能完成所有课程的学习？\n\n示例 1:\n\n```\n输入: 2, [[1,0]] \n输出: true\n解释: 总共有 2 门课程。学习课程 1 之前，你需要完成课程 0。所以这是可能的。\n```\n\n示例 2:\n\n```\n输入: 2, [[1,0],[0,1]]\n输出: false\n解释: 总共有 2 门课程。学习课程 1 之前，你需要先完成​课程 0；并且学习课程 0 之前，你还应先完成课程 1。这是不可能的。\n```\n\n说明:\n\n1. 输入的先决条件是由边缘列表表示的图形，而不是邻接矩阵\n2. 你可以假定输入的先决条件中没有重复的边\n\n', '问题等价于在先决条件构造的有向图中，判断是否存在环。**如果存在环，那么没有拓扑序列**，所以使用[拓扑排序](https://github.com/arkingc/note/blob/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%9B%BE.md#%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F)来处理，可以通过BFS或DFS\n\n#### 1）BFS\n\n```c++\nclass Solution {\npublic:\n    bool canFinish(int numCourses, vector<pair<int, int>>& prerequisites) {\n        vector<vector<int> > graph(numCourses);\n        vector<int> indegrees(numCourses,0);    //顶点的入度，即有多少边指向该顶点\n        \n        for(auto p : prerequisites){\n            indegrees[p.first]++;\n            graph[p.second].push_back(p.first);\n        }\n        \n        deque<int> q;\n        for(int v = 0;v < numCourses;v++)\n            if(indegrees[v] == 0)\n                q.push_back(v);\n        while(!q.empty()){\n            int v = q.front();\n            q.pop_front();\n            for(int v2 : graph[v])\n                if(--indegrees[v2] == 0)\n                    q.push_back(v2);\n        }\n        \n        for(int indegree : indegrees)\n            if(indegree)\n                return false;\n        return true;\n    }\n};\n```\n\n#### 2）DFS\n\n```c++\nclass Solution {\npublic:\n    bool canFinish(int numCourses, vector<pair<int, int>>& prerequisites) {\n        vector<vector<int> > graph(numCourses);\n        //0：该顶点还未被访问\n        //1：当前DFS路径中，该顶点已被访问\n        //2：以该顶点开始的DFS路径中不包含环\n        vector<int> state(numCourses,0);\n        \n        for(auto p : prerequisites)\n            graph[p.second].push_back(p.first);\n        \n        for(int v = 0;v < numCourses;v++)\n            if(state[v] == 0 && !dfs(graph,state,v))\n                return false;\n        \n        return true;\n    }\nprivate:\n    bool dfs(vector<vector<int>> &graph,vector<int> &state,int v){\n        if(state[v] == 1)  return false;\n        else if(state[v] == 2) return true;\n        \n        state[v] = 1;//当前顶点标记为已访问\n        for(int v2 : graph[v])\n            if(!dfs(graph,state,v2))\n                return false;\n        \n        state[v] = 2;//以当前顶点开始的DFS路径中不包含环\n        return true;\n    }\n};\n```\n', 'https://leetcode.com/problems/course-schedule/description/', 'algorithm', '图', 1, 1);
INSERT INTO `problems` VALUES (149, '2021-01-17 13:00:09.733', '2021-01-17 13:00:09.733', NULL, '摆动排序', '给定一个无序的数组 nums，将它重新排列成 nums[0] < nums[1] > nums[2] < nums[3]... 的顺序。\n\n示例 1:\n\n```\n输入: nums = [1, 5, 1, 1, 6, 4]\n输出: 一个可能的答案是 [1, 4, 1, 5, 1, 6]\n```\n\n示例 2:\n\n```\n输入: nums = [1, 3, 2, 2, 3, 1]\n输出: 一个可能的答案是 [2, 3, 1, 3, 1, 2]\n```\n\n说明：你可以假设所有输入都会得到有效的结果。\n\n进阶：你能用 O(n) 时间复杂度和 / 或原地 O(1) 额外空间来实现吗？\n\n', '先不管题目中对时间复杂度和空间复杂度的要求，看看这个问题有什么方法\n\n假设数组已经按要求排好序，我们可以将元素分成两组：\n\n1. 奇数组（odd group）：包含所有下标为奇数的元素\n2. 偶数组（even group）：包含所有下标为偶数的元素\n\n从“摆动序列”的性质可知，**奇数组中的每个元素，都比排好序的数组中它的左右邻居大**。只要能满足这个性质，就是一个正确的结果。但是，如果对于奇数组和偶数组只有这一条性质，那么想要解决这个问题还是无从下手。因此，可以对两个组添加一条性质：**所有奇数组中的元素都大于等于偶数组中的元素**。在添加这一条性质之后，我们依然可以通过转化使得前一条性质依然成立\n\n**证明**：\n\n假设有\n\n```\n奇数组 = [...,a,...]\n偶数组 = [...,b,...]\n\n并且 a < b\n```\n\n假设```a```的邻居为```c```和```d```，```b```的邻居为```e```和```f```，根据第一条性质有：\n\n```\nc < a 并且 d < a\nb < e 并且 b < f\n```\n\n那么此时可以将```a```和```b```进行交换，交换后a变大为b，b变小为a，因此上述性质依然成立。经过大量这种交换后，最终奇数组中的任一元素都会大于等于偶数组中的所有元素。性质二描述了一种全局关系状态\n\n有了性质二，就可以按下列2个步骤解决：\n\n1. **Partition**：将数组分成**奇数组(L)**和**偶数组(S)**，```S```拥有```m```（```(n+1)/2```）个元素，```L```拥有剩余的元素。并且两组中的元素符合性质二。L中的元素不会比S中的多\n2. **Placement**：将S中的元素放置到偶数下标，将L中的元素放置到奇数下标。但是S和L中可能包含重复元素，因此有可能放置后两个相邻元素相等从而产生错误。所以放置时需要一些技巧\n\n\n**首先，如果数组能够排成“摆动序列“，那么```S```和```L```中重复的元素不会超过```S```的大小，即```m```** ： 假设重复的元素超过了m，当数组排成”摆动序列后“，因为它们相等，所以这些重复元素不能成为彼此的邻居，那么它们就必须占据所有偶数下标或者所有奇数下标。然而，即使这样也还是会有残余的元素没有位置，因为所有奇数下标的数量和所有偶数下标的数量都不会超过m\n\n**然后，如果将来自S中的重复元素放置在尽可能小的偶数下标，将来自L中的重复元素放置在尽可能大的奇数下标，那么重复元素就不会出现相邻的情况**。假设这个重复元素在S中的总数为k1，在L中的总数为k2，```k = k1 + k2```为重复元素的总数\n\n* 如果数组大小n为偶数：\n    - 那么k <= m = n/2。在放置后，那么S中该重复元素最后一个的下标为```2 * (k1 - 1)```，L中该重复元素最后一个的下标为```(n - 1) - 2 * (k2 - 1)```。如果前一个下标比后一个下标至少小1，那么重复元素就不会相邻。这是成立的：```2 * (k1 - 1) + 1 < (n - 1) - 2 * (k2 - 1) <==> k1 + k2 < [n/2] + 1 and k1 + k2 = k <= n/2 = [n/2] < [n/2] + 1```\n* 如果数组大小n为奇数：\n    - 如果```k = (n + 1)/2```，只有当```k2 = 0```时，才能排序成”摆动序列“。例如，所有S中重复元素占据所有偶数下标。\n    - 否则有```k1 + k2 = k < (n + 1)/2 = [n/2] + 1```\n    无论哪种情况下，这样的放置策略都会分散重复元素，使得它们不会相邻\n\n一旦所有重复元素按上面的策略放置后，将所有S和L中的其余元素分别放置到剩余偶数下标和剩余奇数下标，最终得到了一个”摆动序列“\n\n#### 1）O(nlogn)时间 O(n)空间\n\n排序，将元素分为上述L和S两组。因为放置时可能占用了未遍历到的位置，所以使用一个预留数组，在进行遍历处理之前保存元素\n\n```c++\nclass Solution {\npublic:\n    void wiggleSort(vector<int>& nums) {\n        //m为偶数下标的个数\n        int n = nums.size(), m = (n + 1) >> 1;\n        vector<int> copy = nums;\n        sort(copy.begin(),copy.end());\n\n        //处理偶数组\n        //i: [m-1,...,0]（数组的前半部分，即偶数组的元素，共m个），先遍历到的是中间元素\n        //j: [0,2,4...]（放置的下标，从左往右放置，中间元素在左边）\n        for (int i = m - 1, j = 0; i >= 0; i--, j += 2) nums[j] = copy[i];\n        //处理奇数组\n        //i: [n-1,...,m]（数组的后半部分，即奇数组的元素），先遍历到的不是中间元素\n        //j: [1,3,5...]（放置的下标，从左往右放置，中间元素在右边）\n        for (int i = n - 1, j = 1; i >= m; i--, j += 2) nums[j] = copy[i];\n    }\n};\n```\n\n#### 2）O(n)时间 O(n)空间\n\n由于只需要将元素划分成S和L，因此没必要对数组进行排序，使用基于partition的方法找到中值，将数组分为S和L两部分，可以将排序的时间复杂度从O(nlogn)降到O(n)，从而整个时间复杂度变成O(n)\n\n#### 3）O(n)时间 O(1)空间\n\n```c++\nclass Solution {\npublic:\n    void wiggleSort(vector<int>& nums) {\n        //m为偶数下标的个数\n        int n = nums.size(), m = (n + 1) >> 1;\n        //lambda，将下标i进行映射\n        auto mapping=[n](int i)->int{return (1 + 2 * i) % (n | 1);};\n        //获取中值\n        auto miditr = nums.begin() + m - 1;\n        nth_element(nums.begin(), miditr , nums.end());\n        int median = *miditr;\n    \n        //j:          [0,1,2,3,...] （j > k时终止）\n        //mapping[j]: [1,3,5,...,0,2,4,...]\n        //\n        //i:          [0,1,2,3,...]\n        //mapping[i]: [1,3,5,...,0,2,4,...]\n        //k:          [n-1,n-2,...]\n        //mapping[k]: [...,4,2,0,...,5,3,1]\n        for (int i = 0, j = 0, k = n - 1; j <= k;) {\n            if (nums[mapping(j)] > median) //找到一个比中值大的数\n                swap(nums[mapping(i++)], nums[mapping(j++)]);\n            else if(nums[mapping(j)] < median)  //找到一个比中值小的数，这里j不变\n                swap(nums[mapping(j)], nums[mapping(k--)]);\n            else   //找到一个和中值相等的元素\n                j++;\n        }\n    }\n};\n```\n\n[参考](https://leetcode.com/problems/wiggle-sort-ii/discuss/77682/step-by-step-explanation-of-index-mapping-in-java)\n', 'https://leetcode.com/problems/wiggle-sort-ii/description/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (150, '2021-01-17 13:00:09.734', '2021-01-17 13:00:09.734', NULL, 'Excel表列序号', '给定一个Excel表格中的列名称，返回其相应的列序号。\n\n例如，\n\n```\n    A -> 1\n    B -> 2\n    C -> 3\n    ...\n    Z -> 26\n    AA -> 27\n    AB -> 28 \n    ...\n```\n\n示例 1:\n\n```\n输入: \"A\"\n输出: 1\n```\n\n示例 2:\n\n```\n输入: \"AB\"\n输出: 28\n```\n\n示例 3:\n\n```\n输入: \"ZY\"\n输出: 701\n```\n\n', '#### 1）从右往左\n\n```c++\nclass Solution {\npublic:\n    int titleToNumber(string s) {\n        int res = 0,tp = 1;\n        for(int i = s.length() - 1;i >= 0;i--){\n            res += (s[i] - \'A\' + 1) * tp;\n            tp *= 26;\n        }\n        return res;\n    }\n};\n```\n\n#### 2）从左往右\n\n```c++\nclass Solution {\npublic:\n    int titleToNumber(string s) {\n        int res = 0;\n        for(char c : s){\n            res = res * 26 + (c - \'A\' + 1);\n        }\n        return res;\n    }\n};\n```\n', 'https://leetcode.com/problems/excel-sheet-column-number/description/', 'algorithm', '数学', 1, 1);
INSERT INTO `problems` VALUES (151, '2021-01-17 13:00:09.734', '2021-01-17 13:00:09.734', NULL, '不用乘除取模实现整数除法', '给定两个整数，被除数 `dividend` 和除数 `divisor`。将两数相除，要求不使用乘法、除法和 mod 运算符。\n\n返回被除数 `dividend` 除以除数 `divisor` 得到的商。\n\n示例 1:\n\n```\n输入: dividend = 10, divisor = 3\n输出: 3\n```\n\n示例 2:\n\n```\n输入: dividend = 7, divisor = -3\n输出: -2\n```\n\n说明:\n\n* 被除数和除数均为 32 位有符号整数。\n* 除数不为 0。\n* 假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−2^31,  2^31 − 1]。本题中，如果除法结果溢出，则返回 2^31 − 1\n\n', '#### 1）方法一\n\n循环递减，每次减去除数，直到小于除数，记录次数\n\n> 效率低，时间开销大\n\n#### 2）方法二\n\n如果被除数比除数的2倍大，则将除数变为当前值的2倍（因此，次数也成倍增加），直到被除数小于除数的2倍。然后将被除数减去除数，处理剩下的值，例如被除数为15，除数为2，有下列过程：\n\n* 15大于2，因此初始化计数为1\n* 由于15大于4(2<<1)，那么15里面肯定包含2个2，计数翻倍，变为2\n* 由于15大于8(4<<1)，那么15里面肯定包含4个2，计数翻倍，变为4\n* 由于15小于16(8<<1)，说明15不可能包含8个2，因此15减去8(4个2)，变为7\n* 同样，对7进行上面的处理，新一轮计数为2（7包含2个2，不能包含4个2），因此总计数为6，将7减去4\n* 对3进行上面的处理，这一轮计数为1，因此总计数变为7，将3减去2\n* 对1进行上述处理，由于1小于2，所以停止\n* 因此，15里面包含7个2，即商为7\n\n> 由于每次将除数翻倍，所以会比方法一快很多\n\n```c++\nclass Solution {\npublic:\n    int divide(int dividend, int divisor) {\n        if(divisor == 0 || dividend == INT_MIN && divisor == -1)\n            return INT_MAX;\n        \n        bool negative = !((dividend < 0 && divisor < 0) || (dividend > 0 && divisor > 0));\n        long long dvd = labs(dividend);\n        long long dvs = labs(divisor);\n        \n        long long res = 0 ;\n        while(dvd >= dvs){\n            long long tp = dvs;\n            long long count = 1;\n            while(dvd >= (tp << 1)){\n                count <<= 1;\n                tp <<= 1;\n            }\n            res += count;\n            dvd -= tp;\n        }\n        \n        res = negative ? res * -1 : res;\n        return res;\n    }\n};\n```\n', 'https://leetcode.com/problems/divide-two-integers/description/', 'algorithm', '数学', 1, 1);
INSERT INTO `problems` VALUES (152, '2021-01-17 13:00:09.735', '2021-01-17 13:00:09.735', NULL, '包含max函数的队列', '请定义一个队列并实现函数max得到队列里的最大值，要求函数max、push_back和pop_front的时间复杂度都是O(1)\n\n', '队列类包含2个队列成员和1个下标成员。2个队列成员中，一个保存数据，一个保存最大值。最大值队列运用了[滑动窗口](#滑动窗口的最大值)的思想，首元素最大。两个队列中保存的元素都是一个类型，该类型包含元素值和元素的下标，只有当数据队列首部出队的元素下标和最大值队列首部的最大值元素是同一元素（下标相同）时，最大值才出队\n', '', 'algorithm', '栈和队列', 1, 1);
INSERT INTO `problems` VALUES (153, '2021-01-17 13:00:09.736', '2021-01-17 13:00:09.736', NULL, '买卖股票的最佳时机II', '给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。\n\n设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。\n\n注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。\n\n示例 1:\n\n```\n输入: [7,1,5,3,6,4]\n输出: 7\n解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。\n     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。\n```\n\n示例 2:\n\n```\n输入: [1,2,3,4,5]\n输出: 4\n解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。\n     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。\n     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。\n```\n\n示例 3:\n\n```\n输入: [7,6,4,3,1]\n输出: 0\n解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。\n```\n\n', '每次如果遇到一个更小的价格，那么更新买入的价格buy。否则，如果遇到一个更大的价格，那么立即结算，将利润加入到结果中，并且更新买入的价格。如果不立即卖出，当遇到一个更大的价格时再卖出，结果也是相同的，但是这样无法预测往后是否会出现更高的价格，所以立即卖出更方便实现。如果不卖出，当遇到一个更小价格时，会更新买入的价格buy，那么这一笔利润就浪费了\n\n> 总的来说就是累加所有上升的走势\n\n```c++\nclass Solution {\npublic:\n    int maxProfit(vector<int>& prices) {\n        int buy = INT_MAX,maxprofit = 0;\n        for(int i = 0;i < prices.size();i++){\n            if(prices[i] < buy) buy = prices[i];\n            else if(prices[i] > buy){\n                maxprofit += prices[i] - buy;\n                buy = prices[i];\n            }\n        }\n        return maxprofit;\n    }\n};\n```\n', 'https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/description/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (154, '2021-01-17 13:00:09.736', '2021-01-17 13:00:09.736', NULL, '海量日志中提取访问百度次数最多的IP', '海量日志数据，提取出某日访问百度次数最多的那个IP，假设当前机器可用内存较小，无法一次性读入日志文件\n\n', '采用分治的思想\n\n使用hash(ip)%n将日志记录分到n个小文件中，在每个小文件中使用hash_map的方法统计每个ip的频度，再利用堆排序按频度对ip进行排序：\n\n1. IP地址最多有2^32=4G种可能的取值，按照IP地址的hash(IP)%1024值，将海量日志存储到1024个小文件中。每个小文件最多包含4M个IP地址\n2. 对于每个小文件，可以构建一个IP作为key，出现次数作为value的hash_map，并记录当前出现次数最多的1个IP地址\n3. 有了1024个小文件中的出现次数最多的IP，就可以得到总体上出现次数最多的IP\n', '', 'algorithm', '海量数据', 1, 1);
INSERT INTO `problems` VALUES (155, '2021-01-17 13:00:09.737', '2021-01-17 13:00:09.737', NULL, '2.5亿整数中只出现一次的整数', '在2.5亿个整数中找出只出现一次的整数，内存不足以容纳这2.5亿个整数\n\n', '**方案一**：采用2bit位图（每个数分配2bit，00表示不存在，01表示出现一次，10表示多次，11无意义），共需内存(2^32)\\*2bit=1GB内存，然后依次扫描2.5亿个整数，查看Bitmap中对应位，如果是00则变为01，01变为10，10保持不变。扫描结束后，查看bitmap，把对应位是01的整数输出\n\n**方案二**：也可以采用Hash映射的方法，划分成多个小文件。然后在小文件中利用hash_map找出不重复的整数\n', '', 'algorithm', '海量数据', 1, 1);
INSERT INTO `problems` VALUES (156, '2021-01-17 13:00:09.737', '2021-01-17 13:00:09.737', NULL, '圆圈中最后剩下的数', 'n个小朋友们围成一个大圈。然后,他随机指定一个数m,让编号为0的小朋友开始报数。每次喊到m-1的那个小朋友要出列唱首歌,然后可以在礼品箱中任意的挑选礼物,并且不再回到圈中,从他的下一个小朋友开始,继续0...m-1报数....这样下去....直到剩下最后一个小朋友,可以不用表演,并且拿到牛客名贵的“名侦探柯南”典藏版。请你试着想下,哪个小朋友会得到这份礼品呢？(注：小朋友的编号是从0到n-1)\n\n', '构造一个环状链表，每次删除第m个节点，直到最后只剩1个节点，节点的值为小朋友的编号\n\n```c++\nclass Solution {\npublic:\n    int LastRemaining_Solution(int n, int m)\n    {\n        if(n <= 0 || m <= 0)    return -1;\n\n        list<int> ls;\n\n        for(int i = 0;i < n;i++)    ls.push_back(i);\n\n        list<int>::iterator it = ls.begin();\n        while(n > 1){//还有2个或2个以上的小朋友\n            int tp = m - 1;\n            while(tp--){\n                if(it == ls.end())    it = ls.begin();\n                it++;\n            }\n            if(it == ls.end())    it = ls.begin();\n            it = ls.erase(it);\n            n--;\n        }\n\n        if(it == ls.end())    it = ls.begin();\n\n        return *it;\n    }\n};\n```\n', 'https://www.nowcoder.com/practice/f78a359491e64a50bce2d89cff857eb6?tpId=13&tqId=11199&tPage=3&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking', 'algorithm', '链表', 1, 1);
INSERT INTO `problems` VALUES (157, '2021-01-17 13:00:09.738', '2021-01-17 13:00:09.738', NULL, '电话号码的字符组合', '给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。\n给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。\n\n![](../pic/leetcode-17-1.png)\n\n示例:\n\n```\n输入：\"23\"\n输出：[\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"].\n```\n\n说明:\n\n尽管上面的答案是按字典序排列的，但是你可以任意选择答案输出的顺序。\n\n', '\n对于每个当前正在处理的数字，遍历这个数字的所有字母，将其添加到所有结果字符串的末尾，组成新的结果，然后处理下一个数字\n\n<div align=\"center\"> <img src=\"https://github.com/arkingc/note/raw/master/pic/leetcode-17-2.png\"/> </div>\n\n```c++\nvector<string> letterCombinations(string digits) {\n    vector<string> res;\n    string charmap[10] = {\"0\", \"1\", \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqrs\", \"tuv\", \"wxyz\"};\n    res.push_back(\"\");\n    for (int i = 0; i < digits.size(); i++)\n    {\n        vector<string> tempres;\n        string chars = charmap[digits[i] - \'0\'];\n        for (int c = 0; c < chars.size();c++)\n            for (int j = 0; j < res.size();j++)\n                tempres.push_back(res[j]+chars[c]);\n        res = tempres;\n    }\n    return res;\n}\n```\n', 'https://leetcode.com/problems/letter-combinations-of-a-phone-number/description/', 'algorithm', '', 1, 1);
INSERT INTO `problems` VALUES (158, '2021-01-17 13:00:09.738', '2021-01-17 13:00:09.738', NULL, '和为target的数字组合', '给定一个无重复元素的数组 `candidates` 和一个目标数 `target` ，找出 `candidates`中所有可以使数字和为 `target` 的组合。`candidates` 中的数字可以无限制重复被选取。\n\n说明：\n\n* 所有数字（包括 target）都是正整数。\n* 解集不能包含重复的组合。 \n\n示例 1:\n\n```\n输入: candidates = [2,3,6,7], target = 7,\n所求解集为:\n[\n  [7],\n  [2,2,3]\n]\n```\n\n示例 2:\n\n```\n输入: candidates = [2,3,5], target = 8,\n所求解集为:\n[\n  [2,2,2,2],\n  [2,3,3],\n  [3,5]\n]\n```\n\n', '对于每个数字，可以选择要或者不要，使用一个数组set来保存选择要的数字\n\n在做下一次选择时，可能有两种情况：\n\n1. set中的数字和已经等于target，此时将set存入结果中\n2. 如果1不成立，并且到达结尾，此时不存储set，返回上一层调用（如果先进行了排序，那么如果target已经小于当前元素，也返回上一层调用，此时不必递归到结尾）\n\n由于允许重复使用一个数字，如果选择使用这个数字，因为可能会重复选择，所以继续在当前位置处理。如果不选择使用这个数字，则继续处理下一个数字\n\n可以先对数组进行排序，如果加上当前数字的总和已经超过target，则停止这个路径的处理。通过剪枝，去掉不可能的子集\n\n> 每一条路径不满足要求时，在回溯继续尝试下一路径前，需要弹出set中保存的上一路径的节点\n\n```c++\nclass Solution {\npublic:\n    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {\n        std::sort(candidates.begin(),candidates.end());\n        vector<vector<int>> res;\n        vector<int> set;\n        dfs(candidates,target,0,res,set);\n\n        return res;\n    }\nprivate:\n    void dfs(const vector<int> &candidates,int target,int idx,vector<vector<int>> &res,vector<int> &set){\n        if(!target){\n            res.push_back(set);\n            return;\n        }\n        if(idx == candidates.size())    return;\n\n        if(target >= candidates[idx]){\n            dfs(candidates,target,idx + 1,res,set);\n            set.push_back(candidates[idx]);\n            dfs(candidates,target - candidates[idx],idx,res,set);\n            set.pop_back();\n        }\n    }\n};\n```\n', 'https://leetcode.com/problems/combination-sum/description/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (159, '2021-01-17 13:00:09.739', '2021-01-17 13:00:09.739', NULL, '有效数独', '判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。\n\n1. 数字 1-9 在每一行只能出现一次。\n2. 数字 1-9 在每一列只能出现一次。\n3. 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。\n\n![](../pic/leetcode-36-1.png)\n\n数独部分空格内已填入了数字，空白格用 \'.\' 表示\n\n说明:\n\n* 一个有效的数独（部分已被填充）不一定是可解的。\n* 只需要根据以上规则，验证已经填入的数字是否有效即可。\n* 给定数独序列只包含数字 1-9 和字符 \'.\' 。\n* 给定数独永远是 9x9 形式的。\n\n', '按照数独的要求：\n\n1. 每行不能包含相同的数字\n2. 每列不能包含相同的数字\n3. 9个3\\*3的子格不能包含相同的数字\n\n因此，可以分别对3个条件进行检测，如果都满足，那么返回true，否则返回false\n\n问题是怎么判断一行，一列，或者一个3\\*3的子格是否不包含重复的数字？\n\n由于数字范围是0~9，因此可以创建一个数组nums，记录每个数字是否出现，如果出现1，则将nums[1]设为1，某个数已经出现过，即nums[i]!=0，说明数字重复出现，因此返回false\n\n```c++\nclass Solution {\npublic:\n    bool isValidSudoku(vector<vector<char>>& board) {\n        if(board.size() != 9 && board[0].size() != 9)   return false;\n        \n        int nums[10],i,j,m;\n        //1.检测每行是否满足要求\n        for(i = 0;i < 9;i++){\n            for(m = 0;m < 10;m++)   nums[m] = 0;\n            for(j = 0;j < 9;j++){\n                if(board[i][j] == \'.\')  continue;\n                else if(board[i][j] >= \'0\' && board[i][j] <= \'9\'){\n                    if(nums[board[i][j] - \'0\'] == 0)    nums[board[i][j] - \'0\'] = 1;\n                    else    return false;\n                }\n                else    return false;\n            }\n        }\n        \n        //2.检测每列是否满足要求\n        for(j = 0;j < 9;j++){\n            for(m = 0;m < 10;m++)    nums[m] = 0;\n            for(i = 0;i < 9;i++){\n                if(board[i][j] == \'.\')  continue;\n                if(nums[board[i][j] - \'0\'] == 0)    nums[board[i][j] - \'0\'] = 1;\n                else return false;\n            }\n        }\n        \n        //3.检测9个子格是否满足要求\n        int x,y;\n        for(i = 0;i < 9;i += 3){\n            for(j = 0;j < 9;j += 3){\n                //检查每个3*3子格\n                for(m = 0;m < 10;m++)    nums[m] = 0;\n                for(x = i;x < i + 3;x++){\n                    for(y = j;y < j + 3;y++){\n                        if(board[x][y] == \'.\')  continue;\n                        if(nums[board[x][y] - \'0\'] == 0)    nums[board[x][y] - \'0\'] = 1;\n                        else return false;\n                    }\n                }\n            }\n        }\n        \n        return true;\n    }\n};\n```\n', 'https://leetcode.com/problems/valid-sudoku/description/', 'algorithm', '数学', 1, 1);
INSERT INTO `problems` VALUES (160, '2021-01-17 13:00:09.739', '2021-01-17 13:00:09.739', NULL, '对称的二叉树', '给定一个二叉树，检查它是否是镜像对称的\n\n例如，二叉树 [1,2,2,3,4,4,3] 是对称的\n\n```\n    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\n```\n\n但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:\n\n```\n    1\n   / \\\n  2   2\n   \\   \\\n   3    3\n```\n\n', '#### 1）递归\n\n```c++\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool isSymmetric(TreeNode* root) {\n        if(!root)   return true;\n        \n        TreeNode *nd1 = root->left,*nd2 = root->right;\n        return equalNode(nd1,nd2);\n    }\n    \nprivate:\n    bool equalNode(TreeNode* nd1,TreeNode* nd2){\n        if(!nd1)    return !nd2;\n        if(!nd2)    return false;\n        \n        if(nd1->val == nd2->val)\n            return equalNode(nd1->left,nd2->right) && equalNode(nd1->right,nd2->left);\n        return false;\n    }\n};\n```\n\n#### 2）迭代\n\n```c++\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool isSymmetric(TreeNode* root) {\n        if(!root)   return true;\n        \n        stack<TreeNode*> s;\n        s.push(root->left);\n        s.push(root->right);\n        while(!s.empty()){\n            TreeNode *nd1 = s.top();\n            s.pop();\n            TreeNode *nd2 = s.top();\n            s.pop();\n            if(!nd1 && !nd2)    continue;\n            else if(!nd1 && nd2)    return false;\n            else if(nd1 && !nd2)    return false;\n            else if(nd1->val != nd2->val)   return false;\n            s.push(nd1->left),s.push(nd2->right);\n            s.push(nd1->right),s.push(nd2->left);\n        }\n        \n        return true;\n    }\n};\n```\n', 'https://www.nowcoder.com/practice/ff05d44dfdb04e1d83bdbdab320efbcb?tpId=13&tqId=11211&tPage=3&rp=3&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking', 'algorithm', '树', 1, 1);
INSERT INTO `problems` VALUES (161, '2021-01-17 13:00:09.740', '2021-01-17 13:00:09.740', NULL, '数组的三元升序子序列', '给定一个未排序的数组，请判断这个数组中是否存在长度为3的递增的子序列。\n\n正式的数学表达如下:\n\n> 如果存在这样的 i, j, k,  且满足 0 ≤ i < j < k ≤ n-1，  \n> 使得 arr[i] < arr[j] < arr[k] ，返回 true ; 否则返回 false 。\n\n要求算法时间复杂度为O(n)，空间复杂度为O(1) 。\n\n示例:\n\n```\n输入 [1, 2, 3, 4, 5],\n输出 true.\n\n输入 [5, 4, 3, 2, 1],\n输出 false.\n```\n\n', '维护一个二元升序子序列，即使用一个变量small，和一个变量big。遍历数组：\n\n* 如果一个数小于或等于small，则更新small\n* 如果大于small，但是小于等于big，则更新big\n* 如果大于big，那么就找到一个三元升序子序列\n\n这个地方可能不太好理解的是：如果在更新完small后，出现了一个大于big的数，那么判断为找到了一个三元升序子序列。这种情况下，big的最后一次更新在small前，small，big和最后大于big的这个数的位置顺序是：big,small,大于big的数。这个顺序不是一个三元升序序列，但是我们判断结果是找到了三元升序子序列，这个解决是对的，但是上面这3个数并不是正确的升序序列\n\n几个例子，假设初始数组如下：\n\n```\n2,3,1,4\n```\n\n处理到3时：\n\n```\nsmall = 2\nbig = 3\n```\n\n处理1。因为1小于small，所以更新small：\n\n```\nsmall = 1\nbig = 3\n```\n\n处理4。因为4大于big，所以判断为找到了三元升序子序列\n\n此时3个数为1,3,4，但是在数组中对应的顺序是3,1,4。那为什么结果是对的？因为我们判断为true的条件是是：找到一个大于big的数。因为当找到一个大于small的数时，才会更新big，虽然这里最后更新了small，但是在最后一次更新big之前，肯定更新过small，所以数组中确实是存在升序的三元子序列。也就是说，真正的三元升序子序列是2,3,4\n\n```c++\nclass Solution {\npublic:\n    bool increasingTriplet(vector<int>& nums) {\n        if(nums.size() < 3) return false;\n        \n        int min = INT_MAX,max = INT_MAX;\n        for(int e : nums){\n            if(e <= min) min = e;\n            else if(e <= max)    max = e;\n            else    return true;\n        }\n        \n        return false;\n    }\n};\n```\n', 'https://leetcode.com/problems/increasing-triplet-subsequence/description/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (162, '2021-01-17 13:00:09.741', '2021-01-17 13:00:09.741', NULL, '倒排索引法', '', '**倒排索引**也常被称为**反向索引**、**置入档案**、**反向档案**，是一种索引方法，用来存储在全文检索下某个单词在一个文档或者一组文档中的存储位置的映射。是**文档检索系统中最常用**的数据结构\n\n> 适用范围：搜索引擎的关键字查询\n\n假设存在3个文本T0、T1、T2：\n\n```\nT0 = \"it is what it is\"\nT1 = \"what is it\"\nT2 = \"it is a banana\"\n```\n\n能够得到下面的反向文件索引：\n\n```\n\"a\"：{2}\n\"banana\"：{2}\n\"is\"：{0,1,2}\n\"it\"：{0,1,2}\n\"what\"：{0,1}\n```\n\n当用户检索的条件为\"what\"、\"is\"和\"it\"时，将分别查询这三个关键词对应的文本集合，然后求对应集合的交集。可见，倒排索引在处理复杂的多关键字查询时，可在倒排表中先完成查询的并、交等逻辑运算，得到结果后再对记录进行存取\n\n> 倒排索引是相对正向索引而言的，正向索引是用来存储每个文档的单词的列表、在正向索引中，文档占据了中心的位置，每个文档指向了一个它所包含的索引项的序列。也就是说文档指向了它包含的那些单词，而反向索引则是单词指向了包含它的文档\n', '', 'algorithm', '海量数据', 1, 1);
INSERT INTO `problems` VALUES (163, '2021-01-17 13:00:09.741', '2021-01-17 13:00:09.741', NULL, '颜色分类', '给定一个包含红色、白色和蓝色，一共 n 个元素的数组，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。\n\n此题中，我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。\n\n注意:\n\n不能使用代码库中的排序函数来解决这道题。\n\n示例:\n\n```\n输入: [2,0,2,1,1,0]\n输出: [0,0,1,1,2,2]\n```\n\n进阶：\n\n* 一个直观的解决方案是使用计数排序的两趟扫描算法。\n首先，迭代计算出0、1 和 2 元素的个数，然后按照0、1、2的排序，重写当前数组。\n* 你能想出一个仅使用常数空间的一趟扫描算法吗？\n\n', '#### 1）2趟扫描\n\n* 第一次：计算出每种颜色的数量\n* 第二次：根据每种颜色的数量修改数组\n\n```c++\nclass Solution {\npublic:\n    void sortColors(vector<int>& nums) {\n        int redcount = 0, whitecount = 0;\n        \n        for(int i = 0;i < nums.size();i++){\n            if (nums[i] == 0)       redcount++;\n            else if(nums[i] == 1)   whitecount++;\n        }\n        \n        for(int i = 0;i<nums.size();i++){\n            if(redcount-- > 0)          nums[i] = 0;\n            else if(whitecount-- > 0)   nums[i] = 1;\n            else                        nums[i] = 2;\n        }\n    }\n};\n```\n\n#### 2）1趟扫描\n\n使用3个指针：`l`，`m`，`r`。`l`左边的元素都为`0`，将其初始化为`0`，`r`右边的元素都为`2`，将其初始化为`nums.size() - 1`\n\n首先往右移动`l`、往左移动`r`，使这2个指针到达正确的位置。然后初始化`m`为`l`，使用`m`从左往右遍历中间的元素，因此`nums[m]`可能有3个值：\n\n* 如果`nums[m] == 1`，那么不需要交换，直接右移`m`\n* 如果`nums[m] == 0`，因为`l`位置的值为`1`，因此交换`m`和`l`位置的值，然后右移`l`和`m`\n* 如果`nums[m] == 2`，`m`位置的值可能为`0`也可能为`1`，因此交换`m`和`r`位置的值，然后左移`r`。但是需不需要右移`m`？不需要。因为如果交换后`m`位置的值为1，那么下次遍历会递增`m`；如果交换后`m`位置的值为0，那么还要与`l`位置的值进行交换。因此`m`保持不动\n\n```c++\nclass Solution {\npublic:\n    void sortColors(vector<int>& nums) {\n        int l = 0,r = nums.size() - 1;\n        while(l < nums.size() && nums[l] == 0)  l++;\n        while(r >= 0 && nums[r] == 2)   r--;\n        int m = l;\n        while(m <= r){\n            if(nums[m] == 0)  swap(nums[m++],nums[l++]);\n            else if(nums[m] == 1) m++;\n            else if(nums[m] == 2) swap(nums[m],nums[r--]);\n        }\n    }\n};\n```\n', 'https://leetcode.com/problems/sort-colors/description/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (164, '2021-01-17 13:00:09.742', '2021-01-17 13:00:09.742', NULL, '缺失的数字', '一个长度为`n-1`的递增排序数组中的所有数字都是唯一的，并且每个数字都在范围`0~n-1`之内。在范围`0~n-1`内的`n`个数字中有且只有一个数字不在该数组中，请找出这个数字\n\n', '数组中开始的一些数字与它们的下标相同，如果m不在数组中，则下标m位置的元素是m+1...问题转换为找到数组中下标和元素值不相等的第一个元素\n', '', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (165, '2021-01-17 13:00:09.743', '2021-01-17 13:00:09.743', NULL, '实现位图', '实现Bit-map，要求能够表示的最大值为10,000,000\n\n', '位图(Bit-map)的原理就是使用位数组来表示某些元素是否存在，由于采用了bit为单位来存储数据，因此在存储空间方面，可以大大节省，故适用于海量数据的快速查找、判断、删除等\n\n假设数值范围是[0,7]，有5个元素(4,7,2,5,3)。需要对这5个元素排序，如果使用位图来排序，总共需要8位，因为0~7一共8个数字，处理步骤如下：\n\n* **设置位图状态**：遍历数组，如果包含0~7中某个元素，则设置位图8个位中相应的位为1\n* **遍历位图，输出结果**：遍历位图，输出排序结果\n\n<div align=\"center\"> <img src=\"https://github.com/arkingc/note/raw/master/pic/al-bitmap.png\"/> </div>\n\n> * 假设有100亿个数(10,000,000,000)，如果使用int(4字节)数组实现位图，每个int可以表示32个数，那么可以使用100亿/8，大约1GB左右的空间就能存下所有100亿个数\n> * **注意，由于位图每位只有0和1，所以只能表示1个元素是否存在，如果数组包含相同元素，位图没有办法记录。位图很适合在海量数值中查找某个数值是否存在。如果希望用位图记录一个数字是否多次出现，可以用2bit位图（00不存在，01存在，10出现多次，11无意义）**\n\n```c++\n#define BITWORD 32\n#define SHIFT 5   \n#define MASK 0x1F //000..0011111(31)\n#define N 10000000\n\nint a[1+N/BITWORD];//一个int 32位（32位、64位平台）\n\n/*将第i位设置为1，i>=0*/\nvoid set(int i)\n{\n    //右移1位相当于除以2，右移SHIFT位相当于除以2^5=32，a[i >> SHIFT]相当于找到了i所在的那个int数组中的元素（32位）\n    //i & MASK相当于 i % 32得到余数，1 << (i & MASK)将从右至左的(i & MASK)偏移量位设为1\n    a[i >> SHIFT] |= (1 << (i & MASK));\n}\n\n/*将第i位设置为0*/\nvoid clr(int i)\n{\n    //右移1位相当于除以2，右移SHIFT位相当于除以2^5=32，a[i >> SHIFT]相当于找到了i所在的那个int数组中的元素\n    //1 << (i & MASK)是i的bit位偏移位置，对其取反就是该位置为0，其余位置为1\n    a[i >> SHIFT] &= ~(1 << (i & MASK));\n}\n\n/*返回第i位的状态*/\nint test(int i)\n{\n    return a[i >> SHIFT] & (1 << (i & MASK));\n}\n```\n', '', 'algorithm', '海量数据', 1, 1);
INSERT INTO `problems` VALUES (166, '2021-01-17 13:00:09.744', '2021-01-17 13:00:09.744', NULL, '字符流中第一个只出现一次的字符', '请实现一个函数用来找出字符流中第一个只出现一次的字符\n\n例如，当从字符流中只读出前两个字符\"go\"时，第一个只出现一次的字符是\"g\"。当从该字符流中读出前六个字符“google\"时，第一个只出现一次的字符是\"l\"\n\n', '> 和 [字符串中第一个只出现一次的字符](#字符串中第一个只出现一次的字符) 的不同的是：字符流只能读取一次，因此无法统计每个字符的出现次数，然后从头遍历，找到第一个只出现1次的字符\n\n使用一个辅助数组，但是辅助数组记录字符首次出现的下标（初始化为-1，多次出现的字符下标为-2），每次遍历数组，查找下标最小的字符，就是结果\n\n```c++\nclass Solution\n{\npublic:\n  //Insert one char from stringstream\n    void Insert(char ch)\n    {\n         if(positions[ch] == -1)\n            positions[ch] = index;\n         else\n             positions[ch] = -2;\n        index++;\n    }\n  //return the first appearence once char in current stringstream\n    char FirstAppearingOnce()\n    {\n        int minidx = index;\n        char ch;\n        for(int j = 0;j < 256;j++)\n            if(positions[j] >= 0 && positions[j] < minidx){\n                minidx = positions[j];\n                ch = j;\n            }\n        if (minidx == index)\n            ch = \'#\';\n        return ch;\n    }\n    Solution(){\n        index = 0;\n        for(int i = 0;i < 256;i++)\n            positions[i] = -1;\n    }\nprivate:\n    int index;\n    int positions[256];\n};\n```\n', 'https://www.nowcoder.com/practice/00de97733b8e4f97a3fb5c680ee10720?tpId=13&tqId=11207&tPage=3&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking', 'algorithm', '字符串', 1, 1);
INSERT INTO `problems` VALUES (167, '2021-01-17 13:00:09.744', '2021-01-17 13:00:09.744', NULL, '单词拆分I', '给定一个非空字符串 s 和一个包含非空单词列表的字典 wordDict，判定 s 是否可以被空格拆分为一个或多个在字典中出现的单词。\n\n说明：\n\n* 拆分时可以重复使用字典中的单词。\n* 你可以假设字典中没有重复的单词。\n\n示例 1：\n\n```\n输入: s = \"leetcode\", wordDict = [\"leet\", \"code\"]\n输出: true\n解释: 返回 true 因为 \"leetcode\" 可以被拆分成 \"leet code\"。\n```\n\n示例 2：\n\n```\n输入: s = \"applepenapple\", wordDict = [\"apple\", \"pen\"]\n输出: true\n解释: 返回 true 因为 \"applepenapple\" 可以被拆分成 \"apple pen apple\"。\n     注意你可以重复使用字典中的单词。\n```\n\n示例 3：\n\n```\n输入: s = \"catsandog\", wordDict = [\"cats\", \"dog\", \"sand\", \"and\", \"cat\"]\n输出: false\n```\n\n', '对于字符串“leetcode”：\n\n* 如果字符串\"l\"存在于字典中，则字符串\"leetcode\"能否由字典中的单词构成取决于字符串“eetcode”能否由字典中的单词构成\n* 如果字符串“l”不在字典中，则判断字符串“le”是否字典中，如果在，则字符串“leetcode”能否由字典中的单词构成取决于字符串“etcode”能否由字典中的单词构成\n* 如果字符串“le”也不在字典中，那么判断字符串\"lee\"是否在字典中，如果在，则字符串“leetcode”能否由字典中的单词构成取决于字符串\"tcode\"能否由字典中的单词构成\n* ...\n\n令state[i]表示字符串中从下标i开始到结尾的子串能否由字典中的单词构成。对于\"leetcode\"：\n\n* state[0]就表示“leetcode”能否由字典中的单词构成\n* state[2]就表示“etcode”能否由字典中的单词构成\n* state[8]就表示\"\"能够由字典中的单词构成\n\n假设substr(i,j)表示字符串s中下标i到下标j的子串，那么state[i] = dict.contain(substr(i,j)) && state[j + 1]\n\n* **时间复杂度**：O(n^2)（n为字符串长度）\n* **空间复杂度**：O(n + m)（n为字符串长度，m为字典中单词数）\n\n```c++\nclass Solution {\npublic:\n    bool wordBreak(string s, vector<string>& wordDict) {\n        unordered_set<string> dict(wordDict.begin(),wordDict.end());\n        bool *state = new bool[s.size() + 1];\n        for(int i = 0;i < s.size();i++) state[i] = false;\n        state[s.size()] = true;\n        \n        for(int idx = s.size() - 1;idx >= 0;idx--){\n            for(int len = 1;len <= s.size() - idx && !state[idx];len++)\n                if(dict.find(s.substr(idx,len)) != dict.end())\n                    state[idx] = state[idx + len];\n        }\n        \n        return state[0];\n    }\n};\n```\n', 'https://leetcode.com/problems/word-break/description/', 'algorithm', '字符串', 1, 1);
INSERT INTO `problems` VALUES (168, '2021-01-17 13:00:09.745', '2021-01-17 13:00:09.745', NULL, '岛屿的最大面积', '给定一个包含了一些 0 和 1的非空二维数组 `grid` , 一个 岛屿 是由四个方向 (水平或垂直) 的 `1` (代表土地) 构成的组合。你可以假设二维矩阵的四个边缘都被水包围着。\n\n找到给定的二维数组中最大的岛屿面积。(如果没有岛屿，则返回面积为0。)\n\n示例 1:\n\n```\n[[0,0,1,0,0,0,0,1,0,0,0,0,0],\n [0,0,0,0,0,0,0,1,1,1,0,0,0],\n [0,1,1,0,1,0,0,0,0,0,0,0,0],\n [0,1,0,0,1,1,0,0,1,0,1,0,0],\n [0,1,0,0,1,1,0,0,1,1,1,0,0],\n [0,0,0,0,0,0,0,0,0,0,1,0,0],\n [0,0,0,0,0,0,0,1,1,1,0,0,0],\n [0,0,0,0,0,0,0,1,1,0,0,0,0]]\n```\n\n对于上面这个给定矩阵应返回 \n`6`。注意答案不应该是`11`，因为岛屿只能包含水平或垂直的四个方向的`‘1’`。\n\n示例 2:\n\n```\n[[0,0,0,0,0,0,0,0]]\n```\n\n对于上面这个给定的矩阵, 返回 `0`。\n\n注意: 给定的矩阵`grid` 的长度和宽度都不超过 50。\n\n', '当遇到1时，使用DFS求该岛屿的面积，然后与最大值比较，如果更大则更新最大值。为了防止重复求相同岛屿的面积，在DFS过程中，将1设置为0\n\n```c++\nclass Solution {\npublic:\n    int maxAreaOfIsland(vector<vector<int>>& grid) {\n        if(grid.size() == 0)\n            return 0;\n        \n        int res = 0;\n        int rows = grid.size(),columns = grid[0].size();   \n        for(int i = 0;i < rows;i++){\n            for(int j = 0;j < columns;j++){\n                if(grid[i][j] == 1){\n                    int area = DFS(grid,i,j,rows,columns);\n                    res = area > res ? area : res; \n                }\n            }\n        }\n        \n        return res;\n    }\n    \n    int DFS(vector<vector<int>> &grid,int row,int column,int rows,int columns){\n        //越界或者不连通\n        if(row < 0 || row >= rows || column < 0 || column >= columns || grid[row][column] == 0)\n            return 0;\n        \n        int count = 1;\n        grid[row][column] = 0;//防止重复计算\n        /*遍历该顶点的四个方向*/\n        count += DFS(grid,row - 1,column,rows,columns);\n        count += DFS(grid,row + 1,column,rows,columns);\n        count += DFS(grid,row,column - 1,rows,columns);\n        count += DFS(grid,row,column + 1,rows,columns);\n        \n        return count;\n    }\n};\n```\n', 'https://leetcode.com/problems/max-area-of-island/description/', 'algorithm', '图', 1, 1);
INSERT INTO `problems` VALUES (169, '2021-01-17 13:00:09.745', '2021-01-17 13:00:09.745', NULL, '和为target的数字组合II', '给定一个数组 `candidates` 和一个目标数 `target` ，找出 `candidates` 中所有可以使数字和为 `target` 的组合。`candidates` 中的每个数字在每个组合中只能使用一次。\n\n说明：\n\n* 所有数字（包括目标数）都是正整数。\n* 解集不能包含重复的组合。 \n\n示例 1:\n\n```\n输入: candidates = [10,1,2,7,6,1,5], target = 8,\n所求解集为:\n[\n  [1, 7],\n  [1, 2, 5],\n  [2, 6],\n  [1, 1, 6]\n]\n```\n\n示例 2:\n\n```\n输入: candidates = [2,5,2,1,2], target = 5,\n所求解集为:\n[\n  [1,2,2],\n  [5]\n]\n```\n\n', '> 和上一题不同，这一题中，候选数组中可能包含相同的元素；并且每个元素只能使用一次\n\n对于一个数字，同样是使用或不使用两种选择，考虑候选数组[10,1,2,7,6,1,5]，排序后，数组为[1,1,2,5,6,7,10]，如果只通过递归来处理每个数使用或不使用这两种情况，那么当：\n\n* 第一个1使用，第二个1不使用\n* 第一个1不使用，第二个1使用\n\n这两种情况就会产生冗余\n\n因此，在DFS过程中，首先选择要当前元素，然后DFS，DFS返回后弹出当前元素。和前一题不同的是，下一个DFS需要跳过当前元素后面所有相同的元素，因为如果弹出当前元素，但是DFS又处理后面相同的元素，那么就会像上面一样出现冗余\n\n```c++\nclass Solution {\npublic:\n    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {\n        if(candidates.empty())  return vector<vector<int>>();\n        \n        vector<vector<int>> res;\n        vector<int> set;\n        \n        sort(candidates.begin(),candidates.end());\n        \n        dfs(candidates,target,res,set,0);\n        \n        return res;\n    }\n\nprivate:\n    void dfs(vector<int> &candidates,int target,vector<vector<int>> &res,vector<int> &set,int idx){\n        if(target == 0){\n            res.push_back(set);\n            return;\n        }\n\n        if(target >= candidates[idx]){\n            set.push_back(candidates[idx]);\n            dfs(candidates,target - candidates[idx],res,set,idx + 1);\n            set.pop_back();\n            while(idx < candidates.size() - 1 && candidates[idx + 1] == candidates[idx])    idx++;\n            if(idx != candidates.size() - 1)\n                dfs(candidates,target,res,set,idx + 1);\n        }\n    }\n};\n```\n', 'https://leetcode.com/problems/combination-sum-ii/description/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (170, '2021-01-17 13:00:09.746', '2021-01-17 13:00:09.746', NULL, '不用加减乘除做加法', '写一个函数，求两个整数之和，要求在函数体内不得使用+、-、\\*、/四则运算符号\n\n', '两数异或，会得到两数相加时忽略所有进位的结果，然后两数位与的结果左移1位，得到所有进位组成的数字，再对这两个结果重复上述步骤，直至没有进位\n\n```c++\nclass Solution {\npublic:\n    int Add(int num1, int num2)\n    {\n        int res = num1 ^ num2;\n        int jw = (num1 & num2) << 1;\n        \n        int tp;\n        while(jw){\n            tp = res;\n            res = res ^ jw;\n            jw = (tp & jw) << 1;\n        }\n        \n        return res;\n    }\n};\n```\n', 'https://www.nowcoder.com/practice/59ac416b4b944300b617d4f7f111b215?tpId=13&tqId=11201&tPage=3&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking', 'algorithm', '数学', 1, 1);
INSERT INTO `problems` VALUES (171, '2021-01-17 13:00:09.747', '2021-01-17 13:00:09.747', NULL, '连通所有城市的最短道路', '* 时间限制:10000ms\n* 单点时限:1000ms\n* 内存限制:256MB\n\n**描述**\n\n最近，小Hi很喜欢玩的一款游戏模拟城市开放出了新Mod，在这个Mod中，玩家可以拥有不止一个城市了！\n\n但是，问题也接踵而来——小Hi现在手上拥有N座城市，且已知这N座城市中任意两座城市之间建造道路所需要的费用，小Hi希望知道，最少花费多少就可以使得任意两座城市都可以通过所建造的道路互相到达（假设有A、B、C三座城市，只需要在AB之间和BC之间建造道路，那么AC之间也是可以通过这两条道路连通的）\n\n**输入**\n\n每个测试点（输入文件）有且仅有一组测试数据。\n\n在一组测试数据中：\n\n第1行为1个整数N，表示小Hi拥有的城市数量。\n\n接下来的N行，为一个N\\*N的矩阵A，描述任意两座城市之间建造道路所需要的费用，其中第i行第j个数为Aij，表示第i座城市和第j座城市之间建造道路所需要的费用。\n\n对于100%的数据，满足N<=10^3，对于任意i，满足Aii=0，对于任意i, j满足Aij=Aji, 0<Aij<10^4.\n\n**输出**\n\n对于每组测试数据，输出1个整数Ans，表示为了使任意两座城市都可以通过所建造的道路互相到达至少需要的建造费用。\n\n**样例输入**\n\n```\n5\n0 1005 6963 392 1182 \n1005 0 1599 4213 1451 \n6963 1599 0 9780 2789 \n392 4213 9780 0 5236 \n1182 1451 2789 5236 0 \n```\n\n**样例输出**\n\n```\n4178\n```\n\n', '```c++\n#include <iostream>\n#include <vector>\n#include <set>\n\nusing namespace std;\n\n#define rep(i,b,e) for(int i = b ; i < e ; i++)\n\nint prim(const vector<vector<int> > &graph) {\n    if(graph.empty() || graph.size() != graph[0].size())   return 0;\n\n    int vertex_number = graph.size();   //图顶点总数\n    set<int> rest_vertexes;             //所有未加入MST的顶点\n    rep(i,0,vertex_number)  rest_vertexes.insert(i);\n    rest_vertexes.erase(0);             //一开始所有顶点都未加入MST，所有顶点距MST的路径都是0，将序号最小的顶点加入MST\n    vector<int> min_path = graph[0];    //现在MST中只包含顶点0，其它顶点距MST的最小距离就是该顶点和顶点0的距离\n\n    //一直处理到所有顶点都加入MST\n    while(!rest_vertexes.empty()){\n        int min_vertex = *(rest_vertexes.begin());\n        //找到一个距MST最近的顶点\n        for(int vertex : rest_vertexes)\n            if(min_path[vertex] < min_path[min_vertex])\n                min_vertex = vertex;\n        //将这个顶点添加到MST，更新剩余节点到MST的最短距离\n        rest_vertexes.erase(min_vertex);\n        for(int vertex : rest_vertexes)\n            if(graph[min_vertex][vertex] < min_path[vertex])\n                min_path[vertex] = graph[min_vertex][vertex];\n    }\n\n    //返回MST所有边的权值和\n    int weight = 0;\n    rep(i,0,vertex_number)  weight += min_path[i];\n\n    return  weight;\n}\n\nint main(){\n\n    vector<vector<int> > graph;\n    int edge;\n\n    int n;\n    cin >> n;\n\n    rep(i, 0, n) {\n        vector<int> tp;\n        rep(j, 0, n) {\n            cin >> edge;\n            tp.push_back(edge);\n        }\n        graph.push_back(tp);\n    }\n\n    cout << prim(graph) << endl;\n\n    return 0;\n}\n```\n', 'http://hihocoder.com/problemset/problem/1097', 'algorithm', '图', 1, 1);
INSERT INTO `problems` VALUES (172, '2021-01-17 13:00:09.747', '2021-01-17 13:00:09.747', NULL, '二叉树的深度', '输入一棵二叉树，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度\n\n', '* 如果没有左右子树，深度为1\n* 如果只有左子树，深度为左子树深度加1\n* 如果只有右子树，深度为右子树深度加1\n* 如果都有，深度为左子树和右子树深度较大者加1\n\n```c++\n/*\nstruct TreeNode {\n    int val;\n    struct TreeNode *left;\n    struct TreeNode *right;\n    TreeNode(int x) :\n            val(x), left(NULL), right(NULL) {\n    }\n};*/\nclass Solution {\npublic:\n    int TreeDepth(TreeNode* pRoot)\n    {\n        if(!pRoot)\n            return 0;\n        \n        int depth1 = 1 + TreeDepth(pRoot->left);\n        int depth2 = 1 + TreeDepth(pRoot->right);\n        \n        return depth1 > depth2 ? depth1 : depth2;\n    }\n};\n```\n', 'https://www.nowcoder.com/practice/435fb86331474282a3499955f0a41e8b?tpId=13&tqId=11191&tPage=2&rp=2&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking', 'algorithm', '树', 1, 1);
INSERT INTO `problems` VALUES (173, '2021-01-17 13:00:09.748', '2021-01-17 13:00:09.748', NULL, '扁平化嵌套列表迭代器', '给出一个嵌套的整数列表，实现一个扁平化遍历该链表的迭代器\n\n例如：\n\n给定列表 ```[[1,1],2,[1,1]]```,\n\n通过重复调用 next 直到 hasNext 返回false，next 返回的元素的顺序应该是: ```[1,1,2,1,1]```\n\n', '<div align=\"center\"> <img src=\"https://github.com/arkingc/note/raw/master/pic/leetcode-341-1.png\"/> </div>\n\n上图给出了一个扁平化处理过程，从处理过程上看，当遇到一个嵌套list时，会进入嵌套的list处理该list，当嵌套list处理完成后，会返回外层list继续处理。这个过程是一个递归的处理过程，因此可以使用两个栈，一个栈begin保存每层list的当前迭代器，另一个栈end保存每层list的尾后迭代器，用于判断何时一层list处理结束。begin.top()和end.top()是同一层list的当前迭代器和尾后迭代器\n\n```c++\n/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * class NestedInteger {\n *   public:\n *     // Return true if this NestedInteger holds a single integer, rather than a nested list.\n *     bool isInteger() const;\n *\n *     // Return the single integer that this NestedInteger holds, if it holds a single integer\n *     // The result is undefined if this NestedInteger holds a nested list\n *     int getInteger() const;\n *\n *     // Return the nested list that this NestedInteger holds, if it holds a nested list\n *     // The result is undefined if this NestedInteger holds a single integer\n *     const vector<NestedInteger> &getList() const;\n * };\n */\nclass NestedIterator {\npublic:\n    NestedIterator(vector<NestedInteger> &nestedList) {\n        //将最外层的list收尾迭代器压入栈\n        begin.push(nestedList.begin());\n        end.push(nestedList.end());\n    }\n\n    int next() {\n        if(hasNext()) return (begin.top()++)->getInteger();\n        return 0;\n    }\n\n    bool hasNext() {\n        while(begin.size()){//说明至少还有一层list未处理完\n            //该层list遍历完毕，弹出两个迭代器继续处理外层list\n            if(begin.top() == end.top()){\n                begin.pop();\n                end.pop();\n            }\n            else{//该层list还有剩余，继续处理该层\n                auto itr = begin.top();\n                if(itr->isInteger())  return true;\n                //遇到一个嵌套list，前移迭代器，准备压入嵌套list的迭代器，处理嵌套层\n                begin.top()++;\n                begin.push(itr->getList().begin());\n                end.push(itr->getList().end());\n            }\n        }\n        return false;\n    }\nprivate:\n    stack<vector<NestedInteger>::iterator> begin,end;\n};\n\n/**\n * Your NestedIterator object will be instantiated and called as such:\n * NestedIterator i(nestedList);\n * while (i.hasNext()) cout << i.next();\n */\n```\n', 'https://leetcode.com/problems/flatten-nested-list-iterator/description/', 'algorithm', '设计', 1, 1);
INSERT INTO `problems` VALUES (174, '2021-01-17 13:00:09.749', '2021-01-17 13:00:09.749', NULL, '判断链表是否有环', '给定一个链表，判断链表中是否有环。\n\n进阶：\n\n你能否不使用额外空间解决此题？\n\n', '使用1个快指针和1个慢指针，如果存在环，2个指针必然在环内相遇\n\n```c++\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool hasCycle(ListNode *head) {\n        ListNode *slow = head,*fast = head;\n        while(fast){\n            if(fast->next){\n                fast = fast->next->next;\n                slow = slow->next;\n                if(fast == slow)    return true;\n            }\n            else\n                return false;\n        }\n        return false;\n    }\n};\n```\n', 'https://leetcode.com/problems/linked-list-cycle/description/', 'algorithm', '链表', 1, 1);
INSERT INTO `problems` VALUES (175, '2021-01-17 13:00:09.750', '2021-01-17 13:00:09.750', NULL, '至少有K个重复字符的最长子串', '找到给定字符串（由小写字符组成）中的最长子串 T ， 要求 T 中的每一字符出现次数都不少于 k 。输出 T 的长度\n\n示例 1:\n\n```\n输入:\ns = \"aaabb\", k = 3\n\n输出:\n3\n\n最长子串为 \"aaa\" ，其中 \'a\' 重复了 3 次\n```\n\n示例 2:\n\n```\n输入:\ns = \"ababbc\", k = 2\n\n输出:\n5\n\n最长子串为 \"ababb\" ，其中 \'a\' 重复了 2 次， \'b\' 重复了 3 次\n```\n\n', '1. 遍历字符串，统计每个字符出现的次数\n2. 找到字符串中第一个出现次数少于K的字符，这个字符显然不会出现在满足要求的子串中，因此它将字符串分割成2个子串\n3. 递归处理，最长子串必定出现在左边或者右边\n\n```c++\nclass Solution {\npublic:\n    int longestSubstring(string s, int k) {\n        vector<int> cases(26,0);\n        for(char c : s) cases[c - \'a\']++;\n        \n        int len = s.length();\n        int idx = 0;\n        while(idx < len && cases[s[idx] - \'a\'] >= k) {idx++;}\n        if(idx == len)  return len;\n        \n        int left = longestSubstring(s.substr(0,idx),k);\n        //这里是个优化：跳过所有相连的、出现次数少于k次的字符\n        while(idx < len && cases[s[idx] - \'a\'] < k) {idx++;}\n        int right = longestSubstring(s.substr(idx),k);\n        \n        return max(left,right);\n    }\n};\n```\n\n由于题目给出了字符串只包含小写字母，所有map直接使用了vector。如果没有限定字符串的字符范围，可以使用unordered_map<char,int>\n', 'https://leetcode.com/problems/longest-substring-with-at-least-k-repeating-characters/description/', 'algorithm', '字符串', 1, 1);
INSERT INTO `problems` VALUES (176, '2021-01-17 13:00:09.750', '2021-01-17 13:00:09.750', NULL, '左上角到右下角的路径数', '一个机器人位于一个 m x n 网格的左上角 \n\n机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角\n\n问总共有多少条不同的路径？\n\n说明：m 和 n 的值均不超过 100。\n\n示例 1:\n\n```\n输入: m = 2, n = 3\n输出: 3\n解释:\n从左上角开始，总共有 3 条路径可以到达右下角。\n1. 向右 -> 向右 -> 向下\n2. 向右 -> 向下 -> 向右\n3. 向下 -> 向右 -> 向右\n```\n\n示例 2:\n\n```\n输入: m = 7, n = 3\n输出: 28\n```\n\n', '#### 1）动态规划(无状态压缩)\n\n假设`f(m,n)`表示从`(m,n)`走到右下角的路径数，因为可以选择从右走或者从下走，那么`f(m,n) = f(m+1,n) + f(m,n+1)`，\n\n如果使用递归，那么就是一个dfs的过程，这样会求重复子问题。因此可以使用一个二维矩阵保存状态，加速求解\n\n* 时间复杂度：O(m * n)\n* 空间复杂度：O(m * n)\n\n```c++\nclass Solution {\npublic:\n    int uniquePaths(int m, int n) {\n        if(m <= 0 || n <= 0)    return 0;\n        if(m == 1 || n == 1)    return 1;\n        \n        vector<vector<int>> state(m,vector<int>(n,0));\n        \n        for(int i = 0;i < m;i++)    state[i][n-1] = 1;\n        for(int j = 0;j < n;j++)    state[m-1][j] = 1;\n        \n        for(int i = m - 2;i >= 0;i--)\n            for(int j = n - 2;j >= 0;j--)\n                //状态转移方程\n                state[i][j] = state[i+1][j] + state[i][j+1];\n        \n        return state[0][0];\n    }\n};\n```\n\n#### 2）动态规划(状态压缩)\n\n上述方法使用二维矩阵存储状态，通过观察状态转移方程，还可以对状态进行压缩，使用一维矩阵存储状态：\n\n* 时间复杂度：O(m * n)\n* 空间复杂度：O(n)\n\n```c++\nclass Solution {\npublic:\n    int uniquePaths(int m, int n) {\n        if(m <= 0 || n <= 0)    return 0;\n        if(m == 1 || n == 1)    return 1;\n        \n        vector<int> state(n,1);\n        \n        for(int i = m - 2;i >= 0;i--)\n            for(int j = n - 2;j >= 0;j--)\n                //状态转移方程\n                state[j] = state[j+1] + state[j];\n        \n        return state[0];\n    }\n};\n```\n\n#### 3）求组合数\n\n总共需要走m + n - 2步，这m + n - 2步中有n - 1步往右走，因此是一个求组合数的问题\n\n* 时间复杂度：O(m + n)\n* 空间复杂度：O(1)\n\n```c++\nclass Solution {\npublic:\n    int uniquePaths(int m, int n) {\n        if(m <= 0 || n <= 0)    return 0;\n        if(m == 1 || n == 1)    return 1;\n        \n        int total = m + n - 2;\n        int right = n - 1;\n        \n        return combination(total,right);\n    }\nprivate:\n    int combination(int total,int n){\n        if(n > total)   return 0;\n        if(n == total)  return 1;\n        \n        if(n > total / 2)   n = total - n;\n        \n        long long num1 = 1,num2 = 1;\n        for(int i = total;i >= total - n + 1;i--)   num1 *= i;\n        for(int i = n;i >= 1;i--)                   num2 *= i;\n        \n        return num1 / num2;\n    }\n};\n```\n', 'https://leetcode.com/problems/unique-paths/description/', 'algorithm', '图', 1, 1);
INSERT INTO `problems` VALUES (177, '2021-01-17 13:00:09.750', '2021-01-17 13:00:09.750', NULL, '调整数组顺序使奇数位于偶数前面', '输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变\n\n> 可以将判断元素是否满足条件的表达式设计为函数指针以满足扩展性：1）负数位于前面，正数位于后面；3）能被3整除的位于前面，不能的位于后面\n\n', '1. 基于快排的partition方法\n2. 如果要求保证奇数的原有相对顺序、偶数的原有相对顺序，那么使用一个临时数组保存原数组，然后统计奇数或偶数元素的个数，使用两个指针(下标)分别指向奇数和偶数的起始位置，遍历临时数组如果是奇数则在原数组中记录并移动奇数指针，如果是偶数...\n\n```c++\nclass Solution {\npublic:\n    /*\n     * 剑指offer中的题没有要求“必须保证原有顺序”\n     * 如果要保证顺序，在i后面的j位置找到一个奇数时，需要把[i,...,j-1]的元素往后移动，然后把j交换到i位置，这样复杂度为O(n^2)\n     * 则使用插入排序编码更简洁，如果要实现O(n)时间复杂度，必须使用一个辅助数组（空间换时间）\n     * 总的来说，要求“必须保证原有顺序”比起不要求时，整个解法可以很不一样\n     */\n    void reOrderArray(vector<int> &array) {\n        vector<int> tp = array;\n        int oddcount = 0;\n        for(int i : tp)\n            if (i % 2 == 1)\n                oddcount++;\n        int m = 0,n = oddcount;\n        for(int i : tp){\n            if(i % 2 == 1)\n                array[m++] = i;\n            else\n                array[n++] = i;\n        }\n    }\n};\n```\n', 'https://www.nowcoder.com/practice/beb5aa231adc45b2a5dcc5b62c93f593?tpId=13&tqId=11166&tPage=1&rp=2&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (178, '2021-01-17 13:00:09.751', '2021-01-17 13:00:09.751', NULL, '买卖股票的最佳时机IV', '给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。\n\n设计一个算法来计算你所能获取的最大利润。你最多可以完成 k 笔交易。\n\n注意: 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。\n\n示例 1:\n\n```\n输入: [2,4,1], k = 2\n输出: 2\n解释: 在第 1 天 (股票价格 = 2) 的时候买入，在第 2 天 (股票价格 = 4) 的时候卖出，这笔交易所能获得利润 = 4-2 = 2 。\n```\n\n示例 2:\n\n```\n输入: [3,2,6,5,0,3], k = 2\n输出: 7\n解释: 在第 2 天 (股票价格 = 2) 的时候买入，在第 3 天 (股票价格 = 6) 的时候卖出, 这笔交易所能获得利润 = 6-2 = 4 。\n     随后，在第 5 天 (股票价格 = 0) 的时候买入，在第 6 天 (股票价格 = 3) 的时候卖出, 这笔交易所能获得利润 = 3-0 = 3 。\n```\n\n', '解法和[买卖股票的最佳时机III](#买卖股票的最佳时机iii)相同。但是要注意一点，`k`可能很大，当`k ≥ 天数/2`时，问题实际转化成了[买卖股票的最佳时机II](#买卖股票的最佳时机ii)。此时累积所有增长的走势即可。否则，可能因为`k`过大而无法分配O(k)的内存空间\n\n> 为什么是`k ≥ 天数/2`？  \n> 假设天数为n，可以描绘出股价的走势曲线，那么为了获取最高利润，至少需要多少笔交易？走势曲线中有多少个上升的曲线，就需要多少笔交易。那么当股价一天涨一天跌一天涨...，即呈锯齿状时，上升的曲线数量最多，等于下降的曲线数量-1或下降的曲线数量或下降的曲线数量加1。所以是`k ≥ 天数/2`\n\n* 当`k ≥ 天数/2`时\n    - 时间复杂度：O(n)\n    - 空间复杂度：O(1)\n* 当`k ＜ 天数/2`时\n    - 时间复杂度：O(k \\* n)\n    - 空间复杂度：O(k)\n\n```c++\nclass Solution {\npublic:\n    int maxProfit(int k, vector<int>& prices) {\n        if(prices.size() <= 1 || k == 0)  return 0;\n        \n        int max_profit = 0;\n        \n        if (k >= prices.size() / 2) {\n            for (int i = 1; i < prices.size(); ++i) {\n                if (prices[i] - prices[i - 1] > 0)\n                    max_profit += prices[i] - prices[i - 1];\n            }\n        }\n        else{\n            vector<int> dp(k + 1,0);\n            vector<int> local(k + 1,0);\n\n            for(int i = 1;i < prices.size();i++)\n                for(int m = k;m > 0;m--){\n                    local[m] = prices[i] - prices[i - 1] + max(dp[m - 1],local[m]);\n                    dp[m] = max(dp[m],local[m]);\n                }\n            max_profit = dp[k];\n        }\n        \n        return max_profit;\n    }\n};\n```\n', '', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (179, '2021-01-17 13:00:09.752', '2021-01-17 13:00:09.752', NULL, '顺时针打印矩阵', '输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字\n\n例如，如果输入如下矩阵： \n\n```\n1  2  3  4 \n5  6  7  8 \n9  10 11 12 \n13 14 15 16 \n```\n\n则依次打印出数字 `1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10`\n\n', '* 按圈打印，每圈左上角的坐标中行标和列标总是相同的\n* 循环继续的条件是`columns > startX * 2`且`rows > startY * 2`\n\n```c++\nclass Solution {\npublic:\n    vector<int> printMatrix(vector<vector<int> > matrix) {\n        vector<int> res;\n        if(matrix.size() == 0 || matrix[0].size() == 0)\n            return res;\n        \n        int rows = matrix.size();\n        int columns = matrix[0].size();\n        \n        int i = 0;\n        while( (i * 2) < rows && (i * 2) < columns){\n            int endX = columns - 1 - i;\n            int endY = rows - 1 - i;\n            for(int idx = i;idx <= endX;idx++){\n                res.push_back(matrix[i][idx]);\n            }\n            \n            if(i < endY){\n                for(int idx = i + 1;idx <= endY;idx++){\n                    res.push_back(matrix[idx][endX]);\n                }\n            }\n            \n            if(i < endX && i < endY)\n                for(int idx = endX - 1;idx >= i;idx--){\n                    res.push_back(matrix[endY][idx]);\n                }\n            \n            if(i < endX && i < endY - 1)\n                for(int idx = endY - 1;idx > i;idx--){\n                    res.push_back(matrix[idx][i]);\n                }\n            \n            i++;\n        }\n        \n        return res;\n    }\n};\n```\n', 'https://www.nowcoder.com/practice/9b4c81a02cd34f76be2659fa0d54342a?tpId=13&tqId=11172&tPage=1&rp=3&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (180, '2021-01-17 13:00:09.752', '2021-01-17 13:00:09.752', NULL, '数值的整数次方', 'OJ链接：[牛客](https://www.nowcoder.com/practice/1a834e5e3e1a4b7ba251417554e07c00?tpId=13&tqId=11165&tPage=1&rp=3&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking)、[Leetcode](https://leetcode.com/problems/powx-n/description/)（Leetcode上要求更高）\n\n给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方\n\n', '* 当x为0时？\n* 当n为0时？\n* 当n为INT_MAX和**INT_MIN**时？\n\n#### 1）方法一\n\n循环n次，每次乘以x\n\n**时间复杂度**：O(n)\n\n#### 2）方法二\n\n使用一个变量m表示指数，如果`m * 2 < n`，则将结果平方，由于每次指数增长，所以比线性增长快很多\n\n```c++\nclass Solution {\npublic:\n    double myPow(double x, int n) {\n        bool b = n < 0;\n        \n        if(x == 0)  return 0;\n        if(n == 0)  return 1;\n        \n        //需要使用一个long long类型的变量，因为当n为INT_MIN时，和-1乘会溢出\n        long long nl = n < 0 ? (long long)n * -1 : n;\n        double ret = 1.0;\n        \n        while(nl){\n            long long m = 1;//m必须也是long long,因为当m = INT_MAX/2+1时，计算m*2会溢出\n            double tp = x;\n            while(2 * m <= nl){\n                tp *= tp;\n                m *= 2;\n            }\n            nl = nl - m;\n            ret *= tp;\n        }\n        \n        ret = b ? 1 / ret : ret;\n        return ret;\n    }\n};\n```\n\n**时间复杂度**：O(logn)\n\n#### 3）方法三\n\n假设`n`为`19(0010011)`，那么求出`x^1`、`x^2`、`x^16`次方就行了:\n\n```\nres = x^1 * x^2 * x^16\n```\n\n`res`初始化为`x^1`，求出`x^2`和`x^16`时，再分别与`res`相乘\n\n```c++\nclass Solution {\npublic:\n    double myPow(double x, int n) {\n        if(x == 0)  return 0;\n        if(n == 0)  return 1;\n        \n        long long nl = n;\n        bool negative = nl < 0;\n        if(negative)    nl = nl * -1;\n        \n        while((nl & 1) == 0){\n            nl >>= 1;\n            x *= x;\n        }\n        \n        double res = x;\n        nl >>= 1;\n        \n        while(nl){\n            x *= x;\n            if((nl & 1) == 1) res *= x;\n            nl >>= 1;\n        }\n        \n        if(negative)    return 1 / res;\n        return res;\n    }\n};\n```\n', '', 'algorithm', '数学', 1, 1);
INSERT INTO `problems` VALUES (181, '2021-01-17 13:00:09.753', '2021-01-17 13:00:09.753', NULL, '柱状图中最大的矩形', '给定 n 个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1 。\n\n求在该柱状图中，能够勾勒出来的矩形的最大面积\n\n![](../pic/leetcode-84-1.png)\n\n示例:\n\n```\n输入: [2,1,5,6,2,3]\n输出: 10\n```\n\n', '使用一个栈保存高度：\n\n1. 升序时，压入栈中\n2. 发生降序时，从栈顶弹出元素，计算，并且根据计算结果更新最大矩阵的值。重复这个过程直到栈中的高度重新保持升序\n\n以题目中的示例，当遇到1，2，0(这个是添加到heights末尾的元素，为的是保证最后一次计算)时会进行计算，每次会计算的面积以图中的虚线表示：\n\n![](../pic/leetcode-84-2.png)\n\n```c++\nclass Solution {\npublic:\n    int largestRectangleArea(vector<int>& heights) {\n        heights.push_back(0);   //保证最后一次处理\n        stack<int> s;\n        int max_area = 0;\n        for(int i = 0;i < heights.size();i++){\n            while(!s.empty() && heights[i] <= heights[s.top()]){\n                int height = heights[s.top()];\n                s.pop();\n                int idx = s.empty() ? -1 : s.top();\n                int width = i - idx - 1;\n                if(width * height > max_area)   max_area = width * height;\n            }\n            s.push(i);\n        }\n        \n        return max_area;\n    }\n};\n```\n', 'https://leetcode.com/problems/largest-rectangle-in-histogram/description/', 'algorithm', '数学', 1, 1);
INSERT INTO `problems` VALUES (182, '2021-01-17 13:00:09.753', '2021-01-17 13:00:09.753', NULL, '含重复元素数组的全排列', '给定一个可包含重复数字的序列，返回所有不重复的全排列。\n\n示例:\n\n```\n输入: [1,1,2]\n输出:\n[\n  [1,1,2],\n  [1,2,1],\n  [2,1,1]\n]\n```\n\n', '用一个set保存已经交换过的元素\n\n比如对于序列[1,1,2]\n\n* 当处理第一个1时，由于set中没有1，所以处理以1开头的排列\n* 当处理第二个1时，由于set已经包含了1，即已经处理过相同的排列，所以不交换\n* 当处理2时，由于set不包含1，即没有处理以2开头的排列，所以1与2交换\n\n```c++\nclass Solution {\npublic:\n    vector<vector<int>> permuteUnique(vector<int>& nums) {\n        vector<vector<int>> res;\n        \n        permuteUnique(nums,0,res);\n        \n        return res;\n    }\n    \nprivate:\n    void permuteUnique(vector<int>& nums,int idx,vector<vector<int>> &res){\n        if(idx == nums.size()){\n            res.push_back(nums);\n        }\n        \n        set<int> s;\n        for(int i = idx;i < nums.size();i++){\n            if(s.find(nums[i]) != s.end()) continue;\n            \n            s.insert(nums[i]);\n            \n            swap(nums[i],nums[idx]);\n            \n            permuteUnique(nums,idx + 1,res);\n            \n            swap(nums[i],nums[idx]);\n        }\n    }\n};\n```\n', 'https://leetcode.com/problems/permutations-ii/description/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (183, '2021-01-17 13:00:09.754', '2021-01-17 13:00:09.754', NULL, '旋转数组', '给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。\n\n示例 1:\n\n```\n输入: [1,2,3,4,5,6,7] 和 k = 3\n输出: [5,6,7,1,2,3,4]\n解释:\n向右旋转 1 步: [7,1,2,3,4,5,6]\n向右旋转 2 步: [6,7,1,2,3,4,5]\n向右旋转 3 步: [5,6,7,1,2,3,4]\n```\n\n示例 2:\n\n```\n输入: [-1,-100,3,99] 和 k = 2\n输出: [3,99,-1,-100]\n解释: \n向右旋转 1 步: [99,-1,-100,3]\n向右旋转 2 步: [3,99,-1,-100]\n```\n\n说明:\n\n* 尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。\n* 要求使用空间复杂度为 O(1) 的原地算法。\n\n', '将数组旋转一次，可以将前面的数和后面k个数交换位置。但这两个区间的数也会反序，因此再对两个区间做一次反序\n\n```c++\nclass Solution {\npublic:\n    void rotate(vector<int>& nums, int k) {\n        k = k % nums.size(); \n        if(k == 0)  return;\n        int sz = nums.size();\n        int l = 0,r = sz - 1;\n        while(l < r) {  swap(nums[l++],nums[r--]);}\n        l = 0,r = k - 1;\n        while(l < r) {swap(nums[l++],nums[r--]);}\n        l = k,r = sz - 1;\n        while(l < r) {swap(nums[l++],nums[r--]);}\n    }\n};\n```\n', 'https://leetcode.com/problems/rotate-array/description/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (184, '2021-01-17 13:00:09.755', '2021-01-17 13:00:09.755', NULL, '链表中环的入口节点', '一个链表中包含环，请找出该链表的环的入口结点\n\n', '* 使用两个指针，一个1步，一个2步，在环中相遇，记录相遇节点，再遍历到此节点，计算出环长；\n* 然后再用2个指针，一个先走环长步，然后两个一起走，会在入口节点相遇；\n\n```c++\n/*\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n    ListNode(int x) :\n        val(x), next(NULL) {\n    }\n};\n*/\nclass Solution {\npublic:\n    ListNode* EntryNodeOfLoop(ListNode* pHead)\n    {\n        if(!pHead)\n            return nullptr;\n\n        ListNode *p1 = pHead,*p2 = pHead;\n        while(true){\n            p1 = p1->next;\n            p2 = p2->next;\n            if(p2)    {p2 = p2->next;}\n            if(!p2)    return nullptr;//由于p2走得快，如果链表无环，肯定会在这里返回\n\n            if(p1 == p2)    break;\n        }\n\n        int circleLength = 1;\n        p2 = p2->next;\n        while(p2 != p1)    {circleLength++;p2 = p2->next;}\n\n        p1 = pHead,p2 = pHead;\n        while(circleLength){\n            p2 = p2->next;\n            circleLength--;\n        }\n        while(p1 != p2){\n            p1 = p1->next;\n            p2 = p2->next;\n        }\n\n        return p1;\n    }\n};\n```\n', 'https://www.nowcoder.com/practice/253d2c59ec3e4bc68da16833f79a38e4?tpId=13&tqId=11208&tPage=3&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking', 'algorithm', '链表', 1, 1);
INSERT INTO `problems` VALUES (185, '2021-01-17 13:00:09.756', '2021-01-17 13:00:09.756', NULL, '删除有序链表中的重复节点II', '给定一个排序链表，删除所有含有重复数字的节点，只保留原始链表中 没有重复出现 的数字。\n\n示例 1:\n\n```\n输入: 1->2->3->3->4->4->5\n输出: 1->2->5\n```\n\n示例 2:\n\n```\n输入: 1->1->1->2->3\n输出: 2->3\n```\n\n', '[前一题](#删除有序链表中的重复节点)是将重复出现的节点删除，只保留1个，这一题要求删除所有重复出现的节点\n\n使用一个辅助节点`tp`链接到链表头部`head`的前面，一个指针`curr`指向已经处理过的链表的尾部，因此`curr`初始化为`&tp`。对于剩余未处理的部分，使用一个指针`p`指向未处理部分的第一个节点，如果存在`p->next`，并且`p->next`的值与`p`相同，说明出现重复节点，那么`delete p`，并更新`p`为`p->next`。如此处理直到`p->next`为NULL或`p->next`的值与`p`的值不等。经过这样的处理后，如果`curr->next`和`p`相等，说明`p`节点不是重复节点，因此更新`curr`为`p`；否则，更新`curr->next`为`p->next`，并且`delete p`，然后处理`p`后链表剩余部分\n\n```c++\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* deleteDuplicates(ListNode* head) {\n        ListNode tp(0),*curr = &tp;\n        tp.next = head;\n        while(curr->next){\n            ListNode *p = curr->next,*del;\n            while(p->next && p->next->val == p->val){\n                del = p;\n                p = p->next;\n                delete del;\n            }\n            if(curr->next != p){\n                curr->next = p->next;\n                delete p;\n            }\n            else\n                curr = curr->next;\n        }\n        return tp.next;\n    }\n};\n```\n', 'https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/description/', 'algorithm', '链表', 1, 1);
INSERT INTO `problems` VALUES (186, '2021-01-17 13:00:09.757', '2021-01-17 13:00:09.757', NULL, '求1~n的和', '求1+2+3+...+n，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）\n\n', '#### 1）利用构造函数\n\n设计一个类，拥有1个静态int成员，初始值为0，构造函数每次将该静态成员加1，因此，创建n个对象即可\n\n#### 2）递归\n\n使用`&&`作为终止判断\n\n```c++\nclass Solution {\npublic:\n    int Sum_Solution(int n) {\n        int ret = n;\n        ret && (ret = n + Sum_Solution(n - 1));\n        return ret;\n    }\n};\n```\n', 'https://www.nowcoder.com/practice/7a0da8fc483247ff8800059e12d7caf1?tpId=13&tqId=11200&tPage=3&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking', 'algorithm', '数学', 1, 1);
INSERT INTO `problems` VALUES (187, '2021-01-17 13:00:09.758', '2021-01-17 13:00:09.758', NULL, '和为s的两个数字', '输入一个递增排序的数组和一个数字S，在数组中查找两个数，使得他们的和正好是S，如果有多对数字的和等于S，输出两个数的乘积最小的\n\n', '首尾两个下标，向中间靠拢，如果和小于s，则移动首下标，大于s，则移动尾下标\n\n```c++\nclass Solution {\npublic:\n    vector<int> FindNumbersWithSum(vector<int> array,int sum) {\n        if(array.size() < 2)    return vector<int>();\n        \n        vector<int> res(2);\n        int min = INT_MAX;\n        int l = 0,r = array.size() - 1;\n        while(l < r){\n            if(array[l] + array[r] < sum)         l++;\n            else if(array[l] + array[r] > sum)    r--;\n            else{\n                if(array[l] * array[r] < min){\n                    min = array[l] * array[r];\n                    res[0] = array[l];\n                    res[1] = array[r];\n                }\n                l++; // or r--\n            }\n        }\n        \n        if(min == INT_MAX)    return vector<int>();\n        return res;\n    }\n};\n```\n', 'https://www.nowcoder.com/practice/390da4f7a00f44bea7c2f3d19491311b?tpId=13&tqId=11195&tPage=3&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (188, '2021-01-17 13:00:09.758', '2021-01-17 13:00:09.758', NULL, '矩形覆盖', '我们可以用2\\*1的小矩形横着或者竖着去覆盖更大的矩形。请问用n个2\\*1的小矩形无重叠地覆盖一个2\\*n的大矩形，总共有多少种方法？\n\n', '假设总的放法为f(n)\n\n* 如果第一个竖着放，则需要求f(n-1)\n* 如果第一个横着放，那么这个矩形下面也必须横着放，需要求f(n-2)\n\n故 `f(n) = f(n-1) + f(n-2)`，即求斐波那契数列的第n项\n\n```c++\nclass Solution {\npublic:\n    int rectCover(int number) {\n        if(number <= 0)\n            return 0;\n        if(number == 1)\n            return 1;\n        \n        /*\n         * 使用num1和num2存储F(M-1)和F(M-2)，自底向上计算\n         */\n        int res;\n        int num1 = 1,num2 = 1;\n        for(int i = 2;i <= number;i++){\n            res = num1 + num2;  //求出F(M)\n            num1 = num2;        //使用F(M-1)更新F(M-2)\n            num2 = res;         //使用F(M)更新F(M-1)\n        }\n        \n        return res;\n    }\n};\n```\n', 'https://www.nowcoder.com/practice/72a5a919508a4251859fb2cfb987a0e6?tpId=13&tqId=11163&tPage=1&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking', 'algorithm', '数学', 1, 1);
INSERT INTO `problems` VALUES (189, '2021-01-17 13:00:09.759', '2021-01-17 13:00:09.759', NULL, '成对交换链表的节点', '给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。\n\n示例:\n\n```\n给定 1->2->3->4, 你应该返回 2->1->4->3.\n```\n\n说明:\n\n* 你的算法只能使用常数的额外空间。\n* 你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。\n\n', '两个两个节点进行处理，对于当前节点curr，如果有下一个节点，则进行交换。注意两点：\n* 每次处理时，curr可能为空，所以循环要先判断curr是否为空\n* 交换后，curr为当前处理两个节点的后一个节点，所以下一次处理前，curr只需往后移动1次\n* 要注意每次不仅要处理当前2个节点与后续节点的链接，还要处理当前2个节点前面的节点与当前2个节点的链接\n\n```c++\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* swapPairs(ListNode* head) {\n        if(!head || !head->next)    return head;\n        \n        ListNode node(0);\n        ListNode *curr = head,*prev = &node;\n        while(curr && curr->next){\n            ListNode *tp = curr->next;\n            curr->next = curr->next->next;\n            tp->next = curr;\n            curr = curr->next;\n            prev->next = tp;\n            prev = tp->next;\n        }\n        return node.next;\n    }\n};\n```\n', 'https://leetcode.com/problems/swap-nodes-in-pairs/description/', 'algorithm', '链表', 1, 1);
INSERT INTO `problems` VALUES (190, '2021-01-17 13:00:09.760', '2021-01-17 13:00:09.760', NULL, '课程安排II', '现在你总共有 n 门课需要选，记为 `0` 到 `n-1`。\n\n在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们: `[0,1]`\n\n给定课程总量以及它们的先决条件，返回你为了学完所有课程所安排的学习顺序。\n\n可能会有多个正确的顺序，你只要返回一种就可以了。如果不可能完成所有课程，返回一个空数组。\n\n示例 1:\n\n```\n输入: 2, [[1,0]] \n输出: [0,1]\n解释: 总共有 2 门课程。要学习课程 1，你需要先完成课程 0。因此，正确的课程顺序为 [0,1] 。\n```\n\n示例 2:\n\n```\n输入: 4, [[1,0],[2,0],[3,1],[3,2]]\n输出: [0,1,2,3] or [0,2,1,3]\n解释: 总共有 4 门课程。要学习课程 3，你应该先完成课程 1 和课程 2。并且课程 1 和课程 2 都应该排在课程 0 之后。\n     因此，一个正确的课程顺序是 [0,1,2,3] 。另一个正确的排序是 [0,2,1,3] 。\n```\n\n说明:\n\n1. 输入的先决条件是由边缘列表表示的图形，而不是邻接矩阵\n2. 你可以假定输入的先决条件中没有重复的边\n\n', '和[前一题](#课程安排)不同的是，前一题只要求判断是否存在拓扑序列，这一题还要求输出拓扑序列\n\n#### 1）BFS\n\n```c++\nclass Solution {\npublic:\n    vector<int> findOrder(int numCourses, vector<pair<int, int>>& prerequisites) {\n        vector<vector<int> > graph(numCourses);\n        vector<int> indegrees(numCourses,0);    //顶点的入度，即有多少边指向该顶点\n        vector<int> res;\n        \n        for(auto p : prerequisites){\n            indegrees[p.first]++;\n            graph[p.second].push_back(p.first);\n        }\n        \n        deque<int> q;\n        for(int v = 0;v < numCourses;v++)\n            if(indegrees[v] == 0){\n                q.push_back(v);\n                res.push_back(v);\n            }\n        while(!q.empty()){\n            int v = q.front();\n            q.pop_front();\n            for(int v2 : graph[v])\n                if(--indegrees[v2] == 0){\n                    q.push_back(v2);\n                    res.push_back(v2);\n                }\n        }\n        \n        for(int indegree : indegrees)\n            if(indegree)\n                return vector<int>();\n        return res;\n    }\n};\n```\n\n#### 2）DFS\n\n```c++\nclass Solution {\npublic:\n    vector<int> findOrder(int numCourses, vector<pair<int, int>>& prerequisites) {\n        vector<vector<int> > graph(numCourses);\n        //0：该顶点还未被访问\n        //1：当前DFS路径中，该顶点已被访问\n        //2：以该顶点开始的DFS路径中不包含环\n        vector<int> state(numCourses,0);\n        vector<int> res;\n        \n        for(auto p : prerequisites)\n            graph[p.second].push_back(p.first);\n        \n        for(int v = 0;v < numCourses;v++)\n            if(state[v] == 0 && !dfs(graph,state,v,res))\n                break;\n        \n        return vector<int>(res.rbegin(),res.rend());\n    }\nprivate:\n    bool dfs(vector<vector<int>> &graph,vector<int> &state,int v,vector<int> &res){\n        if(state[v] == 1){\n            res.clear();//if成立表示出现了环，只需在这里clear\n            return false;\n        }\n        else if(state[v] == 2)  return true;\n        \n        state[v] = 1;//当前顶点标记为已访问\n        for(int v2 : graph[v])\n            if(!dfs(graph,state,v2,res))\n                return false;\n        \n        state[v] = 2;//以当前顶点开始的DFS路径中不包含环\n        res.push_back(v);//遍历完所有子顶点后才添加当前顶点\n        return true;\n    }\n};\n```\n', 'https://leetcode.com/problems/course-schedule-ii/description/', 'algorithm', '图', 1, 1);
INSERT INTO `problems` VALUES (191, '2021-01-17 13:00:09.761', '2021-01-17 13:00:09.761', NULL, '翻转字符串', '请编写一个函数，其功能是将输入的字符串反转过来。\n\n示例：\n\n```\n输入：s = \"hello\"\n返回：\"olleh\"\n```\n\n', '```c++\nclass Solution {\npublic:\n    string reverseString(string s) {\n        int l = 0,r = s.length() - 1;\n        while(l < r)\n            swap(s[l++],s[r--]);\n        return s;\n    }\n};\n```\n', 'https://leetcode.com/problems/reverse-string/description/', 'algorithm', '字符串', 1, 1);
INSERT INTO `problems` VALUES (192, '2021-01-17 13:00:09.761', '2021-01-17 13:00:09.761', NULL, 'BST第k小的节点', 'OJ链接：[牛客](https://www.nowcoder.com/practice/ef068f602dde4d28aab2b210e859150a?tpId=13&tqId=11215&tPage=4&rp=2&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking)、[Leetcode](https://leetcode.com/problems/kth-smallest-element-in-a-bst/description/)\n\n给定一个二叉搜索树，编写一个函数 `kthSmallest` 来查找其中第 k 个最小的元素。\n\n说明：\n\n你可以假设 k 总是有效的，1 ≤ k ≤ 二叉搜索树元素个数。\n\n示例 1:\n\n```\n输入: root = [3,1,4,null,2], k = 1\n   3\n  / \\\n 1   4\n  \\\n   2\n输出: 1\n```\n\n示例 2:\n\n```\n输入: root = [5,3,6,2,4,null,null,1], k = 3\n       5\n      / \\\n     3   6\n    / \\\n   2   4\n  /\n 1\n输出: 3\n```\n\n进阶：\n\n如果二叉搜索树经常被修改（插入/删除操作）并且你需要频繁地查找第 k 小的值，你将如何优化 `kthSmallest` 函数？\n\n', '#### 1）递归\n\n```c++\nclass Solution {\npublic:\n    int kthSmallest(TreeNode* root, int k) {\n        if(!root || k < 0)   return -1;\n        \n        int res;\n        preOrderTraversal(root,k,res);\n        \n        return res;\n    }\nprivate:\n    void preOrderTraversal(TreeNode *node,int &k,int &res){\n        if(!node)   return;\n        \n        preOrderTraversal(node->left,k,res);\n        if(k == 0)  return;\n        if(--k == 0)  res = node->val;\n        else    preOrderTraversal(node->right,k,res);\n    }\n};\n```\n\n#### 2）迭代\n\n```c++\nclass Solution {\npublic:\n    int kthSmallest(TreeNode* root, int k) {\n        if(!root || k < 0)  return -1;\n        \n        stack<TreeNode*> s;\n        TreeNode *curr = root;\n        while(curr || !s.empty()){\n            if(curr){\n                s.push(curr);\n                curr = curr->left;\n            }\n            else{\n                TreeNode *nd = s.top();\n                if(k == 1)  return nd->val;\n                s.pop();k--;\n                curr = nd->right;\n            }\n        }\n        \n        return -1;//k大于BST的节点总数\n    }\n};\n```\n', '', 'algorithm', '树', 1, 1);
INSERT INTO `problems` VALUES (193, '2021-01-17 13:00:09.762', '2021-01-17 13:00:09.762', NULL, '数组中重复的数字', '在一个长度为n的数组里的所有数字都在`0~n-1`的范围内。 数组中某些数字是重复的，但不知道有几个数字是重复的。也不知道每个数字重复几次。请找出数组中任意一个重复的数字\n\n例如，如果输入长度为7的数组`{2,3,1,0,2,5,3}`，那么对应的输出是第一个重复的数字`2`\n\n', '1. **排序**（时间:O(nlogn)，空间:O(1)：先排序，然后遍历数组找到第一个重复的数字即可\n2. **哈希表**（时间:O(n)，空间:O(n)）：扫描数组，使用哈希表统计每个数字出现的次数，当统计到一个以前出现过的数字时，找到重复\n3. **交换**（时间:O(n)，空间:O(1)）：如果位置i的数字m不等于i，与位置m的数字比较\n    - 如果位置m的数字不等于m，那么交换，直到位置i的数字等于i或位置m的数字等于m\n    - 如果位置m的数字等于m，说明数字m存在重复\n    ```c++\n    class Solution {\n    public:\n        // Parameters:\n        //        numbers:     an array of integers\n        //        length:      the length of array numbers\n        //        duplication: (Output) the duplicated number in the array number\n        // Return value:       true if the input is valid, and there are some duplications in the array number\n        //                     otherwise false\n        bool duplicate(int numbers[], int length, int* duplication) {\n            if(length <= 2)\n                return false;\n            for(int i = 0;i < length;i++){\n                while(numbers[i] != i){\n                    int m = numbers[i];\n                    if(m < 0 || m >= length)\n                        return false;\n                    if(m == numbers[m]){\n                        *duplication = m;\n                        return true;\n                    }\n                    numbers[i] = numbers[m];\n                    numbers[m] = m;\n                }\n            }\n            return false;\n        }\n    };\n    ```\n4. **位图**：当数据量特别大时可以使用位图，相比于哈希表，更节省空间\n', 'https://www.nowcoder.com/practice/623a5ac0ea5b4e5f95552655361ae0a8?tpId=13&tqId=11203&tPage=3&rp=2&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking', 'algorithm', '', 1, 1);
INSERT INTO `problems` VALUES (194, '2021-01-17 13:00:09.763', '2021-01-17 13:00:09.763', NULL, '矩阵中的最长递增路径', '给定一个整数矩阵，找出最长递增路径的长度。\n\n对于每个单元格，你可以往上，下，左，右四个方向移动。 你不能在对角线方向上移动或移动到边界外（即不允许环绕）。\n\n示例 1:\n\n```\n输入: nums = \n[\n  [9,9,4],\n  [6,6,8],\n  [2,1,1]\n] \n输出: 4 \n解释: 最长递增路径为 [1, 2, 6, 9]。\n```\n\n示例 2:\n\n```\n输入: nums = \n[\n  [3,4,5],\n  [3,2,6],\n  [2,2,1]\n] \n输出: 4 \n解释: 最长递增路径是 [3, 4, 5, 6]。注意不允许在对角线方向上移动。\n```\n\n', '假设`state[i][j]`表示以`第i行，第j列`元素为起点的最长序列的长度。那么最终我们就是要求所有`state[i][j]`中的最大值。如果知道其中某个`state[i][j]`怎么求，那么问题也就解决了\n\n既然`state[i][j]`表示以`第i行，第j列`元素为起点的最长序列的长度，那么`state[i][j]`肯定是以元素`matrix[i][j]`为起点的4个方向(`上下左右`)上最长的序列长度。以向上的序列为例：\n\n* 如果`matrix[i - 1][j] >= matrix[i][j]`：那么只包含当前元素，最长序列长度为1\n* 如果`matrix[i - 1][j] < matrix[i][j]`：那么最长序列的长度就是`state[i - 1][j] + 1`\n\n因此，可以求出4个方向上的递增序列的长度，那么`state[i][j]`就是4个序列中最长序列的长度\n\n* 为了防止求重复的子问题，使用`state`数组保存中间值\n* 注意，不会产生无限循环，比如：如果求`matrix[i][j]`，需要依赖`matrix[i-1][j]`。那么求`matrix[i - 1][j]`肯定不需要依赖`matrix[i][j]`，因为只有满足递增性质时，才会发生递归\n\n```c++\nclass Solution {\npublic:\n    int longestIncreasingPath(vector<vector<int>>& matrix) {\n        if(matrix.empty())  return 0;\n        \n        int rows = matrix.size(),cols = matrix[0].size();\n        vector<vector<int>> states(rows,vector<int>(cols,0));\n        \n        int res = 1;\n        for(int i = 0;i < rows;i++)\n            for(int j = 0;j < cols;j++){\n                int path = longestIncreasingPath(matrix,states,i,j);\n                if(path > res)  res = path;\n            }\n        \n        return res;\n    }\nprivate:\n    int longestIncreasingPath(vector<vector<int>> &matrix,vector<vector<int>> &states,int row,int col){\n        if(states[row][col] != 0)   return states[row][col];\n        \n        int rows = matrix.size(),cols = matrix[0].size();\n        int left,right,up,down;\n        states[row][col] = 1;\n        //left\n        if(col > 0 && matrix[row][col - 1] > matrix[row][col]){\n            left = longestIncreasingPath(matrix,states,row,col - 1) + 1;\n            if(left > states[row][col])  states[row][col] = left; \n        }\n        //right\n        if(col < cols - 1 && matrix[row][col + 1] > matrix[row][col]){\n            right = longestIncreasingPath(matrix,states,row,col + 1) + 1;\n            if(right > states[row][col])  states[row][col] = right; \n        }\n        //up\n        if(row > 0 && matrix[row - 1][col] > matrix[row][col]){\n            up = longestIncreasingPath(matrix,states,row - 1,col) + 1;\n            if(up > states[row][col])  states[row][col] = up; \n        }\n        //down\n        if(row < rows - 1 && matrix[row + 1][col] > matrix[row][col]){\n            down = longestIncreasingPath(matrix,states,row + 1,col) + 1;\n            if(down > states[row][col])  states[row][col] = down; \n        }\n        \n        return states[row][col];\n    }\n};\n```\n', 'https://leetcode.com/problems/longest-increasing-path-in-a-matrix/description/', 'algorithm', '图', 1, 1);
INSERT INTO `problems` VALUES (195, '2021-01-17 13:00:09.764', '2021-01-17 13:00:09.764', NULL, '两个数组的交集II', '给定两个数组，写一个方法来计算它们的交集。\n\n例如:\n\n\n给定 `nums1 = [1, 2, 2, 1]`, `nums2 = [2, 2]`, 返回 `[2, 2]`.\n\n注意：\n\n* 输出结果中每个元素出现的次数，应与元素在两个数组中出现的次数一致。\n* 我们可以不考虑输出结果的顺序。\n\n跟进:\n\n* 如果给定的数组已经排好序呢？你将如何优化你的算法？（**归并处理**）\n* 如果 nums1 的大小比 nums2 小很多，哪种方法更优？\n* 如果nums2的元素存储在磁盘上，内存是有限的，你不能一次加载所有的元素到内存中，你该怎么办？（**哈希成多个小文件，小文件分治求交集**）\n\n', '使用一个hash表统计一个数组中每个数字出现的次数，然后遍历另外一个数组，如果某个数组出现在哈希表中则添加到结果中，由于可以包含重复数字，所以需要计数每个数字出现的次数：\n\n```c++\nclass Solution {\npublic:\n    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {\n        unordered_map<int,int> countMap;\n        \n        vector<int> res;\n        for(int num : nums1)  countMap[num]++;\n        \n        for(int num : nums2)\n            if(countMap[num]-- > 0)\n                res.push_back(num);\n        \n        return res;\n    }\n};\n```\n', 'https://leetcode.com/problems/intersection-of-two-arrays-ii/description/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (196, '2021-01-17 13:00:09.764', '2021-01-17 13:00:09.764', NULL, '实现strcat', '', '```c\n#include <cassert>\n\n//字符串拼接\nchar* strcat(char *strDest,const char *strSrc)\n{\n    assert(strDest && strSrc);\n\n    char *p = strDest;\n    while(*p) p++;\n\n    while(*p++ = *strSrc++);\n    return strDest;\n}\n```\n', '', 'algorithm', 'c/c++基础', 1, 1);
INSERT INTO `problems` VALUES (197, '2021-01-17 13:00:09.765', '2021-01-17 13:00:09.765', NULL, '两个节点的最低公共祖先', '给定一个二叉树, 找到该树中两个指定节点的最近公共祖先\n\n例如，给定如下二叉树:  `root = [3,5,1,6,2,0,8,null,null,7,4]`\n\n```\n        _______3______\n       /              \\\n    ___5__          ___1__\n   /      \\        /      \\\n   6      _2       0       8\n         /  \\\n         7   4\n```\n\n示例 1:\n\n```\n输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\n输出: 3\n解释: 节点 5 和节点 1 的最近公共祖先是节点 3。\n```\n\n示例 2:\n\n```\n输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\n输出: 5\n解释: 节点 5 和节点 4 的最近公共祖先是节点 5。因为根据定义最近公共祖先节点可以为节点本身。\n```\n\n说明:\n\n* 所有节点的值都是唯一的\n* p、q 为不同节点且均存在于给定的二叉树中\n\n', '> 解法同[题目四](#题目四非二叉树节点不存在指向父节点的指针)\n\n以下为获取2条路径的解法：\n\n```c++\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        if(!root || !p || !q)   return NULL;\n        if(p == q)  return p;\n        \n        vector<vector<TreeNode*>> paths;\n        vector<TreeNode*> path;\n        \n        preOrderTraversal(root,p,q,paths,path);\n        \n        if(paths.size() != 2)   return NULL;\n        \n        int i = 0,j = 0;\n        while(paths[0][i + 1] == paths[1][j + 1])   i++,j++;\n        \n        return paths[0][i];\n    }\nprivate:\n    void preOrderTraversal(TreeNode *root,TreeNode *p,TreeNode *q,\n                           vector<vector<TreeNode*>> &paths,vector<TreeNode*> &path)\n    {\n        if(!root)   return;\n        \n        path.push_back(root);\n        if(root == p)   paths.push_back(path);\n        else if(root == q)  paths.push_back(path);\n        if(root->left)  preOrderTraversal(root->left,p,q,paths,path);\n        if(root->right) preOrderTraversal(root->right,p,q,paths,path);\n        path.pop_back();\n    }\n};\n```\n\n### 题目四：非二叉树，节点不存在指向父节点的指针\n\n**解法一(不使用辅助内存，效率低)**：从根节点开始，判断两个节点是否都在该树中，如果都在则判断两个节点是否都在根节点的子树中，如果两个节点都在以根节点的某个子节点为根节点的子树中，则继续递归判断，按这个过程一直处理，当以某个节点node为根节点的子树中包含2个节点，并且node的任一子节点都不同时包含两个节点时，这个node就是最低公共祖先\n\n**解法二(使用辅助内存，效率高)**：用两个链表，保存从根节点到输入的两个节点的路径，然后把问题转换成求两个链表的最后最后公共节点\n', 'https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/description/', 'algorithm', '树', 1, 1);
INSERT INTO `problems` VALUES (198, '2021-01-17 13:00:09.765', '2021-01-17 13:00:09.765', NULL, '和为s的连续正数序列', '小明很喜欢数学,有一天他在做数学作业时,要求计算出9~16的和,他马上就写出了正确答案是100。但是他并不满足于此,他在想究竟有多少种连续的正数序列的和为100(至少包括两个数)。没多久,他就得到另一组连续正数和为100的序列:18,19,20,21,22。现在把问题交给你,你能不能也很快的找出所有和为S的连续正数序列? Good Luck!\n\n', '使用2个指针small和big，small初始化为1，big初始化为2\n\n* 如果从small到big的序列的和大于s,则从序列中去掉较小的值，也就是增大small的值\n* 如果从small到big的序列和小于s，则增大big，让序列包含更多的数字\n* 如果正好等于s，则增大small（或增大big），继续处理\n\n因为至少含2个数字，一直增加small到(1+s)/2\n\n```c++\nclass Solution {\npublic:\n    vector<vector<int> > FindContinuousSequence(int sum) {\n        int small = 1,big = 2,s = 3;\n        vector<vector<int> > res;\n        \n        while(small <= sum/2){\n            if(s < sum)         s += ++big;\n            else if(s > sum)    s -= small++;\n            else{\n                vector<int> seq;\n                for(int i = small;i <= big;i++)\n                    seq.push_back(i);\n                res.push_back(seq);\n                s -= small++;\n            }\n        }\n        \n        return res;\n    }\n};\n```\n', 'https://www.nowcoder.com/practice/c451a3fd84b64cb19485dad758a55ebe?tpId=13&tqId=11194&tPage=3&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (199, '2021-01-17 13:00:09.766', '2021-01-17 13:00:09.766', NULL, '寻找数组中重复的数', '给定一个包含 n + 1 个整数的数组 nums，其数字都在 1 到 n 之间（包括 1 和 n），可知至少存在一个重复的整数。假设只有一个重复的整数，找出这个重复的数。\n\n示例 1:\n\n```\n输入: [1,3,4,2,2]\n输出: 2\n```\n\n示例 2:\n\n```\n输入: [3,1,3,4,2]\n输出: 3\n```\n\n说明：\n\n1. 不能更改原数组（假设数组是只读的）。\n2. 只能使用额外的 O(1) 的空间。\n3. 时间复杂度小于 O(n^2) 。\n4. 数组中只有一个重复的数字，但它可能不止重复出现一次。\n\n', '#### 1）二分查找\n\n假设1~n的中间元素是mid，遍历数组：\n\n* 如果小于等于mid的个数大于mid，说明重复数字出现在1~mid中\n* 如果小于等于mid的个数小于等于mid，说明重复数组出现在mid+1~n中\n\n每轮需要遍历n+1个元素，但是每次可以将范围缩小一半，因此时间复杂度小于O(n^2)\n\n```c++\nclass Solution {\npublic:\n    int findDuplicate(vector<int>& nums) {\n        int l = 1,r = nums.size() - 1;//l和r初始化成1和n\n        while(l < r){\n            int mid = (l + r) >> 1;\n            int count = 0;//小于等于mid的数的个数\n            for(int i = 0;i < nums.size();i++)\n                if(nums[i] <= mid)   count++;\n            if(count <= mid)\n                l = mid + 1;\n            else if(count > mid)\n                r = mid;\n        }\n        \n        return l;\n    }\n};\n```\n\n* 时间复杂度：O(nlogn)\n* 空间复杂度：O(1)\n\n#### 2）交换\n\n遍历数组中的每个数num，如果num不等于当前下标加1。那么将这个数与下标为num - 1的数交换，直到num等于当前下标加1。如果num - 1位置的数和num相等，表示出现重复，因此返回num\n\n```c++\nclass Solution {\npublic:\n    int findDuplicate(vector<int>& nums) {\n        for(int i = 0;i < nums.size();i++){\n            int tp;\n            while(nums[i] != i + 1){\n                if(nums[nums[i] - 1] != nums[i]){\n                    tp = nums[nums[i] - 1];\n                    nums[nums[i] - 1] = nums[i];\n                    nums[i] = tp;\n                }\n                else\n                    return nums[i];\n            }\n        }\n        \n        return -1;//输入数据无效\n    }\n};\n```\n\n* 时间复杂度：O(n)\n* 空间复杂度：O(1)\n* 会修改数组\n\n#### 3）循环检测\n\nn+1个元素，下标范围是[0,n]，元素值的范围是[1,n]\n\n可以将元素值看作是下一位置的下标。一开始在位置0，读取位置0元素的值，然后走到相应的位置，读取该位置元素的值，继续走到下一位置...\n\n由于元素范围是[1,n]，因此位置0的元素会映射到位置[1,n]中的某一个，并且位置[1,n]中的n个值，也会映射到位置[1,n]中。那么就有n+1个元素映射到[1,n]中的n个位置。因此势必存在至少2个位置的值，会映射到同一个位置，也就是出现环。那么环的入口位置就是重复出现的元素，从而转换成求环的入口节点\n\n例如：\n\n```\n 0 1 2,3\n[1,2,3,1]\n\n那么从位置0开始出发：0->1->2->3\n                    /|\\    |\n                     |-----|\n\n位置1为环的入口，因此重复元素为1\n```\n\n\n```c++\nclass Solution {\npublic:\n    int findDuplicate(vector<int>& nums) {\n        int slow = 0,fast = 0;\n        \n        do{\n            slow = nums[slow];          //slow每次走1步\n            fast = nums[nums[fast]];    //fast每次走2步\n        }while(slow != fast);\n        \n        int count = 0;//环长\n        do{\n            fast = nums[fast];\n            count++;\n        }while(fast != slow);\n        \n        slow = 0,fast = 0;\n        while(count--)  fast = nums[fast];\n        while(slow != fast){\n            slow = nums[slow];\n            fast = nums[fast];\n        }\n        \n        return slow;//or fast\n    }\n};\n```\n\n* 时间复杂度：O(n)\n* 空间复杂度：O(1)\n* 不会修改数组\n', 'https://leetcode.com/problems/find-the-duplicate-number/description/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (200, '2021-01-17 13:00:09.766', '2021-01-17 13:00:09.766', NULL, '找钱', '给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。\n\n示例 1:\n\n```\n输入: coins = [1, 2, 5], amount = 11\n输出: 3 \n解释: 11 = 5 + 5 + 1\n```\n\n示例 2:\n\n```\n输入: coins = [2], amount = 3\n输出: -1\n```\n\n说明：你可以认为每种硬币的数量是无限的。\n\n', '设`state[i]`表示总金额为`i`时，最少需要找的硬币数。那么只需要分析面额小于等于`i`的硬币`j（0 < j ≤ i）`\n\n对于某个面额符合要求的硬币`j`，可以选择找或者不找：\n\n* 如果找，并且`state[i - j]`有意义（即总金额为`i - j`时，至少存在一种找钱的方法），那么`state[i] = 1 + state[i - j]`\n* 如果不找，那么继续分析下一个复合面额的硬币`j`\n\n因此，`state[i] = min{state[i],1 + state[i - j]}`（`0 < j ≤ i`，且`state[i - j]`有意义）\n\n```c++\nclass Solution {\npublic:\n    int coinChange(vector<int>& coins, int amount) {\n        if(coins.empty() || amount == -1)  return -1;\n        \n        vector<int> state(amount + 1,-1);\n        state[0] = 0;\n        \n        for(int price = 1;price <= amount;price++){\n            for(int i = 0;i < coins.size();i++)\n                if(coins[i] <= price && state[price - coins[i]] != -1)\n                    if(state[price] == -1 || state[price] > state[price - coins[i]] + 1)\n                        state[price] = state[price - coins[i]] + 1;\n        }\n        \n        return state[amount];\n     }\n};\n```\n', 'https://leetcode.com/problems/coin-change/description/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (201, '2021-01-17 13:00:09.767', '2021-01-17 13:00:09.767', NULL, '装载货物的最少货车数量', 'N个货物需要装车，每个车最多能装重量300的货物，货物的重量在区间[100,300]内，给出N个货物的重量，求最少需要多少量车？\n\n例子：\n\n```\n输入：\n130 140 150 160\n输出：\n2\n\n输入：\n130 140 150 160 100 100 100\n输出：\n3\n\n输入：\n100 100 100 100 100 100 200 200 200\n输出：\n4\n```\n\n', '> 仅供参考，没有经过大量测试用例的验证\n\n先装大重量的货物，然后根据货车剩余能装载货物的重量从剩余小重量的货物中按重量从大到小（为的是尽可能的”装满“），找到能放上货车的货物。如果某个货物已经用于填充某个大重量货物所在的货车，当遍历到这个货物时，直接跳过，因为该货物已经使用过。所以用一个数组state记录每个货物使用与否：\n\n```c++\n#include <iostream>\n#include <sstream>\n#include <vector>\n\nusing namespace std;\n\nint solution(vector<int> &weights){\n    vector<int> state(weights.size(),0);\n    int res = 0;\n    for(int i = weights.size() - 1;i >= 0;i--){\n        if(state[i] == 1)  continue;\n        int curr = weights[i];\n        res++;\n        for(int j = i - 1;j >= 0;j--){\n            if(state[j] == 0 && weights[j] + curr <= 300) {\n                curr += weights[j];\n                state[j] = 1;\n            }\n        }\n    }\n    return res;\n}\n\nint main()\n{\n    //注意怎么处理输入\n    string line;\n    while(getline(cin,line)){\n        stringstream s(line);\n        int weight;\n        vector<int> weights;\n        while(s >> weight){\n            weights.push_back(weight);\n        }\n        cout << solution(weights) << endl;\n    }\n\n    return 0;\n}\n\n\n```\n', '', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (202, '2021-01-17 13:00:09.768', '2021-01-17 13:00:09.768', NULL, '实现双链表节点删除函数', '如题\n\n', '```c++\n#include <iostream>\n\nusing namespace std;\n\nstruct node{\n    node() = default;\n    node(int v) : val(v) {}\n\n    int val = 0;\n    node *next = NULL;\n    node *prev = NULL;\n};\n\n/********************************************************************\n *  双链表节点删除\n ********************************************************************/\nvoid deletenode(node **head, node *n){\n    if(!head || !n)  return;\n\n    if(*head == n){//1.删除头节点\n        //更新头节点\n        *head = n->next;\n        if(n->next){//链表中不只1个节点\n            n->next->prev = NULL;\n            n->next = NULL;\n        }\n    }\n    else if(!n->next){//2.删除尾节点\n        n->prev->next = NULL;\n        n->prev = NULL;\n    }\n    else{//3.删除中间节点\n        n->prev->next = n->next;\n        n->next->prev = n->prev;\n        n->prev = NULL;\n        n->next = NULL;\n    }\n\n    delete n;\n}\n\n\n//打印链表函数\nvoid printlist(node *head);\n\nint main()\n{\n    node *n1 = new node(1);\n    node *n2 = new node(2);\n    node *n3 = new node(3);\n\n    n1->next = n2;\n    n2->next = n3;\n    n2->prev = n1;\n    n3->prev = n2;\n\n    node *head = n1;        \n\n    printlist(head);        //list : 1->2->3\n\n    deletenode(&head,n2);   //删除中间节点，返回后head指针不变\n    printlist(head);        //list : 1->3\n\n    deletenode(&head,n3);   //删除尾节点，返回后head指针不变\n    printlist(head);        //list : 1\n\n    deletenode(&head,n1);   //删除唯一的节点，返回后head为NULL\n    printlist(head);        //list :\n\n    return 0;\n}\n\nvoid printlist(node *head){\n    cout << \"list : \";\n    while(head){\n        if(!head->next)\n            cout << head->val << endl;\n        else\n            cout << head->val << \"->\";\n        head = head->next;\n    }\n}\n```\n', '', 'algorithm', '链表', 1, 1);
INSERT INTO `problems` VALUES (203, '2021-01-17 13:00:09.768', '2021-01-17 13:00:09.768', NULL, '数组表示的数字加1', '给定一个非负整数组成的非空数组，在该数的基础上加一，返回一个新的数组。\n\n最高位数字存放在数组的首位， 数组中每个元素只存储一个数字。\n\n你可以假设除了整数 0 之外，这个整数不会以零开头。\n\n示例 1:\n\n```\n输入: [1,2,3]\n输出: [1,2,4]\n解释: 输入数组表示数字 123。\n```\n\n示例 2:\n\n```\n输入: [4,3,2,1]\n输出: [4,3,2,2]\n解释: 输入数组表示数字 4321。\n```\n\n', '从数组最后一个数往前处理，如果数字等于9，那么变为0，然后进位，前一位因此也需要进行加1处理，直到某个数字小于9或者已经处理完数组的所有数字。如果所有数字都是9，那么需要在数组最前面添加一个1，可以将首元素改为1，然后压入一个0\n\n```c++\nclass Solution {\npublic:\n    vector<int> plusOne(vector<int>& digits) {\n        int jw = 0,sz = digits.size();\n        int i = sz - 1;\n        while(i >= 0 && digits[i] == 9){\n            digits[i] = 0;\n            i--;\n        }\n        if(i >= 0)  digits[i] += 1;\n        else{\n            digits[0] = 1;\n            digits.push_back(0);\n        }\n        \n        return digits;\n    }\n};\n```\n', 'https://leetcode.com/problems/plus-one/description/', 'algorithm', '数学', 1, 1);
INSERT INTO `problems` VALUES (204, '2021-01-17 13:00:09.769', '2021-01-17 13:00:09.769', NULL, '缺失的第一个正数', '给定一个未排序的整数数组，找出其中没有出现的最小的正整数。\n\n示例 1:\n\n```\n输入: [1,2,0]\n输出: 3\n```\n\n示例 2:\n\n```\n输入: [3,4,-1,1]\n输出: 2\n```\n\n示例 3:\n\n```\n输入: [7,8,9,11,12]\n输出: 1\n```\n\n说明:\n\n你的算法的时间复杂度应为O(n)，并且只能使用常数级别的空间。\n\n', '假设对于大小为n（n>0）的数组，这n个数可以分为以下几种情况：\n\n1. n个数都小于等于0\n2. n个数都大于n\n3. 存在一个或多个位于[1,n]的数\n\n对于情况1，要查找的第一个缺失的正数就是1；对于情况2，要查找的第一个缺失的正数也是1；问题是对于情况3应该怎么考虑\n\n假设这些位于[1,n]的数i，在数组中的位置为i-1，而小于等于0的数，以及大于n的数，在数组剩余位置：\n\n* 如果数组所有的数都在[1,n]，那么每个元素都在其值减1的位置，此时要找的第一个缺失的整数就是n+1\n* 否则，**数组中，必然存在一个位置idx，其元素值不等于idx+1**，而范围[1,n]就是正数序列最开始的n个数，因此，从左往右查找第一个下标加1不等于值的位置，那么要找的第一个缺失的正数就是该位置的下标加1\n\n剩下的就是将范围在[1,n]的元素放置到正确的位置了。\n\n> **使数组大小为n，刚好可以放下前n个正数，由于0不是正数，那么将数组下标i的槽存放正数i+1。经过这样的处理后，第一个不满足上述关系的槽应该存放的那个正数，就是第一个缺失的正数**\n\n```c++\nclass Solution {\npublic:\n    int firstMissingPositive(vector<int>& nums) {\n        int n = nums.size();\n        for(int i = 0;i < n;i++){\n            while(nums[i] > 0 && nums[i] <= n && nums[i] != (i+1) && nums[nums[i] - 1] != nums[i]){\n                int tp = nums[nums[i] - 1];\n                nums[nums[i] - 1] = nums[i];\n                nums[i] = tp;\n            }\n        }\n        \n        for(int i = 0;i < n;i++){\n            if(nums[i] != i + 1)    return i + 1;\n        }\n        \n        return n + 1;\n    }\n};\n```\n', 'https://leetcode.com/problems/first-missing-positive/discuss/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (205, '2021-01-17 13:00:09.769', '2021-01-17 13:00:09.769', NULL, '两数相加', '给定两个非空链表来表示两个非负整数。位数按照逆序方式存储，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。\n\n你可以假设除了数字 0 之外，这两个数字都不会以零开头。\n\n示例：\n\n```\n输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)\n输出：7 -> 0 -> 8\n原因：342 + 465 = 807\n```\n\n', '* **可以在新链表头结点之前创建一个辅助节点来便利处理**\n* 要注意链表处理完后可能还有进位，此时还需创建一个节点\n\n```c++\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *addTwoNumbers(ListNode *l1, ListNode *l2) {\n        ListNode preHead(0), *p = &preHead;\n        int extra = 0;\n        while (l1 || l2 || extra) {\n            int sum = (l1 ? l1->val : 0) + (l2 ? l2->val : 0) + extra;\n            extra = sum / 10;\n            p->next = new ListNode(sum % 10);\n            p = p->next;\n            l1 = l1 ? l1->next : l1;\n            l2 = l2 ? l2->next : l2;\n        }\n        return preHead.next;\n    }\n};\n```\n', 'https://leetcode.com/problems/add-two-numbers/description/', 'algorithm', '链表', 1, 1);
INSERT INTO `problems` VALUES (206, '2021-01-17 13:00:09.770', '2021-01-17 13:00:09.770', NULL, '天际线问题', '城市的天际线是从远处观看该城市中所有建筑物形成的轮廓的外部轮廓。现在，假设您获得了城市风光照片（图A）上显示的所有建筑物的位置和高度，请编写一个程序以输出由这些建筑物形成的天际线（图B）\n\n<div align=\"center\"> <img src=\"https://github.com/arkingc/note/raw/master/pic/leetcode-218-1.png\"/> </div>\n\n每个建筑物的几何信息用三元组 [Li，Ri，Hi] 表示，其中 Li 和 Ri 分别是第 i 座建筑物左右边缘的 x 坐标，Hi 是其高度。可以保证 0 ≤ Li, Ri ≤ INT_MAX, 0 < Hi ≤ INT_MAX 和 Ri - Li > 0。您可以假设所有建筑物都是在绝对平坦且高度为 0 的表面上的完美矩形。\n\n例如，图A中所有建筑物的尺寸记录为：[ [2 9 10], [3 7 15], [5 12 12], [15 20 10], [19 24 8] ] 。\n\n输出是以 [ [x1,y1], [x2, y2], [x3, y3], ... ] 格式的“关键点”（图B中的红点）的列表，它们唯一地定义了天际线。关键点是水平线段的左端点。请注意，最右侧建筑物的最后一个关键点仅用于标记天际线的终点，并始终为零高度。此外，任何两个相邻建筑物之间的地面都应被视为天际线轮廓的一部分。\n\n例如，图B中的天际线应该表示为：[ [2 10], [3 15], [7 12], [12 0], [15 10], [20 8], [24, 0] ]。\n\n说明:\n\n* 任何输入列表中的建筑物数量保证在 [0, 10000] 范围内。\n* 输入列表已经按升序排列在左边的 x 位置 Li 。\n* 输出列表必须按 x 位排序。\n* 输出天际线中不得有连续的相同高度的水平线。例如 [...[2 3], [4 5], [7 5], [11 5], [12 7]...] 是不正确的答案；三条高度为 5 的线应该在最终输出中合并为一个：[...[2 3], [4 5], [12 7], ...]\n\n', '[参考](https://www.youtube.com/watch?v=8Kd-Tn_Rz7s&vl=zh)\n\n**扫描线的方法**\n\n将大楼的左上角点称为“入”点，右上角的点称为“出”点。从左往右扫描，每当遇到一个点：\n\n* 如果是一个“入”点，并且该点是当前最高的点，那么就将该点加入结果中\n* 如果是一个“出”点，那么就需要将自己（该大楼）移除，如果删除后最高的大楼低于被删除大楼的高度，那么就将扫描线与删除后最高的大楼（即第二高的大楼）的交点加入结果中（如果删除前和删除后最高的大楼相同，那么不做额外处理）\n\n<div align=\"center\"> <img src=\"https://github.com/arkingc/note/raw/master/pic/leetcode-218-2.png\"/> </div>\n\n可以通过将高度改为对应负值来标识一个“出”点\n\n注意几种特殊情况：\n\n* 当一个大楼的右边与另一个大楼的最左边挨着，即第一个大楼的“出”点x坐标与第二个大楼的“入”点x坐标相等。此时扫描线应该先处理后一个大楼的“入”点，否则会添加一个错误的点。因为“出”点的高度用负值标识，所有”入“点都是正值，所以排序的时候，x相同时高度更高的点排在前面即可满足这种要求：\n\n<div align=\"center\"> <img src=\"https://github.com/arkingc/note/raw/master/pic/leetcode-218-3.png\"/> </div>\n\n* 当两个大楼的”入“点或”出“点的x坐标相同时，即两个大楼的左边挨着，或者右边挨着时\n    - 如果左边挨着：那么要从最高的大楼开始处理，否则会添加3个点\n    - 如果右边挨着；那么要从最低的大楼开始处理，否则也会添加3个点（上面将”出“点高度用对应的负值标识，这样的处理在排序时，也能满足这个要求）\n\n<div align=\"center\"> <img src=\"https://github.com/arkingc/note/raw/master/pic/leetcode-218-4.png\"/> </div>\n\n```c++\nclass Solution {\npublic:\n    vector<pair<int, int>> getSkyline(vector<vector<int>>& buildings) {\n        multiset<int> hs; //包含所有已处理过的左上角和右上角点的高度\n        \n        vector<pair<int,int>> es;//保存所有待处理点\n        for(const auto &p : buildings){\n            es.emplace_back(p[0],p[2]);  //左上角（“入”点）\n            es.emplace_back(p[1],-p[2]); //右上角，高度取负值用以标识是个“出”点\n        }\n        \n        auto comp = [](const pair<int,int> &p1,const pair<int,int> p2){\n            //如果两个点x相同，则更高的点排在前面\n            if(p1.first == p2.first)    return p1.second > p2.second;\n            //如果两个点x不同，则x更小的排在前面\n            return  p1.first < p2.first;\n        };\n        \n        //对所有点排序，因为要用线段扫描，所以按x轴排序，x相同的点，较低的排前面\n        sort(es.begin(),es.end(),comp); \n        \n        vector<pair<int,int>> res;\n        \n        //遍历每个建筑的两个顶点\n        for(const auto &p : es){\n            int x = p.first; //x左标\n            bool entering = p.second > 0; //是不是个“入”点\n            int h = abs(p.second);  //得到实际高度\n            \n            if(entering){// 如果是一个“入”点\n                if(h > maxHeight(hs))\n                    res.emplace_back(x,h);\n                hs.insert(h);\n            } else { // 如果是一个“出”点\n                hs.erase(hs.equal_range(h).first);//有多个相同时，删除任意一个即可\n                if(h > maxHeight(hs))\n                    res.emplace_back(x,maxHeight(hs));\n            }\n        }\n        \n        return res;\n    }\n    \nprivate:\n    int maxHeight(const multiset<int> &hs) const {\n        if(hs.empty())  return 0;\n        return *hs.rbegin();\n    }\n};\n```\n', 'https://leetcode.com/problems/the-skyline-problem/description/', 'algorithm', '数学', 1, 1);
INSERT INTO `problems` VALUES (207, '2021-01-17 13:00:09.776', '2021-01-17 13:00:09.776', NULL, '中序遍历的下一个节点', '给定一个二叉树和其中的一个结点，请找出中序遍历顺序的下一个结点并且返回。注意，树中的结点不仅包含左右子结点，同时包含指向父结点的指针\n\n', '* 如果一个节点有右子树，那么下一个节点就是它的右子树中的最左子节点\n* 如果节点没有右子树，并且它是父节点的左子节点，则下一节点就是它的父节点\n* 如果节点没有右子树，并且它是父节点的右子节点，则沿着指向父节点的指针一直向上遍历，直到找到一个是它父节点的左子节点。如果这样的节点存在，那么这个节点的父节点就是我们要找的下一个节点\n\n```c++\n/*\nstruct TreeLinkNode {\n    int val;\n    struct TreeLinkNode *left;\n    struct TreeLinkNode *right;\n    struct TreeLinkNode *next;\n    TreeLinkNode(int x) :val(x), left(NULL), right(NULL), next(NULL) {\n        \n    }\n};\n*/\n\nclass Solution {\npublic:\n    TreeLinkNode* GetNext(TreeLinkNode* pNode)\n    {\n        if(!pNode)\n            return nullptr;\n        \n        if(pNode->right)\n            return MostLeft(pNode->right);\n        \n        TreeLinkNode* nd = pNode;\n        while(nd->next && nd->next->left != nd)\n            nd = nd->next;\n        if(!nd->next)\n            return nullptr;\n        else\n            return nd->next;\n    }\n    \n    TreeLinkNode* MostLeft(TreeLinkNode* nd){\n        if(!nd)\n            return nullptr;\n        \n        if(!nd->left)\n            return nd;\n        \n        return MostLeft(nd->left);\n    }\n};\n```\n', 'https://www.nowcoder.com/practice/9023a0c988684a53960365b889ceaf5e?tpId=13&tqId=11210&tPage=3&rp=3&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking', 'algorithm', '树', 1, 1);
INSERT INTO `problems` VALUES (208, '2021-01-17 13:00:09.776', '2021-01-17 13:00:09.776', NULL, '计算右侧小于当前元素的个数', '给定一个整数数组 nums，按要求返回一个新数组 counts。数组 counts 有该性质： counts[i] 的值是  nums[i] 右侧小于 nums[i] 的元素的数量。\n\n示例:\n\n```\n输入: [5,2,6,1]\n输出: [2,1,1,0] \n解释:\n5 的右侧有 2 个更小的元素 (2 和 1).\n2 的右侧仅有 1 个更小的元素 (1).\n6 的右侧有 1 个更小的元素 (1).\n1 的右侧有 0 个更小的元素.\n```\n\n', '#### 1）归并(分治)\n\n其实就是类似[求逆序对](#数组中的逆序对)的方法，不过求逆序对这个题是求出逆序对的总数即可，但是这里实际是求数组中每个元素和其后元素的数构成多少个逆序对，所以会复杂一些，但是方法一样\n\n假设有2个数组num1（假设下标为l1-r1）和num2（假设下标为l2-r2），满足下列性质：\n\n* num1和num2已经按照**降序**排好序\n* l1 <= r1 < l2 <= r2\n\n因为num1中的每个元素都在num2的前面，因此很好统计有多少个逆序对，归并过程如下：\n\n* 对于num1中的元素m和num2中的元素n，有：\n    - 如果m大于n，那么m元素的逆序对增加的数量为num2中n及n以后所有元素的数量，然后继续处理num1中m后方的元素\n    - 如果m小于等于n，m及num1中m后方的元素，都不可能与n构成逆序对，因此处理num2中n后方的元素\n* 上面的过程可以统计出逆序对，但是在该次归并后，下一次归并时，我们需要保证新的更大的数组依然满足降序的顺序，因此在统计逆序对的过程中需要进行归并排序\n* 最后一个问题是，在统计逆序对的过程中，如果m比n大，那么需要增加m的逆序对的数量，但是在归并过程中，m的位置可能不断发生变化，同时数组中可能包含相同的值，即多个m，那么如何根据m定位到需要增加逆序对的位置？答案是使用下标，在归并和排序的过程中，使用的是一个下标数组idx，根据这个数组可以定位到元素在最初数组中的位置，同时，即使不断移动，也能索引到其值\n\n```c++\nclass Solution {\npublic:\n    vector<int> countSmaller(vector<int>& nums) {\n        vector<int> idx;\n        for(int i = 0;i < nums.size();i++)  idx.push_back(i);\n        vector<int> res(nums.size(),0);\n        vector<int> tmp(nums.size(),0);\n        countSmallerCore(nums,idx,tmp,res,0,nums.size() - 1);\n        return res;\n    }\nprivate:\n    void countSmallerCore(vector<int> &nums,vector<int> &idx,vector<int> &tmp,vector<int> &res,int l,int r){\n        if(l >= r)  return;\n\n        int mid = (l + r) >> 1;\n        countSmallerCore(nums,idx,tmp,res,l,mid);\n        countSmallerCore(nums,idx,tmp,res,mid + 1,r);\n        merge(nums,idx,tmp,res,l,mid,mid + 1,r);\n    }\n\n    void merge(vector<int> &nums,vector<int> &idx,vector<int> &tmp,vector<int> &res,int l1,int r1,int l2,int r2){\n        int p1 = l1,p2 = l2,p = l1;\n        while(p1 <= r1 && p2 <= r2){\n            if(nums[idx[p1]] > nums[idx[p2]]){\n                res[idx[p1]] += r2 - p2 + 1;\n                tmp[p++] = idx[p1++];\n            }\n            else\n                tmp[p++] = idx[p2++];\n        }\n        while(p1 <= r1) tmp[p++] = idx[p1++];\n        while(p2 <= r2) tmp[p++] = idx[p2++];\n\n        p = l1;\n        while(p <= r2){\n            idx[p] = tmp[p];\n            p++;\n        }\n    }\n\n};\n```\n\n#### 2）BST\n\n假设从数组右边往左构建BST，每当遍历到一个元素时，其右边节点已经构成了一棵BST，对于当前节点，如果能在将其插入BST的过程中同时得到BST中小于该元素的节点个数，那么每个元素就能实现O(logn)的查找，总的时间复杂度就是O(nlogn)\n\n为了能够在BST中快速得到比新插入元素小的节点个数，肯定需要在节点中维护除节点值以外的其它信息。因为数组中可能包含相同元素，那么BST节点中添加一个`count`变量统计相同元素的个数，那么再添加一个`left_count`变量表示BST中比当前节点值小的节点总数（**这种假设是一种全局性质**），假设这样行的通，那么只要找到新节点插入点的父节点，那么就可以根据父节点判断比新值小的元素有多少个\n\n但是这样行不通，因为在插入节点时，需要更新BST中已有节点的`left_count`，如果`left_count`表示BST中比当前节点值小的节点总数，那么无法实现O(logn)的查找，考虑如下例子：\n\n```\n       a\n      / \\\n     b   c \n```\n\n\n* 如果新节点比a小，如果`left_count`表示BST中比当前节点值小的节点总数，那么在新节点插入时，需要递增a节点的`left_count`\n* 如果新节点比a大，a节点的`left_count`不变，继续往a节点的右子树处理\n\n注意，问题出在新节点比a小时！此时只能更新a，如果`left_count`表示BST中比当前节点值小的节点总数，那么所有a节点右子树中的节点都应该递增其`left_count`\n\n那么到底应该赋予`left_count`什么样的意义？现在不管a节点的左子树和右子树长什么样，并且假设a是BST中任意节点。每当一个节点需要插入a节点的左边时，a的左子树节点总数就加1，这是肯定没问题的。所以我们**只能保证一种局部性质，即`left_count`表示该节点左子树的节点总数**\n\n那么如果`left_count`表示该节点左子树的节点总数，有没有办法在插入一个节点时获取整棵BST中比新节点小的节点总是？答案是肯定的，从根节点开始遍历，查找新节点的插入位置：\n\n* 如果新节点大于某个节点a，那么小于新节点的节点个数就增加`a->left_count+a->count`\n* 如果新节点等于某个节点a，那么小于新节点的节点个数就增加`a->left_count`\n* 如果新节点小于某个节点a，此时只能知道新节点在a的左子树中，但是无法知道a的左子树中有多少节点小于新节点，所以暂时无法得出应该增加多少，因此增加`0`\n\n```c++\nclass Solution {\npublic:\n    vector<int> countSmaller(vector<int>& nums) {\n        if(nums.size() <= 0)    return vector<int>();\n        \n        vector<int> res;\n        BSTNode *root = new BSTNode(nums.back());\n        res.push_back(0);\n        for(int i = nums.size() - 2;i >= 0;i--)\n            res.push_back(insertBSTNode(root,nums[i]));\n        \n        delete root;\n    \n        reverse(res.begin(),res.end());\n        \n        return res;    \n    }\nprivate:\n    struct BSTNode{\n        int val;        //节点的值\n        int count;      //相同值的个数\n        int left_count; //左子树节点的个数\n        BSTNode *left;\n        BSTNode *right;\n        BSTNode(int v) : val(v) , count(1) , left_count(0) , left(NULL) , right(NULL) {}\n        ~BSTNode() {delete left;delete right;}\n    };\n\n    int insertBSTNode(BSTNode *root,int val){\n        int res = 0;\n        BSTNode *p = root,*pp;\n        while(p){\n            if(val < p->val){\n                (p->left_count)++;\n                res += 0;\n                pp = p;\n                p = p->left;\n            }\n            else if(val > p->val){\n                res += p->count + p->left_count;\n                pp = p;\n                p = p->right;\n            }\n            else{\n                (p->count)++;\n                res += p->left_count;\n                break;\n            }\n        }\n        BSTNode *node = p;\n        if(!p){ //说明不是一个以前出现过的值，因此需要插入\n            node = new BSTNode(val);\n            if(val < pp->val)   pp->left = node;\n            else    pp->right = node;\n        }\n        return res;\n    }\n};\n```\n\n#### 3）树状数组\n\n* [树状数组(Binary Index Tree)介绍](https://www.youtube.com/watch?v=WbafSgetDDk)\n* [树状数组的解法](https://www.youtube.com/watch?v=2SVLYsq5W8M)\n\n```c++\n// Author: Huahua\n// Runnning time: 32 ms\n// Time complexity: O(nlogn)\n// Space complexity: O(k), k is the number unique elements\nclass FenwickTree {    \npublic:\n    FenwickTree(int n): sums_(n + 1, 0) {}\n    \n    void update(int i, int delta) {\n        while (i < sums_.size()) {\n            sums_[i] += delta;\n            i += lowbit(i);\n        }\n    }\n    \n    int query(int i) const {        \n        int sum = 0;\n        while (i > 0) {\n            sum += sums_[i];\n            i -= lowbit(i);\n        }\n        return sum;\n    }\nprivate:\n    static inline int lowbit(int x) { return x & (-x); }\n    vector<int> sums_;\n};\n \nclass Solution {\npublic:\n    vector<int> countSmaller(vector<int>& nums) {\n        // Sort the unique numbers\n        set<int> sorted(nums.begin(), nums.end());\n        // Map the number to its rank\n        unordered_map<int, int> ranks;\n        int rank = 0;\n        for (const int num : sorted)\n            ranks[num] = ++rank;\n        \n        vector<int> ans;\n        FenwickTree tree(ranks.size());\n        // Scan the numbers in reversed order\n        for (int i = nums.size() - 1; i >= 0; --i) {\n            // Chechk how many numbers are smaller than the current number.\n            ans.push_back(tree.query(ranks[nums[i]] - 1));\n            // Increse the count of the rank of current number.\n            tree.update(ranks[nums[i]], 1);\n        }\n        \n        std::reverse(ans.begin(), ans.end());\n        return ans;\n    }\n};\n```\n', 'https://leetcode.com/problems/count-of-smaller-numbers-after-self/description/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (209, '2021-01-17 13:00:09.780', '2021-01-17 13:00:09.780', NULL, '基础的计算器', '实现一个基本的计算器来计算一个简单的字符串表达式的值。\n\n字符串表达式仅包含非负整数，`+`， `-` ，`*`，`/` 四种运算符和`空格`  。 整数除法仅保留整数部分。\n\n示例 1:\n\n```\n输入: \"3+2*2\"\n输出: 7\n```\n\n示例 2:\n\n```\n输入: \" 3/2 \"\n输出: 1\n```\n\n示例 3:\n\n```\n输入: \" 3+5 / 2 \"\n输出: 5\n```\n\n说明：\n\n* 你可以假设所给定的表达式都是有效的。\n* 请不要使用内置的库函数 `eval`。\n\n', '第一次遍历将`*`和`/`进行计算，使用一个队列保存操作数，一个队列保存操作符\n\n第一次遍历完后，如果操作数队列中的数字个数大于1，则按从左往右的顺序计算，因为第一次遍历已经处理了所有乘法和除法，所以现在只需处理加法和减法\n\n```c++\nclass Solution {\npublic:\n    int calculate(string s) {\n        deque<int> nums;\n        deque<char> ops;\n        \n        int i = 0;\n        for(int j = i;j < s.size();j++){\n            if(s[j] == \'+\' || s[j] == \'-\' || s[j] == \'*\' || s[j] == \'/\'){\n                int num = stoi(s.substr(i,j - i));\n                if(!ops.empty() && (ops.back() == \'*\' || ops.back() == \'/\')){\n                    if(ops.back() == \'*\')\n                        nums.back() = nums.back() * num;\n                    else\n                        nums.back() = nums.back() / num;\n                    ops.pop_back();\n                }\n                else\n                    nums.push_back(num);\n                ops.push_back(s[j]);\n                i = j + 1;\n            }\n        }\n        \n        nums.push_back(stoi(s.substr(i,s.size() - i)));//最后一个数\n        if(!ops.empty() && (ops.back() == \'*\' || ops.back() == \'/\')){\n            int num = nums.back();nums.pop_back();\n            if(ops.back() == \'*\')\n                nums.back() = nums.back() * num;\n            else\n                nums.back() = nums.back() / num;\n            ops.pop_back();\n        }\n        \n        while(nums.size() > 1){\n            int num = nums.front(); nums.pop_front();\n            if(ops.front() == \'+\')\n                nums.front() = num + nums.front();\n            else if(ops.front() == \'-\')\n                nums.front() = num - nums.front();\n            ops.pop_front();\n        }\n        \n        return nums.front();\n    }\n};\n```\n', 'https://leetcode.com/problems/basic-calculator-ii/description/', 'algorithm', '数学', 1, 1);
INSERT INTO `problems` VALUES (210, '2021-01-17 13:00:09.780', '2021-01-17 13:00:09.780', NULL, '反转链表', '输入一个链表，反转链表后，输出新链表的表头\n\n', '#### 1）迭代\n\n每次循环将curr.next修改为前一节点\n\n因为需要将当前节点的next节点修改为前一节点，所以需要用一个指针prev记录前一节点。同时，由于修改了当前节点的next节点后，无法访问原来的next节点，因此需要一个指针next，在修改前记录原来的next节点\n\n* 时间复杂度：O(n)\n* 空间复杂度：O(1)\n\n```c++\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode *curr = head,*next = head ? head->next : NULL,*prev = NULL;\n        while(curr){\n            curr->next = prev;\n            prev = curr;\n            curr = next;\n            if(next)\n                next = next->next;\n        }\n        \n        return prev;\n    }\n};\n```\n\n#### 2）递归\n\n```\nn(1) -> n(2) -> ... -> n(k) -> n(k+1) <- ... <- n(m)\n```\n\n在m个节点的链表中，对于每次递归处理的节点k，假设节点k之后的节点已经处理完（逆序）。对于节点k，只需修改其next成员，以及节点(k+1)的next成员\n\n```\nn(k)->next->next = n(k);\nn(k)->next = NULL;\n```\n\n函数返回逆序后链表的头结点，因此对于n(m)，直接返回n(m)\n\n* 时间复杂度：O(n)\n* 空间复杂度：O(n)（每次递归函数栈帧都会创建1个局部指针保存逆序后的链表头结点）\n\n>注：不能假设对于每次递归处理的节点k，前k-1个节点已经逆序。因为节点k无法访问到前一节点，因此无法将k节点逆序，因此对于节点k+1，前k个节点无法逆序。也不能假设前k个节点已经逆序，因为如果前k个节点已经逆序，对于节点k，将k+1节点逆序，当处理k+1节点时，无法访问到k+2节点\n\n```c++\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        if(head == NULL || head->next == NULL) return head;\n        \n        ListNode* p = reverseList(head->next);\n        \n        head->next->next = head;\n        head->next = NULL;\n        \n        return p;\n    }\n};\n```\n', 'https://www.nowcoder.com/practice/75e878df47f24fdc9dc3e400ec6058ca?tpId=13&tqId=11168&tPage=1&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking', 'algorithm', '链表', 1, 1);
INSERT INTO `problems` VALUES (211, '2021-01-17 13:00:09.781', '2021-01-17 13:00:09.781', NULL, '将数组中的零移到尾部', '给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。\n\n示例:\n\n```\n输入: [0,1,0,3,12]\n输出: [1,3,12,0,0]\n```\n\n说明:\n\n1. 必须在原数组上操作，不能拷贝额外的数组。\n2. 尽量减少操作次数。\n\n', '对0计数，遍历到非0数时，根据0的计数决定向前移动多少。最后根据0的计数将数组尾端的相应个数的元素赋值为0\n\n```c++\nclass Solution {\npublic:\n    void moveZeroes(vector<int>& nums) {\n        int count = 0;\n        for(int i = 0;i < nums.size();i++){\n            if(nums[i] == 0)    count++;\n            else if(count != 0) nums[i - count] = nums[i];\n        }\n        \n        int end = nums.size() - 1;\n        while(count--)\n            nums[end--] = 0;\n    }\n};\n```\n', 'https://leetcode.com/problems/move-zeroes/description/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (212, '2021-01-17 13:00:09.782', '2021-01-17 13:00:09.782', NULL, '回文链表', '请判断一个链表是否为回文链表。\n\n示例 1:\n\n```\n输入: 1->2\n输出: false\n```\n\n示例 2:\n\n```\n输入: 1->2->2->1\n输出: true\n```\n\n进阶：\n\n你能否用 O(n) 时间复杂度和 O(1) 空间复杂度解决此题？\n\n', '使用两个指针b和e，b指向链表的头节点，e指向链表的尾节点，如果b和e的值相等，那么b指向下一个节点，e指向前一个节点，直到b和e指向相同节点。关键是链表单向，因此使用递归来设置e：\n\n```c++\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool isPalindrome(ListNode* head) {\n        if(!head)   return true;\n        \n        ListNode *b = head,*e = NULL;\n        return isPalindrome(head,&b,&e);\n    }\n    \nprivate:\n    bool isPalindrome(ListNode* node,ListNode **b,ListNode **e){       \n        if(node->next)\n            if(!isPalindrome(node->next,b,e))\n                return false;\n        \n        if(*b == *e)    \n            return true;\n        *e = node;\n        if((*b)->val == (*e)->val){\n            (*b) = (*b)->next;\n            return true;\n        }\n        else\n            return false;\n    }\n};\n```\n', 'https://leetcode.com/problems/palindrome-linked-list/description/', 'algorithm', '链表', 1, 1);
INSERT INTO `problems` VALUES (213, '2021-01-17 13:00:09.786', '2021-01-17 13:00:09.786', NULL, '删除链表倒数第n个节点', '给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。\n\n示例：\n\n```\n给定一个链表: 1->2->3->4->5, 和 n = 2.\n\n当删除了倒数第二个节点后，链表变为 1->2->3->5.\n```\n\n说明：\n\n给定的 n 保证是有效的。\n\n进阶：\n\n你能尝试使用一趟扫描实现吗？\n\n', '#### 1）双指针\n\n使用两个指针，一个指针先走n+1步，然后两个指针一起走，这样当先走的指针为NULL时，后走的指针指向倒数第n+1个节点，然后删除倒数第n个节点即可：\n\n```c++\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\n        if(n <= 0)  return head;\n        ListNode *prev = head,*behind = head;\n        n = n + 1;//移动到倒数第n个节点的前一个节点\n        while(n && prev){\n            prev = prev->next;\n            n--;\n        }\n        if(n){\n            if(n > 1)   return head;    //n太大，直接返回\n            //删除的是头节点\n            behind = head;\n            head = head->next;\n            delete behind;\n            return head;\n        }\n        while(prev){\n            prev = prev->next;\n            behind = behind->next;\n        }\n        ListNode *tp = behind->next->next;\n        delete behind->next ;\n        behind->next = tp;\n        return head;\n    }\n};\n```\n\n#### 2）递归\n\n使用递归找到倒数第n+1个节点，然后删除倒数第n个节点：\n\n```c++\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\n        if(n <= 0)  return head;\n        removeNthFromEnd(head,&n);\n        if(n == 0){\n            ListNode *tp = head;\n            head = head->next;\n            delete tp;\n        }\n        return head;\n    }\nprivate:\n    void removeNthFromEnd(ListNode* head,int *n){\n        if(!head)   return;\n        \n        removeNthFromEnd(head->next,n);\n        \n        if((*n)-- == 0){\n            ListNode *tp = head->next;\n            head->next = tp->next;\n            delete tp;\n            return;\n        }\n    }\n};\n```\n', 'https://leetcode.com/problems/remove-nth-node-from-end-of-list/description/', 'algorithm', '链表', 1, 1);
INSERT INTO `problems` VALUES (214, '2021-01-17 13:00:09.787', '2021-01-17 13:00:09.787', NULL, '两个链表的第一个公共节点', '输入两个链表，找出它们的第一个公共结点\n\n', '#### 1）哈希表\n\n遍历其中一个链表，如A。将链表中的每一个节点的地址存入hash set，然后遍历链表B，找出B中的每一个节点是否在hash set中，如果存在，则第一个查找到的节点就是相交节点的开始节点\n\n* 时间复杂度：O(m+n)\n* 空间复杂度：O(n) or O(m)\n\n#### 2）双指针\n\n长链表先走长度之差步，然后同时遍历，找到第一个相同节点\n\n* 时间复杂度：O(m+n)\n* 空间复杂度：O(1)\n\n```c++\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n        int len1 = 0,len2 = 0;\n        ListNode *p1 = headA,*p2 = headB;\n        \n        while(p1){\n            len1++;\n            p1 = p1->next;\n        }\n        while(p2){\n            len2++;\n            p2 = p2->next;\n        }\n        \n        int diff = abs(len1 - len2);\n        if(len1 > len2)\n            while(diff--)\n                headA = headA->next;\n        else\n            while(diff--)\n                headB = headB->next;\n        \n        while(headA && headB){\n            if(headA == headB)  return headA;\n            headA = headA->next;\n            headB = headB->next;\n        }\n        \n        return NULL; //2个链表不相交\n    }\n};\n```\n', 'https://www.nowcoder.com/practice/6ab1d9a29e88450685099d45c9e31e46?tpId=13&tqId=11189&tPage=2&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking', 'algorithm', '链表', 1, 1);
INSERT INTO `problems` VALUES (215, '2021-01-17 13:00:09.788', '2021-01-17 13:00:09.788', NULL, '数字字符串解码', '一条包含字母 `A-Z` 的消息通过以下方式进行了编码：\n\n```\n\'A\' -> 1\n\'B\' -> 2\n...\n\'Z\' -> 26\n```\n\n给定一个只包含数字的非空字符串，请计算解码方法的总数。\n\n示例 1:\n\n```\n输入: \"12\"\n输出: 2\n解释: 它可以解码为 \"AB\"（1 2）或者 \"L\"（12）。\n```\n\n示例 2:\n\n```\n输入: \"226\"\n输出: 3\n解释: 它可以解码为 \"BZ\" (2 26), \"VF\" (22 6), 或者 \"BBF\" (2 2 6) 。\n```\n\n', '动态规划，考虑包含n个字符的字符串s[0,1,...,n-1]\n\n* 如果将第一个字符单独解码，设字符串s[1,2,...,n-1]的解码方式有state1种\n* 如果能将前两个字符一起解码，设字符串s[2,3,...,n-1]的解码方式有state2种\n\n因此，可以得到一个状态转移方程：\n\n* F(s[0,1,...,n-1]) = state1 (不能将前2个字符一起解码时)\n* F(s[0,1,...,n-1]) = state1 + state2 (能将前2个字符一起解码时)\n* **还有一种情况，就是如果字符串以‘0’开头，那么单独的‘0’或‘0X’这种形式都无法解码，所以F(s[0,1,...,n-1]) = 0**\n\n```c++\nclass Solution {\npublic:\n    int numDecodings(string s) {\n        if(s.size() == 0)   return 0;\n        else if(s.size() == 1)  return s[0] == \'0\' ? 0 : 1;\n        \n        int end = s.size() - 1;\n        int state1 = s[end] == \'0\' ? 0 : 1 , state2 = 1;\n        int res;\n        for(int i = end - 1;i >= 0; i--){\n            if(s[i] == \'0\') res = 0;\n            else if(stoi(s.substr(i,2)) > 26)    res = state1;\n            else    res = state1 + state2;\n            state2 = state1;\n            state1 = res;\n        }\n        return res;\n    }\n};\n```\n', 'https://leetcode.com/problems/decode-ways/description/', 'algorithm', '字符串', 1, 1);
INSERT INTO `problems` VALUES (216, '2021-01-17 13:00:09.789', '2021-01-17 13:00:09.789', NULL, '不含重复字符的最长子串', '给定一个字符串，找出不含有重复字符的最长子串的长度。\n\n示例：\n\n给定 `\"abcabcbb\"` ，没有重复字符的最长子串是 `\"abc\"` ，那么长度就是3。\n\n给定 `\"bbbbb\"` ，最长的子串就是 `\"b\"` ，长度是1。\n\n给定 `\"pwwkew\"` ，最长子串是 `\"wke\"` ，长度是3。请注意答案必须是一个子串，`\"pwke\"` 是 子序列  而不是子串。\n\n', '> 如果是求不含重复字符的最长子序列，那么使用哈希表，但是重复出现的字符只算1次即可\n\n分析字符串“abcabcbb”：\n\n* 第一个字符肯定不含重复，所以最长子串为“a”，长度为1，继续下一个字符\n* 字符b与a不重复，所以最长子串更新为“ab”，长度更新为2，继续下一个字符\n* 字符c与a，b都不重复，所以最长子串更新为“abc”，长度更新为3，继续下一个字符\n* 字符a与字符串\"abc\"中的字符a重复，所以如果存在一个包含当前字符a的子串，其长度大于“abc”，那么这个子串肯定不包含第一个字符a，所以去除第一个字符a，从子串“bca”继续分析\n* ...\n\n上述步骤中隐含一定的规律：\n\n* 如果没有出现重复字符，这每次按1增加最长子串的长度\n* 如果出现重复字符，需要从原来最长子串中重复字符处截断，以截断位置后面的字符串为基础继续分析\n\n> 也就是说，如果没有找到重复元素，那么向右增加滑动窗口的长度，如果找到重复元素，那么从左边截断滑动窗口，截断位置为重复的字符在左边第一次出现的位置\n\n使用一个数组作为hash_map记录字符最近一次出现的位置，每遍历到一个字符时，如果map中其位置为-1，表示这个字符之前未出现过，因此增加长度。如果出现过，并且这个字符出现在截断位置之前，那么说明这个字符并没有重复，因此也增加长度。如果出现过，但是在截断位置之后，说明发生重复，因此进行截断，并更新相应的变量\n\n```c++\nconst int range = 256;\n\nclass Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        int state[range];\n        int globalmax = 0,localmax = 0;\n        int beginidx = 0;\n        \n        for(int i = 0;i < range;i++)    state[i] = -1;\n        \n        for(int idx = 0;idx < s.size();idx++){\n            if(state[s[idx]] < 0 || state[s[idx]] < beginidx){\n                localmax++;\n                state[s[idx]] = idx;\n                \n                if(localmax > globalmax)    globalmax = localmax;\n            }\n            else{\n                beginidx = state[s[idx]] + 1;\n                localmax = idx - beginidx + 1;\n                state[s[idx]] = idx;\n            }\n        }\n        \n        return globalmax;\n    }\n};\n```\n', 'https://leetcode.com/problems/longest-substring-without-repeating-characters/description/', 'algorithm', '字符串', 1, 1);
INSERT INTO `problems` VALUES (217, '2021-01-17 13:00:09.789', '2021-01-17 13:00:09.789', NULL, '删除排序数组中的重复项', '给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。\n\n不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。\n\n示例 1:\n\n```\n给定数组 nums = [1,1,2], \n\n函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 \n\n你不需要考虑数组中超出新长度后面的元素。\n```\n\n示例 2:\n\n```\n给定 nums = [0,0,1,1,1,2,2,3,3,4],\n\n函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。\n\n你不需要考虑数组中超出新长度后面的元素。\n```\n\n', '#### 1）计数\n\n在遍历时，统计冗余元素的个数，对于位置`i`的元素，如果`i`之前如果所有冗余元素个数为`count`，那么位置`i`的元素向前移动`count`\n\n```c++\nclass Solution {\npublic:\n    int removeDuplicates(vector<int>& nums) {\n        int count = 0;//冗余元素的个数\n        for(int i = 1;i < nums.size();i++){\n            if(nums[i] == nums[i  - 1]) count++;\n            else    nums[i - count] = nums[i];\n        }\n        return nums.size() - count;\n    }\n};\n```\n\n#### 2）双指针\n\n使用2个下标：`i`，`j`\n\n假设`i`及`i`之前的数组无重复元素，`j`为遍历数组时的下标，若找到一个与`i`不等的的元素，则将其拷贝到`i+1`位置，并更新`i`的值为`i+1`\n\n```c++\nclass Solution {\npublic:\n    int removeDuplicates(vector<int>& nums) {\n        int i = 0,j = 0;\n        while(++j < nums.size())\n            if(nums.at(j) != nums.at(i))\n                nums.at(++i) = nums.at(j);\n        return nums.size() == 0 ? 0 : i + 1;\n    }\n};\n```\n', 'https://leetcode.com/problems/remove-duplicates-from-sorted-array/description/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (218, '2021-01-17 13:00:09.790', '2021-01-17 13:00:09.790', NULL, '通配符匹配', '给定一个字符串 (s) 和一个字符模式 (p) ，实现一个支持 \'?\' 和 \'*\' 的通配符匹配。\n\n```\n\'?\' 可以匹配任何单个字符。\n\'*\' 可以匹配任意字符串（包括空字符串）。\n```\n\n两个字符串完全匹配才算匹配成功。\n\n说明:\n\n* s 可能为空，且只包含从 a-z 的小写字母。\n* p 可能为空，且只包含从 a-z 的小写字母，以及字符 ? 和 *。\n\n示例 1:\n\n```\n输入:\ns = \"aa\"\np = \"a\"\n输出: false\n解释: \"a\" 无法匹配 \"aa\" 整个字符串。\n```\n\n示例 2:\n\n```\n输入:\ns = \"aa\"\np = \"*\"\n输出: true\n解释: \'*\' 可以匹配任意字符串。\n```\n\n示例 3:\n\n```\n输入:\ns = \"cb\"\np = \"?a\"\n输出: false\n解释: \'?\' 可以匹配 \'c\', 但第二个 \'a\' 无法匹配 \'b\'。\n```\n\n示例 4:\n\n```\n输入:\ns = \"adceb\"\np = \"*a*b\"\n输出: true\n解释: 第一个 \'*\' 可以匹配空字符串, 第二个 \'*\' 可以匹配字符串 \"dce\".\n```\n\n示例 5:\n\n```\n输入:\ns = \"acdcb\"\np = \"a*c?b\"\n输入: false\n```\n\n', '使用动态规划\n\n给出字符串s，和字符串模板p。假设matches\\[0\\]\\[0\\]表示s和p是否能匹配。可以根据p[0]进行分析：\n\n* 如果p[0]==‘\\*’，那么可以选择\\*匹配一个字符，或者不匹配。如果匹配一个字符，那么matches\\[0\\]\\[0\\]取决于s.substr[1]与p是否匹配；如果\\*不匹配一个字符，那么matches\\[0\\]\\[0\\]取决于s与p.substr[1]是否匹配。即matches\\[0\\]\\[0\\] = matches\\[1\\]\\[0\\] || matches\\[0\\]\\[1\\]\n* 如果p[0]==\'?\'，那么必须匹配一个字符，因此matches\\[0\\]\\[0\\] = matches\\[1\\]\\[1\\]\n* 否则，matches\\[0\\]\\[0\\] = s\\[0\\] == p\\[0\\] && matches\\[1\\]\\[1\\]\n\n因此可以根据上面3种情况得到状态转移方程\n\n```c++\nclass Solution {\npublic:\n    bool isMatch(string s, string p) {\n        int len1 = s.length(),len2 = p.length();\n        \n        vector<vector<char>> matches(len1 + 1,vector<char>(len2 + 1));\n        for(int i = 0;i < len1;i++)  // p == \"\"\n            matches[i][len2] = 0;\n        matches[len1][len2] = 1;       // p == \"\" && s == \"\"\n        for(int j = len2 - 1;j >= 0;j--) // s == \"\"\n            matches[len1][j] = (p[j] == \'*\' && matches[len1][j + 1]);\n        \n        for(int i = len1 - 1;i >= 0;i--){ // s.substr[i] match p.substr[j] ?\n            for(int j = len2 - 1;j >= 0;j--){\n                if(p[j] == \'?\')\n                    matches[i][j] = matches[i + 1][j + 1];\n                else if(p[j] == \'*\')\n                    matches[i][j] = matches[i + 1][j] || matches[i][j + 1];\n                else\n                    matches[i][j] = (s[i] == p[j] && matches[i + 1][j + 1]);\n            }\n        }\n        \n        return matches[0][0];\n    }\n};\n```\n', 'https://leetcode.com/problems/wildcard-matching/description/', 'algorithm', '字符串', 1, 1);
INSERT INTO `problems` VALUES (219, '2021-01-17 13:00:09.790', '2021-01-17 13:00:09.790', NULL, '求分数的值', '给定两个整数，分别表示分数的分子 numerator 和分母 denominator，以字符串形式返回小数。\n\n如果小数部分为循环小数，则将循环的部分括在括号内。\n\n示例 1:\n\n```\n输入: numerator = 1, denominator = 2\n输出: \"0.5\"\n```\n\n示例 2:\n\n```\n输入: numerator = 2, denominator = 1\n输出: \"2\"\n```\n\n示例 3:\n\n```\n输入: numerator = 2, denominator = 3\n输出: \"0.(6)\"\n```\n\n', '首先将分子和分母都转化为正数（由于最小负整数转化成正整数会越界，所以使用long long），并且记录结果是否是负数\n\n计算得出整数部分，根据是否存在余数决定有没有小数点\n\n如果有余数，则处理小数部分：\n\n* 使用map判断是否出现循环，map的key为除数，value为对应的小数部位的下标\n    - 如果出现循环，则停止处理\n    - 否则，向map中添加新项，并且向结果字符串尾部添加除得的商\n* 根据最终余数是否为0判断在处理小数部分时，是否出现循环，出现则添加括号\n\n```c++\nclass Solution {\npublic:\n    string fractionToDecimal(int numerator, int denominator) {\n        if(denominator == 0)    return \"\";\n        if(numerator == 0)  return \"0\";\n        \n        bool negative = (numerator < 0) ^ (denominator < 0);\n        long long lnumerator = abs((long long)numerator);\n        long long ldenominator = abs((long long)denominator);\n        unordered_map<int,int> map;//<numerator,index>\n        string res = (negative ? \"-\" : \"\") + to_string(lnumerator / ldenominator) + (lnumerator % ldenominator ? \".\" : \"\");\n        lnumerator = lnumerator % ldenominator; \n        \n        while(lnumerator && map.find(lnumerator) == map.end()){\n            map[lnumerator]=res.size();\n            lnumerator *= 10;\n            res = res + to_string(lnumerator / ldenominator);\n            lnumerator = lnumerator % ldenominator;\n        }\n        \n        if(lnumerator){\n            int idx = map.find(lnumerator)->second;\n            res = res.substr(0,idx) + \"(\" + res.substr(idx) + \")\";\n        }\n        \n        return res;\n    }\n};\n```\n', 'https://leetcode.com/problems/fraction-to-recurring-decimal/description/', 'algorithm', '数学', 1, 1);
INSERT INTO `problems` VALUES (220, '2021-01-17 13:00:09.791', '2021-01-17 13:00:09.791', NULL, '100亿个整数的中位数', '100亿个整数，内存足够，如何找到中位数？内存不足，如何找到中位数？\n\n', '> 内存足够的话可以使用基于partition的方法\n\n内存不足时，可以使用2种方法\n\n#### 1）二分查找\n\n是在整数中查找，那么范围有了。因此可以对这个范围进行二分，找有多少个数小于mid，有多少个数大于mid，然后递归\n\n#### 2）分桶\n\n化大为小。把所有数划分到各个小区间（称作“桶”），把每个数映射到对应的区间里（比如以整数的最高5位作为桶的下标），统计每个区间中数的个数。数一遍各个区间，看中位数落在哪个区间。如果中位数所在的区间能够一次载入内存，那么载入内存查找。否则，继续将这个区间进行划分，直到中位数所在的区间能一次载入内存为止\n', '', 'algorithm', '海量数据', 1, 1);
INSERT INTO `problems` VALUES (221, '2021-01-17 13:00:09.792', '2021-01-17 13:00:09.792', NULL, '旋转链表', '给定一个链表，旋转链表，将链表每个节点向右移动 k 个位置，其中 k 是非负数。\n\n示例 1:\n\n```\n输入: 1->2->3->4->5->NULL, k = 2\n输出: 4->5->1->2->3->NULL\n解释:\n向右旋转 1 步: 5->1->2->3->4->NULL\n向右旋转 2 步: 4->5->1->2->3->NULL\n```\n\n示例 2:\n\n```\n输入: 0->1->2->NULL, k = 4\n输出: 2->0->1->NULL\n解释:\n向右旋转 1 步: 2->0->1->NULL\n向右旋转 2 步: 1->2->0->NULL\n向右旋转 3 步: 0->1->2->NULL\n向右旋转 4 步: 2->0->1->NULL\n```\n\n', '首先计算出链表的长度`len`，然后`k = k % len`计算出右边需要移动到左边的节点数，即链表被分为2部分：\n\n```\n(len - k) -> (k)\n```\n\n为了翻转链表得到：\n\n```\n(k) -> (len - k) \n```\n\n因此问题转换为求链表的倒数第k + 1个节点\n\n```c++\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* rotateRight(ListNode* head, int k) {\n        if(!head || k < 0)  return head;\n        \n        int len = 0;\n        ListNode *p = head;\n        while(p){\n            ++len;\n            p = p->next;\n        }\n        \n        k = k % len;\n        \n        int first = k;\n        ListNode *p1 = head,*p2 = head;\n        while(first-- > 0)  p1 = p1->next;\n        while(p1->next){\n            p1 = p1->next;\n            p2 = p2->next;\n        }\n        \n        p1->next = head;\n        head = p2->next;\n        p2->next = NULL;\n        \n        return head;\n    }\n};\n```\n', 'https://leetcode.com/problems/rotate-list/description/', 'algorithm', '链表', 1, 1);
INSERT INTO `problems` VALUES (222, '2021-01-17 13:00:09.793', '2021-01-17 13:00:09.793', NULL, '计数质数', '统计所有小于非负整数 n 的质数的数量。\n\n示例:\n\n```\n输入: 10\n输出: 4\n解释: 小于 10 的质数一共有 4 个, 它们是 2, 3, 5, 7 。\n```\n\n', '创建一个bool数组state，[0,n)中非质数标位false，最后统计数组中为true的数量，即质数的数量\n\n一个质数只能被1和该数本身整除，那么：\n\n```\n2*2,2*3,2*4,...  //4,6,8,...\n3*3,3*4,3*5,...  //9,12,15,...\n4*4,4*5,4*6,...  //16,20,24,...\n...\n```\n\n都不是质数，因此，只需要设变量`i`为`2~m（i*i<n）`，然后`j`为`i~n（i*j<n）`，设置bool数组中下标为`i*j`的元素为false即可\n\n可以将i和j看成：j个i，j不必从1开始，因为如果j从1开始，可以互换i和j的概念，理解成i个j。比如说i=4，j=2时，可以理解成4个2，那么当i=2，j=4时，已经求过了，所以j从i开始\n\n除此之外，如果state[i]为false，可以直接跳到i+1处理，因为如果state[i]为true，那么之前肯定存在一个数m\\*n=i，然后将i设置为了false。那么i\\*i,i\\*(i+1),i\\*(i+2),...的序列也肯定和之前的一个序列重合，比如当i=2时，设置了i=4为false，那么当i=4就不用处理了，因为4,8,12,...与i=2时的序列的一部分重合\n\n```c++\nclass Solution {\npublic:\n    int countPrimes(int n) {\n        if(n <= 2)  return 0;\n        \n        bool *state = new bool[n];\n        for(int i = 0;i < n;i++)    state[i] = true;\n        state[0] = false;\n        state[1] = false;\n        for(int i = 2;i * i < n;i++)\n            if(state[i])\n                for(int j = i;i * j < n;j++)\n                    state[i * j] = false;\n \n        \n        int count = 0;\n        for(int i = 2;i < n;i++)\n            if(state[i])\n                count++;\n        return count;\n    }\n};\n```\n', 'https://leetcode.com/problems/count-primes/description/', 'algorithm', '数学', 1, 1);
INSERT INTO `problems` VALUES (223, '2021-01-17 13:00:09.793', '2021-01-17 13:00:09.793', NULL, '数据流的中位数', '如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值\n\n', '使用2个堆，每个堆保存一半的元素。最大堆保存较小一半的数，最小堆保存较大一半的数，使用一个变量判断当前读入元素的个数，根据元素个数的奇偶来求中位数\n\n```c++\nclass Solution {\npublic:\n    void Insert(int num)\n    {\n        if(index % 2 == 0){\n            if(min.size() > 0 && num > min[0]){\n                min.push_back(num);\n                push_heap(min.begin(),min.end(),greater<int>());\n                \n                num = min[0];\n                \n                pop_heap(min.begin(),min.end(),greater<int>());\n                min.pop_back();\n            }\n            max.push_back(num);\n            push_heap(max.begin(),max.end(),less<int>());\n        }\n        else{\n            if(max.size() > 0 && num < max[0]){\n                max.push_back(num);\n                push_heap(max.begin(),max.end(),less<int>());\n                \n                num = max[0];\n                pop_heap(max.begin(),max.end(),less<int>());\n                max.pop_back();\n            } \n            min.push_back(num);\n            push_heap(min.begin(),min.end(),greater<int>());\n        }\n        \n        index++;\n    }\n\n    double GetMedian()\n    {\n        double median = 0;\n        if(index % 2 == 1){\n            median = max[0];\n        }\n        else{\n            median = (min[0] + max[0])/(2.0);\n        }\n        return median;\n    }\n\nprivate:\n    vector<int> max;\n    vector<int> min;\n    int index = 0;\n};\n```\n', 'https://www.nowcoder.com/practice/9be0172896bd43948f8a32fb954e1be1?tpId=13&tqId=11216&tPage=4&rp=3&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (224, '2021-01-17 13:00:09.794', '2021-01-17 13:00:09.794', NULL, '旋转数组中查找数字II', '假设按照升序排序的数组在预先未知的某个点上进行了旋转。\n\n( 例如，数组 `[0,0,1,2,2,5,6]` 可能变为 `[2,5,6,0,0,1,2]` )。\n\n编写一个函数来判断给定的目标值是否存在于数组中。若存在返回 `true`，否则返回 `false`。\n\n示例 1:\n\n```\n输入: nums = [2,5,6,0,0,1,2], target = 0\n输出: true\n```\n\n示例 2:\n\n```\n输入: nums = [2,5,6,0,0,1,2], target = 3\n输出: false\n```\n\n进阶:\n\n* 这是 [旋转数组中查找数字](#旋转数组中查找数字) 的延伸题目，**本题中的 nums  可能包含重复元素**\n* 这会影响到程序的时间复杂度吗？会有怎样的影响，为什么？\n\n', '相比于前一题，这一题可能包含重复\n\n总的思路还是不变，不过要处理一种特殊情况，即`nums[l] == nums[r] && nums[l] == nums[mid]`时，此时无法确定`mid`在左半部分还是右半部分。因此，当出现这种情况时，在区间`[l,r]`中，执行顺序查找\n\n```c++\nclass Solution {\npublic:\n    bool search(vector<int>& nums, int target) {\n        int l = 0,r = nums.size() - 1;\n        while(l <= r){\n            int mid = (l + r) / 2;\n            if(nums[mid] == target) return true;\n            if(nums[l] < nums[r]){\n                if(nums[mid] < target)   l = mid + 1;\n                else                     r = mid - 1;\n            }\n            else{\n                if(nums[l] == nums[r] && nums[l] == nums[mid]){//无法知道mid在左边还是右边\n                    for(int i = l;i <= r;i++)\n                        if(nums[i] == target)\n                            return true;\n                    return false;\n                }\n                else{ //能确定mid的位置\n                    if(nums[mid] >= nums[l]){//mid在左边\n                        if(target > nums[r] && target < nums[mid])  r = mid - 1;\n                        else    l = mid + 1;\n                    }\n                    else{//mid在右边\n                        if(target > nums[mid] && target < nums[l])  l = mid + 1;\n                        else    r = mid - 1;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n};\n```\n', 'https://leetcode.com/problems/search-in-rotated-sorted-array-ii/description/', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (225, '2021-01-17 13:00:09.795', '2021-01-17 13:00:09.795', NULL, '实现strlen', '', '#### 迭代\n\n```c\n#include <cassert>\n\n//字符串长度计算\nint strlen(const char *str)\n{\n    assert(str);\n\n    int len = 0;\n    while(*str++)   len++;\n    return  len;\n}\n```\n\n#### 递归\n\n> 如果要求不使用额外变量就需要用递归版\n\n```c\n#include <cassert>\n\n//字符串长度计算\nint strlen(const char *str)\n{\n    assert(str);\n\n    return (*str == 0) ? 0 : 1 + strlen(str + 1);  \n}\n```\n', '', 'algorithm', 'c/c++基础', 1, 1);
INSERT INTO `problems` VALUES (226, '2021-01-17 13:00:09.796', '2021-01-17 13:00:09.796', NULL, '树的子结构', '输入两棵二叉树A，B，判断B是不是A的子结构。（ps：我们约定空树不是任意一个树的子结构）\n\n', '```c++\n/*\nstruct TreeNode {\n    int val;\n    struct TreeNode *left;\n    struct TreeNode *right;\n    TreeNode(int x) :\n            val(x), left(NULL), right(NULL) {\n    }\n};*/\nclass Solution {\npublic:\n    bool HasSubtree(TreeNode* pRoot1, TreeNode* pRoot2)\n    {\n        if(!pRoot1 || !pRoot2)\n            return false;\n        \n        bool res = false;\n        if(pRoot1->val == pRoot2->val)    res = SameTree(pRoot1->left,pRoot2->left) && SameTree(pRoot1->right,pRoot2->right);\n        if(res)    return true;\n        \n        res = HasSubtree(pRoot1->left,pRoot2) || HasSubtree(pRoot1->right,pRoot2);\n        return res;\n    }\n    \n    bool SameTree(TreeNode* pRoot1,TreeNode* pRoot2)\n    {\n        if(!pRoot2)    return true;\n        if(!pRoot1)    return false;\n        \n        if(pRoot1->val == pRoot2->val)    return SameTree(pRoot1->left,pRoot2->left) && SameTree(pRoot1->right,pRoot2->right);\n        return false;\n    }\n};\n```\n', 'https://www.nowcoder.com/practice/6e196c44c7004d15b1610b9afca8bd88?tpId=13&tqId=11170&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking', 'algorithm', '树', 1, 1);
INSERT INTO `problems` VALUES (227, '2021-01-17 13:00:09.797', '2021-01-17 13:00:09.797', NULL, '用两个栈实现队列', '用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型\n\n', '* **入队**：插入stack1\n* **出队**：如果stack2为空，从stack1弹出并压入stack2，最后弹出stack2栈顶。如果stack2不为空，直接弹出​stack2栈顶\n\n```c++\nclass Solution\n{\npublic:\n    void push(int node) {\n        stack1.push(node);\n    }\n\n    int pop() {\n        if(stack2.empty()){\n            while(!stack1.empty()){\n                stack2.push(stack1.top());\n                stack1.pop();\n            }\n        }\n        if(stack2.empty())\n            throw new exception();\n        int front;\n        front = stack2.top();\n        stack2.pop();\n        return front;\n    }\n\nprivate:\n    stack<int> stack1;\n    stack<int> stack2;\n};\n```\n', 'https://www.nowcoder.com/practice/54275ddae22f475981afa2244dd448c6?tpId=13&tqId=11158&tPage=1&rp=4&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking', 'algorithm', '栈和队列', 1, 1);
INSERT INTO `problems` VALUES (228, '2021-01-17 13:00:09.797', '2021-01-17 13:00:09.797', NULL, '实现计算结构体成员偏移量的宏', '', '```c\n#define offsetof(type,mem)  unsigned long(&(((type *)0)->mem))\n```\n', '', 'algorithm', 'c/c++基础', 1, 1);
INSERT INTO `problems` VALUES (229, '2021-01-17 13:00:09.798', '2021-01-17 13:00:09.798', NULL, '链表中倒数第k个节点', '输入一个链表，输出该链表中倒数第k个结点\n\n', '使用2个指针，指向链表头节点。第一个指针先走k（或k-1）步，然后两个指针一起走，当前面走的指针到为NULL时（或前面走的指针指向节点的下一节点为NULL时），后面走的指针指向的节点就是倒数第k个节点\n\n注意k比链表节点总数大以及k为0的情况\n\n```c++\n/*\nstruct ListNode {\n    int val;\n    struct ListNode *next;\n    ListNode(int x) :\n            val(x), next(NULL) {\n    }\n};*/\nclass Solution {\npublic:\n    ListNode* FindKthToTail(ListNode* pListHead, unsigned int k) {\n        if(k == 0 || !pListHead)//unsigned int肯定大于等于0\n            return nullptr;\n        \n        int first = k - 1;\n        ListNode *p1 = pListHead,*p2 = pListHead;\n        while(p1->next && first){\n            p1 = p1 -> next;\n            first--;\n        }\n        \n        if(first > 0)\n            return nullptr;\n        \n        while(p1->next){\n            p1 = p1->next;\n            p2 = p2->next;\n        }\n        \n        return p2;\n    }\n};\n```\n', 'https://www.nowcoder.com/practice/529d3ae5a407492994ad2a246518148a?tpId=13&tqId=11167&tPage=1&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking', 'algorithm', '链表', 1, 1);
INSERT INTO `problems` VALUES (230, '2021-01-17 13:00:09.799', '2021-01-17 13:00:09.799', NULL, '字母异位词分组', '给定一个字符串数组，将字母异位词组合在一起。字母异位词指字母相同，但排列不同的字符串。\n\n示例:\n\n```\n输入: [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"],\n输出:\n[\n  [\"ate\",\"eat\",\"tea\"],\n  [\"nat\",\"tan\"],\n  [\"bat\"]\n]\n```\n\n说明：\n\n* 所有输入均为小写字母。\n* 不考虑答案输出的顺序。\n\n', '#### 1）排序后映射\n\n可以比较每个字符串排序后的字符串，字符异位的字符串排序后肯定是同一个字符串\n\n因此，使用一个map存储“排序后字符串”和“异位字符串集合”的映射，key的类型是string，表示排序后的字符串，value是vector\\<string\\>，表示每个一组异位词\n\n对于每个字符串，排序后进行查找，如果找到则插入，否则向map中插入一个新的映射\n\n假设参数字符串数组包含N个字符串，最长的字符串包含K个字符\n\n* **时间复杂度**：O(N\\*K\\*log(K))\n* **空间复杂度**：O(N\\*K)\n\n```c++\nclass Solution {\npublic:\n    vector<vector<string>> groupAnagrams(vector<string>& strs) {\n        vector<vector<string>> res;\n        map<string,vector<string>> mp;\n        \n        for(int i = 0;i < strs.size();i++){\n            string tp = strs[i];\n            sort(tp.begin(),tp.end());\n            \n            if(mp.find(tp) == mp.end()){\n                vector<string> v;\n                v.push_back(strs[i]);\n                mp.insert(pair<string,vector<string>>(tp,v));\n            }\n            else{\n                mp.find(tp)->second.push_back(strs[i]);\n            }\n        }\n        \n        for(auto e : mp){\n            res.push_back(e.second);\n        }\n        \n        return res;\n    }\n};\n```\n\n#### 2）设计hash\n\n同样使用一个map，但是不对字符串进行排序，因此可以提高效率，关键是如何设计key，可以使两个字符颠倒的字符串得到相同的key？\n\n由于所有字符颠倒的字符串肯定包含相同的字符，并且每个字符的计数也相同，因此可以对26个小写字母与（题目规定了字符串的字符为小写）进行计数，对于字符串\"aabc\"，包含2个\'a\'，1个\'b\'和1个\'c\'。因此key可以设计成\"#2#1#1#0#0...#0\"，这样对于字符串”abac“也会得到相同的key\n\n假设参数字符串数组包含N个字符串，最长的字符串包含K个字符\n\n* **时间复杂度**：O(N\\*K)\n* **空间复杂度**：O(N\\*K)\n\n[参考](https://leetcode.com/problems/group-anagrams/solution/)\n', 'https://leetcode.com/problems/group-anagrams/description/', 'algorithm', '字符串', 1, 1);
INSERT INTO `problems` VALUES (231, '2021-01-17 13:00:09.799', '2021-01-17 13:00:09.799', NULL, '跳步游戏II', '给定一个非负整数数组，你最初位于数组的第一个位置。\n\n数组中的每个元素代表你在该位置可以跳跃的最大长度。\n\n你的目标是使用最少的跳跃次数到达数组的最后一个位置。\n\n示例:\n\n```\n输入: [2,3,1,1,4]\n输出: 2\n解释: 跳到最后一个位置的最小跳跃数是 2。\n     从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。\n```\n\n说明:\n\n假设你总是可以到达数组的最后一个位置。\n\n', '#### 1）动态规划\n\n假设现在位于位置`i`，并且可以跳跃最多`nums[i]`步，那么可以选择跳`1,2,3,...,nums[i]`步，设`dp[i]`表示从位置`i`到达终点的最少步数，那么`dp[i] = min{dp[i + 1] + 1,dp[i + 2] + 1,dp[i + 3] + 1,...,dp[i + nums[i]] + 1}`，我们最终就是要求得`dp[0]`，因为`dp[0]`取决于`dp[1],dp[2],...,`所以从后往前求，并且维护`dp`数组，防止求重复子问题\n\n```c++\nclass Solution {\npublic:\n    int jump(vector<int>& nums) {\n        int sz = nums.size();\n        \n        vector<int> dp(sz,INT_MAX);\n        dp[sz - 1] = 0;\n        \n        for(int i = sz - 2;i >= 0;i--){\n            if(nums[i] >= sz - 1 - i)   dp[i] = 1;\n            else{\n                for(int j = 1;j <= nums[i];j++)\n                    if(dp[i + j] != INT_MAX)//如果dp[i + j]等于INT_MAX，表明跳j步无法到达终点\n                        dp[i] = min(dp[i],dp[i + j] + 1);\n            }\n        }\n        \n        return dp[0];\n    }\n};\n```\n\n* 时间复杂度：O(n^2)（最后一个例子会超时）\n\n#### 2）BFS\n\n从起点开始，如果从该位置跳跃最大步数无法到达终点，那么将该位置能到达的点加入到队列，所有从起点能到达的点为一层，然后判断下一层的所有点是否能到达终点，如果不能，那么将下一层所有点能够到达的点加入到队列，从而产生新的一层。最终直到某一层存在能够到达终点的点\n\n* 为了防止重复添加，使用一个标记数组`flags`，如果某个节点已经加入到队列，那么`flags`中这个节点标记为`1`，因此，最多只会向队列添加`n`个节点\n* 还有一点需要注意。对于每个点，应该从该点所能跳跃的最大步开始尝试。对于点`i`，设该位置能跳跃的最大步为`nums[i]`，那么应该先尝试跳跃`nums[i]`步，如果不能到达终点，那么判断点`i + nums[i]`是否已经加入到队列中，如果没有则加入，**如果已经加入，那么停止尝试跳`nums[i] - 1,nums[i] - 2,...,1`步，因为如果从`i`跳`nums[i]`步不能到达终点，那么跳更小的步数肯定也不能到达。同时，如果`i + nums[i]`已经添加到了队列中，那么`i + nums[i] - 1,i + nums[i] - 2,...,i + 1`肯定也已经添加到了队列中**\n\n* 时间复杂度：O(n)\n\n```c++\nclass Solution {\npublic:\n    int jump(vector<int>& nums) {\n        if(nums.size() == 1)    return 0;\n        \n        int target = nums.size() - 1,res = 0;\n        deque<int> d;\n        d.push_back(0);\n        vector<int> flags(nums.size(),0);   //防止重复添加节点\n        flags[0] = 1;\n        \n        while(!d.empty()){\n            int level = d.size();   //这一层的节点数\n            while(level--){\n                int src = d.front();\n                d.pop_front();\n                for(int i = nums[src];i >= 1;i--){\n                    if(src + i >= target)        \n                        return ++res;\n                    else if(flags[src + i] == 1)\n                        break;\n                    else {\n                        d.push_back(src + i);\n                        flags[src + i] = 1;\n                    }\n                }\n            }\n            res++;\n        }\n        \n        return -1;//无法到达\n    }\n};\n```\n', 'https://leetcode.com/problems/jump-game-ii/description/', 'algorithm', '图', 1, 1);
INSERT INTO `problems` VALUES (232, '2021-01-17 13:00:09.800', '2021-01-17 13:00:09.800', NULL, '数组中只出现1次的2个数', '一个整型数组里除了两个数字之外，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字\n\n', '可以先考虑如果只有1个数字出现1次，其余都2次，怎么找：\n\n*  对所有数字异或，由于异或满足结合律交换律，结果就是所要查找的数字\n\n对于存在2个出现1次的数字:\n\n* 所有数字异或结果为这两个数字的异或值，如果能将数组分为2部分，每个数字属于其中一部分，则能求出这两个数字。可以找到这两个数字异或结果中第一个为1的位，根据该位将数组分成2个数组\n\n```c++\nclass Solution {\npublic:\n    void FindNumsAppearOnce(vector<int> data,int* num1,int *num2) {\n        int num1xornum2 = 0;\n        int sz = data.size();\n        \n        for(int i = 0;i < sz;i++)\n            num1xornum2 ^= data[i];\n        \n        int idx = 0;\n        while(((num1xornum2 & 1) == 0) && (idx < 32)){\n            idx++;\n            num1xornum2 = num1xornum2 >> 1;\n        }\n        \n        *num1 = 0,*num2 = 0;\n        for(int i = 0;i < sz;i++){\n            if(isBit(data[i],idx))\n                *num1 ^= data[i];\n            else\n                *num2 ^= data[i];\n        } \n    }\n    \n    bool isBit(int num,int idx){\n        while(idx){\n            num = num >> 1;\n            idx--;\n        }\n        return (num & 1);\n    }\n};\n```\n', 'https://www.nowcoder.com/practice/e02fdb54d7524710a7d664d082bb7811?tpId=13&tqId=11193&tPage=2&rp=2&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking', 'algorithm', '数组', 1, 1);
INSERT INTO `problems` VALUES (233, '2021-01-17 13:00:09.801', '2021-01-17 13:00:09.801', NULL, '两个文件共同的url', '给定a、b两个文件，各存放50亿个url，每个url各占64字节，内存限制是4GB。找出a、b文件共同的url\n\n', '可以估计每个文件的大小为5Gx64B=320GB，远远大于内存限制的4GB。所以不可能将其完全加载到内存中处理。考虑分治法\n\n1. 遍历文件a，对每个url求取hash(url)%1024，然后根据所取得的值将url分别存储到1024个小文件中，这样每个小文件大约为300MB\n\n> * **为什么要做hash**？每个文件中可能包含相同的url，同一文件中相同的url可能分布在同一文件的不同位置。不同文件中相同的url可能也分布在不同位置。hash可以保证相同url映射到同一个小文件中\n> * **为什么是1024个小文件**？这里1024应该不是唯一值，分成1024个小文件，每个只有300多M，在后面查找过程中，将小文件中的url存储set时不会超过4G的限制\n\n2. 遍历文件b，采取和a相同的方式，将url分别存储到1024个小文件中。这样处理后，所有可能相同的url都在对应的小文件[(a0,b0),(a1,b1),...,(a1023,b1023)]中，不对应的小文件不可能有相同的url（**也就是hash的目的**）\n\n3. 求出1024对小文件中相同的url：把其中一个小文件的url存储到hash_set中。然后遍历另一个小文件的每个url，看其是否在刚才构建的hash_set中，如果是，那么就是共同的url\n', '', 'algorithm', '海量数据', 1, 1);
INSERT INTO `problems` VALUES (234, '2021-01-17 13:00:09.801', '2021-01-17 13:00:09.801', NULL, '实现strcpy', '', '```c\n#include <cassert>\n\n//字符串拷贝\nchar* strcpy(char *strDest,const char *strSrc)\n{\n    assert(strDest && strSrc);\n\n    char *p = strDest;\n    while(*p++ = *strSrc++);\n    return strDest;\n}\n```\n', '', 'algorithm', 'c/c++基础', 1, 1);
INSERT INTO `problems` VALUES (235, '2021-01-17 13:00:09.802', '2021-01-17 13:00:09.802', NULL, 'Dijkstra算法', '* 时间限制:10000ms\n* 单点时限:1000ms\n* 内存限制:256MB\n\n**描述**\n\n万圣节的早上，小Hi和小Ho在经历了一个小时的争论后，终于决定了如何度过这样有意义的一天——他们决定去闯鬼屋！\n\n在鬼屋门口排上了若干小时的队伍之后，刚刚进入鬼屋的小Hi和小Ho都颇饥饿，于是他们决定利用进门前领到的地图，找到一条通往终点的最短路径。\n\n鬼屋中一共有N个地点，分别编号为1..N，这N个地点之间互相有一些道路连通，两个地点之间可能有多条道路连通，但是并不存在一条两端都是同一个地点的道路。那么小Hi和小Ho至少要走多少路程才能够走出鬼屋去吃东西呢？\n\n**输入**\n\n每个测试点（输入文件）有且仅有一组测试数据。\n\n在一组测试数据中：\n\n第1行为4个整数N、M、S、T，分别表示鬼屋中地点的个数和道路的条数，入口（也是一个地点）的编号，出口（同样也是一个地点）的编号。\n\n接下来的M行，每行描述一条道路：其中的第i行为三个整数u_i, v_i, length_i，表明在编号为u_i的地点和编号为v_i的地点之间有一条长度为length_i的道路。\n\n对于100%的数据，满足N<=10^3，M<=10^4, 1 <= length_i <= 10^3, 1 <= S, T <= N, 且S不等于T。\n\n对于100%的数据，满足小Hi和小Ho总是有办法从入口通过地图上标注出来的道路到达出口。\n\n**输出**\n\n对于每组测试数据，输出一个整数Ans，表示那么小Hi和小Ho为了走出鬼屋至少要走的路程\n\n**样例输入**\n\n```\n5 23 5 4\n1 2 708\n2 3 112\n3 4 721\n4 5 339\n5 4 960\n1 5 849\n2 5 98\n1 4 99\n2 4 25\n2 1 200\n3 1 146\n3 2 106\n1 4 860\n4 1 795\n5 4 479\n5 4 280\n3 4 341\n1 4 622\n4 2 362\n2 3 415\n4 1 904\n2 1 716\n2 5 575\n```\n\n**样例输出**\n\n```\n123\n```\n\n', '```c++\n#include <iostream>\n#include <vector>\n#include <set>\n#include <climits>\n\nusing namespace std;\n\n#define rep(i,b,e) for(int i = b ; i < e ; i++)\n\n//根据输入的数据范围可知，图中最长路径不会超过INT_MAX，因此可以用于表示节点之间不可达\nconst int UNREACHABLE = INT_MAX; \n\nvector<int> dijkstra(const vector<vector<int> > &graph,int b){\n    if(graph.empty() || graph.size() != graph[0].size() || b < 0 || b >= graph.size())\n        return vector<int>();\n\n    vector<int> state = graph[b];   //所有顶点到达顶点b的初始距离\n    int vertexes = graph.size();    //顶点总数\n    set<int> rest_vertexes;         //未处理的顶点集合\n    rep(i,0,vertexes)\n        if(i != b)\n            rest_vertexes.insert(i);\n\n    int min_vertex;                 //每次找出距起点b最近的一个顶点处理\n    while(!rest_vertexes.empty()){\n        min_vertex = *(rest_vertexes.begin());//初始化为第一个未处理的顶点\n        for(int vertex : rest_vertexes)\n            if(state[vertex] != UNREACHABLE && state[vertex] < state[min_vertex])\n                min_vertex = vertex;\n\n        rest_vertexes.erase(min_vertex);\n\n        //看剩余节点通过min_vertex到达b的距离是否更短\n        for(int vertex : rest_vertexes)\n            //这个顶点要能到达min_vertex，并且min_vertex能到达b，这个顶点才可能到达b\n            if(graph[vertex][min_vertex] != UNREACHABLE && state[min_vertex] != UNREACHABLE){\n                if(state[vertex] == UNREACHABLE)\n                    state[vertex] = graph[vertex][min_vertex] + state[min_vertex];\n                else if (state[vertex] > graph[vertex][min_vertex] + state[min_vertex])\n                    state[vertex] = graph[vertex][min_vertex] + state[min_vertex];\n            }\n    }\n\n    return state;\n}\n\nint main(){\n\n    vector<vector<int> > graph;\n\n    //N：地点数\n    //M：道路数\n    //S：起点\n    //T：终点\n    //u：每条道路的第一个顶点\n    //v：每条道路的第二个顶点\n    //length：道路的长度\n    int N,M,S,T,u,v,length;\n    cin >> N >> M >> S >> T;\n\n    rep(i,0,N){\n        vector<int> tp;\n        rep(j,0,N){\n            if(i == j)  tp.push_back(0);    //顶点到自身的距离为0\n            else    tp.push_back(UNREACHABLE);\n        }\n        graph.push_back(tp);\n    }\n\n    rep(i, 0, M) {\n        cin >> u >> v >> length;\n        if(graph[u - 1][v - 1] > length)\n            graph[u - 1][v - 1] = length;\n        if(graph[v - 1][u - 1] > length)\n            graph[v - 1][u - 1] = length;\n    }\n\n    vector<int> state = dijkstra(graph,S - 1);\n    cout << state[T - 1] << endl;\n\n    return 0;\n}\n```\n', 'http://hihocoder.com/problemset/problem/1081', 'algorithm', '图', 1, 1);
COMMIT;

-- ----------------------------
-- Table structure for user_problems
-- ----------------------------
DROP TABLE IF EXISTS `user_problems`;
CREATE TABLE `user_problems` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT,
  `created_at` datetime(3) DEFAULT NULL,
  `updated_at` datetime(3) DEFAULT NULL,
  `deleted_at` datetime(3) DEFAULT NULL,
  `user_id` bigint NOT NULL,
  `problem_id` bigint NOT NULL,
  `problem_type` varchar(256) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  `picked` tinyint(1) DEFAULT NULL,
  `pick_time` datetime(3) DEFAULT NULL,
  `finished` tinyint(1) DEFAULT NULL,
  `times` bigint DEFAULT NULL,
  PRIMARY KEY (`id`,`user_id`,`problem_id`) USING BTREE,
  KEY `idx_user_problems_deleted_at` (`deleted_at`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=236 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Records of user_problems
-- ----------------------------
BEGIN;
INSERT INTO `user_problems` VALUES (1, '2021-02-19 17:02:12.916', '2021-02-19 17:02:12.916', NULL, 1, 1, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (2, '2021-02-19 17:02:12.922', '2021-02-19 17:02:12.922', NULL, 1, 2, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (3, '2021-02-19 17:02:12.933', '2021-02-19 17:02:12.933', NULL, 1, 3, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (4, '2021-02-19 17:02:12.938', '2021-02-19 17:02:12.938', NULL, 1, 4, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (5, '2021-02-19 17:02:12.943', '2021-02-19 17:02:14.165', NULL, 1, 5, 'algorithm', 1, '2021-02-19 17:02:14.165', 0, 0);
INSERT INTO `user_problems` VALUES (6, '2021-02-19 17:02:12.948', '2021-02-19 17:02:12.948', NULL, 1, 6, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (7, '2021-02-19 17:02:12.953', '2021-02-19 17:02:12.953', NULL, 1, 7, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (8, '2021-02-19 17:02:12.958', '2021-02-19 17:02:12.958', NULL, 1, 8, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (9, '2021-02-19 17:02:12.964', '2021-02-19 17:02:12.964', NULL, 1, 9, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (10, '2021-02-19 17:02:12.969', '2021-02-19 17:02:12.969', NULL, 1, 10, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (11, '2021-02-19 17:02:12.975', '2021-02-19 17:02:12.975', NULL, 1, 11, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (12, '2021-02-19 17:02:12.979', '2021-02-19 17:02:12.979', NULL, 1, 12, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (13, '2021-02-19 17:02:12.983', '2021-02-19 17:02:12.983', NULL, 1, 13, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (14, '2021-02-19 17:02:12.989', '2021-02-19 17:02:12.989', NULL, 1, 14, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (15, '2021-02-19 17:02:12.994', '2021-02-19 17:02:12.994', NULL, 1, 15, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (16, '2021-02-19 17:02:12.998', '2021-02-19 17:02:12.998', NULL, 1, 16, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (17, '2021-02-19 17:02:13.007', '2021-02-19 17:02:13.007', NULL, 1, 17, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (18, '2021-02-19 17:02:13.018', '2021-02-19 17:02:13.018', NULL, 1, 18, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (19, '2021-02-19 17:02:13.023', '2021-02-19 17:02:13.023', NULL, 1, 19, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (20, '2021-02-19 17:02:13.028', '2021-02-19 17:02:13.028', NULL, 1, 20, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (21, '2021-02-19 17:02:13.035', '2021-02-19 17:02:13.035', NULL, 1, 21, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (22, '2021-02-19 17:02:13.040', '2021-02-19 17:02:13.040', NULL, 1, 22, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (23, '2021-02-19 17:02:13.046', '2021-02-19 17:02:13.046', NULL, 1, 23, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (24, '2021-02-19 17:02:13.051', '2021-02-19 17:02:13.051', NULL, 1, 24, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (25, '2021-02-19 17:02:13.055', '2021-02-19 17:02:13.055', NULL, 1, 25, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (26, '2021-02-19 17:02:13.061', '2021-02-19 17:02:13.061', NULL, 1, 26, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (27, '2021-02-19 17:02:13.066', '2021-02-19 17:02:13.066', NULL, 1, 27, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (28, '2021-02-19 17:02:13.071', '2021-02-19 17:02:13.071', NULL, 1, 28, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (29, '2021-02-19 17:02:13.076', '2021-02-19 17:02:13.076', NULL, 1, 29, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (30, '2021-02-19 17:02:13.082', '2021-02-19 17:02:13.082', NULL, 1, 30, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (31, '2021-02-19 17:02:13.087', '2021-02-19 17:02:13.087', NULL, 1, 31, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (32, '2021-02-19 17:02:13.094', '2021-02-19 17:02:13.094', NULL, 1, 32, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (33, '2021-02-19 17:02:13.099', '2021-02-19 17:02:13.099', NULL, 1, 33, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (34, '2021-02-19 17:02:13.103', '2021-02-19 17:02:13.103', NULL, 1, 34, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (35, '2021-02-19 17:02:13.108', '2021-02-19 17:02:13.108', NULL, 1, 35, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (36, '2021-02-19 17:02:13.113', '2021-02-19 17:02:13.113', NULL, 1, 36, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (37, '2021-02-19 17:02:13.117', '2021-02-19 17:02:13.117', NULL, 1, 37, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (38, '2021-02-19 17:02:13.122', '2021-02-19 17:02:13.122', NULL, 1, 38, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (39, '2021-02-19 17:02:13.127', '2021-02-19 17:02:13.127', NULL, 1, 39, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (40, '2021-02-19 17:02:13.132', '2021-02-19 17:02:13.132', NULL, 1, 40, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (41, '2021-02-19 17:02:13.136', '2021-02-19 17:02:13.136', NULL, 1, 41, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (42, '2021-02-19 17:02:13.141', '2021-02-19 17:02:13.141', NULL, 1, 42, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (43, '2021-02-19 17:02:13.145', '2021-02-19 17:02:13.145', NULL, 1, 43, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (44, '2021-02-19 17:02:13.150', '2021-02-19 17:02:13.150', NULL, 1, 44, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (45, '2021-02-19 17:02:13.155', '2021-02-19 17:02:13.155', NULL, 1, 45, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (46, '2021-02-19 17:02:13.160', '2021-02-19 17:02:13.160', NULL, 1, 46, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (47, '2021-02-19 17:02:13.165', '2021-02-19 17:02:13.165', NULL, 1, 47, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (48, '2021-02-19 17:02:13.170', '2021-02-19 17:02:14.159', NULL, 1, 48, 'algorithm', 1, '2021-02-19 17:02:14.159', 0, 0);
INSERT INTO `user_problems` VALUES (49, '2021-02-19 17:02:13.174', '2021-02-19 17:02:13.174', NULL, 1, 49, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (50, '2021-02-19 17:02:13.178', '2021-02-19 17:02:13.178', NULL, 1, 50, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (51, '2021-02-19 17:02:13.182', '2021-02-19 17:02:13.182', NULL, 1, 51, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (52, '2021-02-19 17:02:13.187', '2021-02-19 17:02:13.187', NULL, 1, 52, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (53, '2021-02-19 17:02:13.191', '2021-02-19 17:02:13.191', NULL, 1, 53, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (54, '2021-02-19 17:02:13.196', '2021-02-19 17:02:13.196', NULL, 1, 54, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (55, '2021-02-19 17:02:13.201', '2021-02-19 17:02:13.201', NULL, 1, 55, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (56, '2021-02-19 17:02:13.206', '2021-02-19 17:02:13.206', NULL, 1, 56, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (57, '2021-02-19 17:02:13.211', '2021-02-19 17:02:13.211', NULL, 1, 57, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (58, '2021-02-19 17:02:13.216', '2021-02-19 17:02:13.216', NULL, 1, 58, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (59, '2021-02-19 17:02:13.221', '2021-02-19 17:02:13.221', NULL, 1, 59, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (60, '2021-02-19 17:02:13.225', '2021-02-19 17:02:13.225', NULL, 1, 60, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (61, '2021-02-19 17:02:13.230', '2021-02-19 17:02:13.230', NULL, 1, 61, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (62, '2021-02-19 17:02:13.236', '2021-02-19 17:02:13.236', NULL, 1, 62, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (63, '2021-02-19 17:02:13.242', '2021-02-19 17:02:13.242', NULL, 1, 63, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (64, '2021-02-19 17:02:13.247', '2021-02-19 17:02:13.247', NULL, 1, 64, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (65, '2021-02-19 17:02:13.254', '2021-02-19 17:02:13.254', NULL, 1, 65, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (66, '2021-02-19 17:02:13.259', '2021-02-19 17:02:13.259', NULL, 1, 66, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (67, '2021-02-19 17:02:13.265', '2021-02-19 17:02:13.265', NULL, 1, 67, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (68, '2021-02-19 17:02:13.271', '2021-02-19 17:02:13.271', NULL, 1, 68, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (69, '2021-02-19 17:02:13.280', '2021-02-19 17:02:13.280', NULL, 1, 69, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (70, '2021-02-19 17:02:13.285', '2021-02-19 17:02:13.285', NULL, 1, 70, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (71, '2021-02-19 17:02:13.290', '2021-02-19 17:02:13.290', NULL, 1, 71, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (72, '2021-02-19 17:02:13.297', '2021-02-19 17:02:13.297', NULL, 1, 72, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (73, '2021-02-19 17:02:13.302', '2021-02-19 17:02:13.302', NULL, 1, 73, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (74, '2021-02-19 17:02:13.308', '2021-02-19 17:02:13.308', NULL, 1, 74, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (75, '2021-02-19 17:02:13.313', '2021-02-19 17:02:13.313', NULL, 1, 75, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (76, '2021-02-19 17:02:13.320', '2021-02-19 17:02:13.320', NULL, 1, 76, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (77, '2021-02-19 17:02:13.325', '2021-02-19 17:02:13.325', NULL, 1, 77, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (78, '2021-02-19 17:02:13.331', '2021-02-19 17:02:13.331', NULL, 1, 78, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (79, '2021-02-19 17:02:13.340', '2021-02-19 17:02:13.340', NULL, 1, 79, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (80, '2021-02-19 17:02:13.345', '2021-02-19 17:02:13.345', NULL, 1, 80, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (81, '2021-02-19 17:02:13.349', '2021-02-19 17:02:13.349', NULL, 1, 81, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (82, '2021-02-19 17:02:13.354', '2021-02-19 17:02:13.354', NULL, 1, 82, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (83, '2021-02-19 17:02:13.359', '2021-02-19 17:02:13.359', NULL, 1, 83, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (84, '2021-02-19 17:02:13.363', '2021-02-19 17:02:13.363', NULL, 1, 84, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (85, '2021-02-19 17:02:13.369', '2021-02-19 17:02:13.369', NULL, 1, 85, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (86, '2021-02-19 17:02:13.373', '2021-02-19 17:02:13.373', NULL, 1, 86, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (87, '2021-02-19 17:02:13.378', '2021-02-19 17:02:13.378', NULL, 1, 87, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (88, '2021-02-19 17:02:13.383', '2021-02-19 17:02:13.383', NULL, 1, 88, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (89, '2021-02-19 17:02:13.387', '2021-02-19 17:02:13.387', NULL, 1, 89, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (90, '2021-02-19 17:02:13.392', '2021-02-19 17:02:13.392', NULL, 1, 90, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (91, '2021-02-19 17:02:13.399', '2021-02-19 17:02:13.399', NULL, 1, 91, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (92, '2021-02-19 17:02:13.408', '2021-02-19 17:02:13.408', NULL, 1, 92, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (93, '2021-02-19 17:02:13.413', '2021-02-19 17:02:13.413', NULL, 1, 93, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (94, '2021-02-19 17:02:13.419', '2021-02-19 17:02:13.419', NULL, 1, 94, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (95, '2021-02-19 17:02:13.429', '2021-02-19 17:02:13.429', NULL, 1, 95, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (96, '2021-02-19 17:02:13.434', '2021-02-19 17:02:13.434', NULL, 1, 96, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (97, '2021-02-19 17:02:13.438', '2021-02-19 17:02:13.438', NULL, 1, 97, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (98, '2021-02-19 17:02:13.443', '2021-02-19 17:02:13.443', NULL, 1, 98, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (99, '2021-02-19 17:02:13.448', '2021-02-19 17:02:13.448', NULL, 1, 99, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (100, '2021-02-19 17:02:13.452', '2021-02-19 17:02:13.452', NULL, 1, 100, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (101, '2021-02-19 17:02:13.457', '2021-02-19 17:02:13.457', NULL, 1, 101, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (102, '2021-02-19 17:02:13.464', '2021-02-19 17:02:13.464', NULL, 1, 102, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (103, '2021-02-19 17:02:13.468', '2021-02-19 17:02:13.468', NULL, 1, 103, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (104, '2021-02-19 17:02:13.473', '2021-02-19 17:02:13.473', NULL, 1, 104, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (105, '2021-02-19 17:02:13.478', '2021-02-19 17:02:13.478', NULL, 1, 105, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (106, '2021-02-19 17:02:13.482', '2021-02-19 17:02:13.482', NULL, 1, 106, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (107, '2021-02-19 17:02:13.488', '2021-02-19 17:02:13.488', NULL, 1, 107, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (108, '2021-02-19 17:02:13.497', '2021-02-19 17:02:13.497', NULL, 1, 108, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (109, '2021-02-19 17:02:13.502', '2021-02-19 17:02:13.502', NULL, 1, 109, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (110, '2021-02-19 17:02:13.511', '2021-02-19 17:02:13.511', NULL, 1, 110, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (111, '2021-02-19 17:02:13.515', '2021-02-19 17:02:13.515', NULL, 1, 111, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (112, '2021-02-19 17:02:13.521', '2021-02-19 17:02:13.521', NULL, 1, 112, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (113, '2021-02-19 17:02:13.529', '2021-02-19 17:02:13.529', NULL, 1, 113, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (114, '2021-02-19 17:02:13.533', '2021-02-19 17:02:13.533', NULL, 1, 114, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (115, '2021-02-19 17:02:13.539', '2021-02-19 17:02:13.539', NULL, 1, 115, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (116, '2021-02-19 17:02:13.543', '2021-02-19 17:02:13.543', NULL, 1, 116, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (117, '2021-02-19 17:02:13.549', '2021-02-19 17:02:13.549', NULL, 1, 117, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (118, '2021-02-19 17:02:13.553', '2021-02-19 17:02:13.553', NULL, 1, 118, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (119, '2021-02-19 17:02:13.558', '2021-02-19 17:02:13.558', NULL, 1, 119, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (120, '2021-02-19 17:02:13.563', '2021-02-19 17:02:13.563', NULL, 1, 120, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (121, '2021-02-19 17:02:13.568', '2021-02-19 17:02:13.568', NULL, 1, 121, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (122, '2021-02-19 17:02:13.573', '2021-02-19 17:02:13.573', NULL, 1, 122, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (123, '2021-02-19 17:02:13.579', '2021-02-19 17:02:13.579', NULL, 1, 123, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (124, '2021-02-19 17:02:13.584', '2021-02-19 17:02:13.584', NULL, 1, 124, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (125, '2021-02-19 17:02:13.589', '2021-02-19 17:02:13.589', NULL, 1, 125, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (126, '2021-02-19 17:02:13.594', '2021-02-19 17:02:13.594', NULL, 1, 126, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (127, '2021-02-19 17:02:13.598', '2021-02-19 17:02:13.598', NULL, 1, 127, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (128, '2021-02-19 17:02:13.603', '2021-02-19 17:02:13.603', NULL, 1, 128, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (129, '2021-02-19 17:02:13.608', '2021-02-19 17:02:13.608', NULL, 1, 129, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (130, '2021-02-19 17:02:13.613', '2021-02-19 17:02:13.613', NULL, 1, 130, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (131, '2021-02-19 17:02:13.618', '2021-02-19 17:02:13.618', NULL, 1, 131, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (132, '2021-02-19 17:02:13.622', '2021-02-19 17:02:13.622', NULL, 1, 132, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (133, '2021-02-19 17:02:13.626', '2021-02-19 17:02:13.626', NULL, 1, 133, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (134, '2021-02-19 17:02:13.631', '2021-02-19 17:02:13.631', NULL, 1, 134, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (135, '2021-02-19 17:02:13.635', '2021-02-19 17:02:13.635', NULL, 1, 135, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (136, '2021-02-19 17:02:13.640', '2021-02-19 17:02:13.640', NULL, 1, 136, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (137, '2021-02-19 17:02:13.644', '2021-02-19 17:02:13.644', NULL, 1, 137, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (138, '2021-02-19 17:02:13.649', '2021-02-19 17:02:14.173', NULL, 1, 138, 'algorithm', 1, '2021-02-19 17:02:14.173', 0, 0);
INSERT INTO `user_problems` VALUES (139, '2021-02-19 17:02:13.653', '2021-02-19 17:02:13.653', NULL, 1, 139, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (140, '2021-02-19 17:02:13.658', '2021-02-19 17:02:13.658', NULL, 1, 140, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (141, '2021-02-19 17:02:13.662', '2021-02-19 17:02:13.662', NULL, 1, 141, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (142, '2021-02-19 17:02:13.667', '2021-02-19 17:02:13.667', NULL, 1, 142, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (143, '2021-02-19 17:02:13.672', '2021-02-19 17:02:13.672', NULL, 1, 143, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (144, '2021-02-19 17:02:13.677', '2021-02-19 17:02:13.677', NULL, 1, 144, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (145, '2021-02-19 17:02:13.682', '2021-02-19 17:02:13.682', NULL, 1, 145, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (146, '2021-02-19 17:02:13.686', '2021-02-19 17:02:13.686', NULL, 1, 146, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (147, '2021-02-19 17:02:13.690', '2021-02-19 17:02:13.690', NULL, 1, 147, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (148, '2021-02-19 17:02:13.694', '2021-02-19 17:02:13.694', NULL, 1, 148, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (149, '2021-02-19 17:02:13.705', '2021-02-19 17:02:13.705', NULL, 1, 149, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (150, '2021-02-19 17:02:13.714', '2021-02-19 17:02:13.714', NULL, 1, 150, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (151, '2021-02-19 17:02:13.718', '2021-02-19 17:02:13.718', NULL, 1, 151, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (152, '2021-02-19 17:02:13.726', '2021-02-19 17:02:13.726', NULL, 1, 152, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (153, '2021-02-19 17:02:13.731', '2021-02-19 17:02:13.731', NULL, 1, 153, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (154, '2021-02-19 17:02:13.735', '2021-02-19 17:02:13.735', NULL, 1, 154, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (155, '2021-02-19 17:02:13.740', '2021-02-19 17:02:13.740', NULL, 1, 155, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (156, '2021-02-19 17:02:13.744', '2021-02-19 17:02:13.744', NULL, 1, 156, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (157, '2021-02-19 17:02:13.749', '2021-02-19 17:02:13.749', NULL, 1, 157, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (158, '2021-02-19 17:02:13.753', '2021-02-19 17:02:13.753', NULL, 1, 158, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (159, '2021-02-19 17:02:13.757', '2021-02-19 17:02:13.757', NULL, 1, 159, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (160, '2021-02-19 17:02:13.762', '2021-02-19 17:02:13.762', NULL, 1, 160, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (161, '2021-02-19 17:02:13.766', '2021-02-19 17:02:13.766', NULL, 1, 161, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (162, '2021-02-19 17:02:13.771', '2021-02-19 17:02:13.771', NULL, 1, 162, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (163, '2021-02-19 17:02:13.776', '2021-02-19 17:02:13.776', NULL, 1, 163, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (164, '2021-02-19 17:02:13.781', '2021-02-19 17:02:13.781', NULL, 1, 164, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (165, '2021-02-19 17:02:13.786', '2021-02-19 17:02:13.786', NULL, 1, 165, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (166, '2021-02-19 17:02:13.792', '2021-02-19 17:02:13.792', NULL, 1, 166, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (167, '2021-02-19 17:02:13.797', '2021-02-19 17:02:13.797', NULL, 1, 167, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (168, '2021-02-19 17:02:13.802', '2021-02-19 17:02:13.802', NULL, 1, 168, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (169, '2021-02-19 17:02:13.808', '2021-02-19 17:02:13.808', NULL, 1, 169, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (170, '2021-02-19 17:02:13.814', '2021-02-19 17:02:13.814', NULL, 1, 170, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (171, '2021-02-19 17:02:13.819', '2021-02-19 17:02:13.819', NULL, 1, 171, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (172, '2021-02-19 17:02:13.823', '2021-02-19 17:02:13.823', NULL, 1, 172, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (173, '2021-02-19 17:02:13.829', '2021-02-19 17:02:13.829', NULL, 1, 173, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (174, '2021-02-19 17:02:13.833', '2021-02-19 17:02:13.833', NULL, 1, 174, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (175, '2021-02-19 17:02:13.838', '2021-02-19 17:02:13.838', NULL, 1, 175, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (176, '2021-02-19 17:02:13.843', '2021-02-19 17:02:13.843', NULL, 1, 176, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (177, '2021-02-19 17:02:13.847', '2021-02-19 17:02:13.847', NULL, 1, 177, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (178, '2021-02-19 17:02:13.852', '2021-02-19 17:02:13.852', NULL, 1, 178, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (179, '2021-02-19 17:02:13.856', '2021-02-19 17:02:13.856', NULL, 1, 179, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (180, '2021-02-19 17:02:13.861', '2021-02-19 17:02:13.861', NULL, 1, 180, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (181, '2021-02-19 17:02:13.865', '2021-02-19 17:02:13.865', NULL, 1, 181, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (182, '2021-02-19 17:02:13.870', '2021-02-19 17:02:13.870', NULL, 1, 182, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (183, '2021-02-19 17:02:13.875', '2021-02-19 17:02:13.875', NULL, 1, 183, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (184, '2021-02-19 17:02:13.880', '2021-02-19 17:02:13.880', NULL, 1, 184, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (185, '2021-02-19 17:02:13.885', '2021-02-19 17:02:13.885', NULL, 1, 185, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (186, '2021-02-19 17:02:13.890', '2021-02-19 17:02:13.890', NULL, 1, 186, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (187, '2021-02-19 17:02:13.895', '2021-02-19 17:02:13.895', NULL, 1, 187, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (188, '2021-02-19 17:02:13.900', '2021-02-19 17:02:13.900', NULL, 1, 188, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (189, '2021-02-19 17:02:13.904', '2021-02-19 17:02:13.904', NULL, 1, 189, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (190, '2021-02-19 17:02:13.910', '2021-02-19 17:02:13.910', NULL, 1, 190, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (191, '2021-02-19 17:02:13.919', '2021-02-19 17:02:13.919', NULL, 1, 191, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (192, '2021-02-19 17:02:13.925', '2021-02-19 17:02:13.925', NULL, 1, 192, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (193, '2021-02-19 17:02:13.930', '2021-02-19 17:02:13.930', NULL, 1, 193, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (194, '2021-02-19 17:02:13.934', '2021-02-19 17:02:13.934', NULL, 1, 194, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (195, '2021-02-19 17:02:13.940', '2021-02-19 17:02:13.940', NULL, 1, 195, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (196, '2021-02-19 17:02:13.946', '2021-02-19 17:02:13.946', NULL, 1, 196, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (197, '2021-02-19 17:02:13.951', '2021-02-19 17:02:13.951', NULL, 1, 197, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (198, '2021-02-19 17:02:13.955', '2021-02-19 17:02:13.955', NULL, 1, 198, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (199, '2021-02-19 17:02:13.961', '2021-02-19 17:02:13.961', NULL, 1, 199, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (200, '2021-02-19 17:02:13.966', '2021-02-19 17:02:13.966', NULL, 1, 200, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (201, '2021-02-19 17:02:13.971', '2021-02-19 17:02:13.971', NULL, 1, 201, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (202, '2021-02-19 17:02:13.980', '2021-02-19 17:02:13.980', NULL, 1, 202, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (203, '2021-02-19 17:02:13.985', '2021-02-19 17:02:13.985', NULL, 1, 203, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (204, '2021-02-19 17:02:13.991', '2021-02-19 17:02:13.991', NULL, 1, 204, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (205, '2021-02-19 17:02:13.996', '2021-02-19 17:02:13.996', NULL, 1, 205, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (206, '2021-02-19 17:02:14.001', '2021-02-19 17:02:14.001', NULL, 1, 206, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (207, '2021-02-19 17:02:14.007', '2021-02-19 17:02:14.007', NULL, 1, 207, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (208, '2021-02-19 17:02:14.012', '2021-02-19 17:02:14.012', NULL, 1, 208, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (209, '2021-02-19 17:02:14.017', '2021-02-19 17:02:14.017', NULL, 1, 209, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (210, '2021-02-19 17:02:14.027', '2021-02-19 17:02:14.027', NULL, 1, 210, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (211, '2021-02-19 17:02:14.032', '2021-02-19 17:02:14.032', NULL, 1, 211, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (212, '2021-02-19 17:02:14.036', '2021-02-19 17:02:14.036', NULL, 1, 212, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (213, '2021-02-19 17:02:14.041', '2021-02-19 17:02:14.041', NULL, 1, 213, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (214, '2021-02-19 17:02:14.046', '2021-02-19 17:02:14.046', NULL, 1, 214, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (215, '2021-02-19 17:02:14.053', '2021-02-19 17:02:14.053', NULL, 1, 215, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (216, '2021-02-19 17:02:14.058', '2021-02-19 17:02:14.058', NULL, 1, 216, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (217, '2021-02-19 17:02:14.063', '2021-02-19 17:02:14.063', NULL, 1, 217, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (218, '2021-02-19 17:02:14.069', '2021-02-19 17:02:14.069', NULL, 1, 218, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (219, '2021-02-19 17:02:14.075', '2021-02-19 17:02:14.075', NULL, 1, 219, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (220, '2021-02-19 17:02:14.081', '2021-02-19 17:02:14.081', NULL, 1, 220, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (221, '2021-02-19 17:02:14.086', '2021-02-19 17:02:14.086', NULL, 1, 221, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (222, '2021-02-19 17:02:14.091', '2021-02-19 17:02:14.091', NULL, 1, 222, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (223, '2021-02-19 17:02:14.095', '2021-02-19 17:02:14.095', NULL, 1, 223, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (224, '2021-02-19 17:02:14.100', '2021-02-19 17:02:14.100', NULL, 1, 224, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (225, '2021-02-19 17:02:14.104', '2021-02-19 17:02:14.104', NULL, 1, 225, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (226, '2021-02-19 17:02:14.109', '2021-02-19 17:02:14.109', NULL, 1, 226, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (227, '2021-02-19 17:02:14.113', '2021-02-19 17:02:14.113', NULL, 1, 227, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (228, '2021-02-19 17:02:14.118', '2021-02-19 17:02:14.118', NULL, 1, 228, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (229, '2021-02-19 17:02:14.122', '2021-02-19 17:02:14.122', NULL, 1, 229, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (230, '2021-02-19 17:02:14.128', '2021-02-19 17:02:14.128', NULL, 1, 230, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (231, '2021-02-19 17:02:14.132', '2021-02-19 17:02:14.132', NULL, 1, 231, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (232, '2021-02-19 17:02:14.137', '2021-02-19 17:02:14.137', NULL, 1, 232, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (233, '2021-02-19 17:02:14.141', '2021-02-19 17:02:14.141', NULL, 1, 233, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (234, '2021-02-19 17:02:14.146', '2021-02-19 17:02:14.146', NULL, 1, 234, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
INSERT INTO `user_problems` VALUES (235, '2021-02-19 17:02:14.151', '2021-02-19 17:02:14.151', NULL, 1, 235, 'algorithm', 0, '2006-01-02 15:04:05.000', 0, 0);
COMMIT;

-- ----------------------------
-- Table structure for user_problem_logs
-- ----------------------------
DROP TABLE IF EXISTS `user_problem_logs`;
CREATE TABLE `user_problem_logs` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `created_at` datetime(3) DEFAULT NULL,
  `updated_at` datetime(3) DEFAULT NULL,
  `deleted_at` datetime(3) DEFAULT NULL,
  `user_id` bigint(20) NOT NULL,
  `problem_id` bigint(20) NOT NULL,
  `problem_type` varchar(256) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  `action` varchar(256) COLLATE utf8mb4_bin DEFAULT NULL,
  `action_time` datetime(3) DEFAULT NULL,
  PRIMARY KEY (`id`,`user_id`,`problem_id`) USING BTREE,
  KEY `idx_user_problems_deleted_at` (`deleted_at`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for users
-- ----------------------------
DROP TABLE IF EXISTS `users`;
CREATE TABLE `users` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT,
  `created_at` datetime(3) DEFAULT NULL,
  `updated_at` datetime(3) DEFAULT NULL,
  `deleted_at` datetime(3) DEFAULT NULL,
  `name` varchar(256) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  `email` varchar(256) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  `phone` varchar(256) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  `password` varchar(256) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  `role` varchar(256) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  `persist_day` bigint DEFAULT NULL,
  `interrupt_day` bigint DEFAULT NULL,
  `config` varchar(256) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  KEY `idx_users_deleted_at` (`deleted_at`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Records of users
-- ----------------------------
BEGIN;
INSERT INTO `users` VALUES (1, '2021-02-19 17:02:12.886', '2021-02-19 17:02:12.886', NULL, 'admin', '', '', '21232f297a57a5a743894a0e4a801fc3', 'user', 0, 0, '{\"problem_num\":{\"algorithm\":3}}');
COMMIT;

SET FOREIGN_KEY_CHECKS = 1;
